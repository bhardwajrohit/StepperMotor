
simple_monitor.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
08000188 l    d  .text	00000000 .text
08009808 l    d  .rodata	00000000 .rodata
08019178 l    d  .ARM	00000000 .ARM
08019180 l    d  .init_array	00000000 .init_array
08019188 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
10000000 l    d  .ccmram	00000000 .ccmram
20000a3c l    d  .bss	00000000 .bss
20001c04 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
08019bc8 l    d  .parsetable	00000000 .parsetable
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 build/Drivers/CMSIS/Device/ST/STM32F3xx/Source/Templates/gcc/startup_stm32f303xc.o
f1e0f85f l       *ABS*	00000000 BootRAM
08004d88 l       .text	00000000 LoopCopyDataInit
08004d80 l       .text	00000000 CopyDataInit
08004d9c l       .text	00000000 LoopFillZerobss
08004d96 l       .text	00000000 FillZerobss
08004dae l       .text	00000000 LoopForever
08004dc8 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
080097ec l     O .text	00000000 __EH_FRAME_BEGIN__
08000188 l     F .text	00000000 __do_global_dtors_aux
20000a3c l       .bss	00000000 completed.8108
08019188 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
080001ac l     F .text	00000000 frame_dummy
20000a40 l       .bss	00000000 object.8113
08019184 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 build/mycode.o
08000222 l       .text	00000000 HERE
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 bpabi.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 mytest.c
00000000 l    df *ABS*	00000000 lab12.c
00000000 l    df *ABS*	00000000 monitor.c
00000000 l    df *ABS*	00000000 parser.c
20000a58 l     O .bss	00000004 count.5807
20000a5c l     O .bss	00000004 saved.5808
20000004 l     O .data	00000004 printPrompt.5810
20000008 l     O .data	00000004 buf.5809
0800a0c4 l     O .rodata	00000006 __FUNCTION__.5824
00000000 l    df *ABS*	00000000 dump.c
20000010 l     O .data	00000004 count.5238
20000a60 l     O .bss	00000004 address.5237
00000000 l    df *ABS*	00000000 syscall.c
20000a64 l     O .bss	00000004 heap_end.5745
00000000 l    df *ABS*	00000000 terminal.c
08001c28 l     F .text	00000080 USBD_CDC_DataIn
20000a68 l     O .bss	00000124 TerminalState
00000000 l    df *ABS*	00000000 decoder.c
08001f8c l     F .text	00000078 Uncompress
20000b8c l     O .bss	00000014 buf.5796
00000000 l    df *ABS*	00000000 system_stm32f3xx.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal.c
20000ba0 l     O .bss	00000004 uwTick
00000000 l    df *ABS*	00000000 stm32f3xx_hal_cortex.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_gpio.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_pcd.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_pcd_ex.c
00000000 l    df *ABS*	00000000 usbd_core.c
00000000 l    df *ABS*	00000000 usbd_ctlreq.c
20000ba4 l     O .bss	00000001 cfgidx.10121
00000000 l    df *ABS*	00000000 usbd_ioreq.c
00000000 l    df *ABS*	00000000 usbd_cdc.c
08004638 l     F .text	00000012 USBD_CDC_DataIn
0800464a l     F .text	00000028 USBD_CDC_EP0_RxReady
08004674 l     F .text	0000000c USBD_CDC_GetFSCfgDesc
08004680 l     F .text	0000000c USBD_CDC_GetHSCfgDesc
0800468c l     F .text	0000000c USBD_CDC_GetOtherSpeedCfgDesc
080046a4 l     F .text	0000002e USBD_CDC_DataOut
080046d2 l     F .text	0000005a USBD_CDC_Setup
0800472c l     F .text	0000003a USBD_CDC_DeInit
08004766 l     F .text	00000086 USBD_CDC_Init
20000094 l     O .data	0000000a USBD_CDC_DeviceQualifierDesc
00000000 l    df *ABS*	00000000 usbd_conf.c
20000ba8 l     O .bss	00000230 mem.10343
00000000 l    df *ABS*	00000000 usbd_desc.c
08004aa8 l     F .text	00000028 IntToUnicode
00000000 l    df *ABS*	00000000 usbd_cdc_interface.c
08004b80 l     F .text	00000004 CDC_Itf_DeInit
08004b84 l     F .text	00000020 CDC_Itf_Receive
08004ba4 l     F .text	00000018 CDC_Itf_Init
08004bbc l     F .text	00000058 CDC_Itf_Control
00000000 l    df *ABS*	00000000 stm32f3_discovery.c
00000000 l    df *ABS*	00000000 stm32f3_discovery_accelerometer.c
20000dd8 l     O .bss	00000004 AccelerometerDrv
00000000 l    df *ABS*	00000000 stm32f3_discovery_gyroscope.c
20000ddc l     O .bss	00000004 GyroscopeDrv
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 setvbuf.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 vfprintf.c
080067a0 l     F .text	00000076 __sbprintf
08018ffc l     O .rodata	00000010 zeroes.6931
08019050 l     O .rodata	00000010 blanks.6930
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
080068dc l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
080068fc l     F .text	0000012c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08007a5c l     F .text	000000f0 __sinit.part.1
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
200005cc l     O .data	00000038 lconv
20000604 l     O .data	00000020 lc_ctype_charset
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mprec.c
0801907c l     O .rodata	0000000c p05.5296
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
080093e8 l     F .text	00000078 __sprint_r.part.0
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 /usr/local/bin/../lib/gcc/arm-none-eabi/4.9.3/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 /usr/local/bin/../lib/gcc/arm-none-eabi/4.9.3/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 STM32F30x_decoder.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
200001a0 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
00000400 l       *ABS*	00000000 _Min_Stack_Size
00000000 l       *UND*	00000000 HAL_DMA_Start_IT
0801918c l       .fini_array	00000000 __fini_array_end
20000a3c l       .bss	00000000 __bss_start__
20001c04 l       .bss	00000000 __bss_end__
00001000 l       *ABS*	00000000 _Min_Heap_Size
00000000 l       *UND*	00000000 HAL_DMA_Abort
00000000 l       *UND*	00000000 software_init_hook
08019188 l       .fini_array	00000000 __fini_array_start
08019188 l       .init_array	00000000 __init_array_end
00000000 l       *UND*	00000000 hardware_init_hook
08019180 l       .init_array	00000000 __preinit_array_end
00000000 l       *UND*	00000000 __stack
08019180 l       .init_array	00000000 __init_array_start
00000000 l       *UND*	00000000 _exit
08019180 l       .init_array	00000000 __preinit_array_start
08004dc8  w    F .text	00000002 RTC_Alarm_IRQHandler
08014bd4 g     O .rodata	00000008 RTC_BKP19R_fields
08018e48 g     O .rodata	00000010 APBAHBPrescTable
0800b314 g     O .rodata	00000050 TIM2_SR_fields
08012174 g     O .rodata	00000100 CAN_F10R1_fields
08015984 g     O .rodata	00000008 TIM16_DMAR_fields
08004eec g     F .text	00000014 putchar
08004dc8  w    F .text	00000002 TIM8_TRG_COM_IRQHandler
08014824 g     O .rodata	00000008 I2C1_RXDR_fields
08004dc8  w    F .text	00000002 TIM8_CC_IRQHandler
08014d6c g     O .rodata	00000030 TIM6_CR1_fields
0800af8c g     O .rodata	00000048 I2C1_ICR_fields
08001c20 g     F .text	00000004 _isatty_r
20000e18 g     O .bss	00000050 input_b
08000c20 g     F .text	00000012 .hidden __aeabi_dcmple
08014aac g     O .rodata	00000008 TIM2_PSC_fields
0800baa4 g     O .rodata	00000028 TIM17_CCMR1_Output_fields
080050a8 g     F .text	000000ba strcpy
08014fc4 g     O .rodata	00000050 COMP_COMP5_CSR_fields
08000d0c g     F .text	0000002e .hidden __gnu_uldivmod_helper
08010b4c g     O .rodata	00000008 I2C1_TXDR_fields
08004f00 g     F .text	0000005c _puts_r
08004b48 g     F .text	0000001c USBD_VCP_ConfigStrDescriptor
0800cf14 g     O .rodata	00000100 CAN_F19R1_fields
08000b5c g     F .text	0000007a .hidden __cmpdf2
0800205c g     F .text	00000054 DecodeWriteRegister
08003ee6 g     F .text	000000c8 HAL_PCD_EP_ClrStall
08011d24 g     O .rodata	00000008 TIM16_CCR1_fields
08004dc8  w    F .text	00000002 DebugMon_Handler
08001c24 g     F .text	00000004 _lseek_r
080112ac g     O .rodata	00000020 FPU_MVFR1_fields
08004940 g     F .text	0000001a HAL_PCD_ResetCallback
08003fe2 g     F .text	0000002e PCD_WritePMA
08015bec g     O .rodata	00000100 CAN_F22R1_fields
0800b51c g     O .rodata	000000e0 CAN_FA1R_fields
20000eb8 g     O .bss	00000224 hUSBDDevice
0800d10c g     O .rodata	00000048 TIM2_SMCR_fields
0800ba64 g     O .rodata	00000020 NVIC_IPR1_fields
08019bec g     O .parsetable	0000000c CmdTestE
08000b5c g     F .text	0000007a .hidden __eqdf2
08010fbc g     O .rodata	00000100 CAN_F14R1_fields
0801216c g     O .rodata	00000008 TIM8_PSC_fields
08010404 g     O .rodata	00000030 TIM15_EGR_fields
08000d40 g     F .text	0000029c .hidden __divdi3
08001ca8 g     F .text	00000054 CmdStats
08003fae g     F .text	00000034 HAL_PCDEx_PMAConfig
08012d4c g     O .rodata	00000140 TIM2_registers
080144e4 g     O .rodata	00000058 TIM15_DIER_fields
0800c264 g     O .rodata	00000008 DMA1_CMAR3_fields
0800ca04 g     O .rodata	00000100 GPIOA_BSRR_fields
08018a00 g     O .rodata	00000060 DMA1_CCR7_fields
08003568 g     F .text	000001b0 HAL_PCD_EP_Close
08011404 g     O .rodata	00000008 TSC_IOG6CR_fields
0800c26c g     O .rodata	00000028 ADC1_SQR1_fields
080006cc g     F .text	0000005a .hidden __floatdidf
0800c144 g     O .rodata	000000e0 CAN_FS1R_fields
08011c6c g     O .rodata	00000030 TIM1_CCMR2_Input_fields
0800ac94 g     O .rodata	00000010 RTC_SHIFTR_fields
08004ec4 g     F .text	00000028 printf
08014c14 g     O .rodata	00000028 CAN_TI1R_fields
08004076 g     F .text	00000016 USBD_SetClassConfig
080118dc g     O .rodata	00000020 NVIC_IPR14_fields
0800977c g     F .text	00000054 _wcrtomb_r
08004dc8  w    F .text	00000002 TIM1_CC_IRQHandler
08002f14 g     F .text	00000060 HAL_NVIC_SetPriority
0800d6bc g     O .rodata	000001b0 ADC1_registers
08004928 g     F .text	00000010 HAL_PCD_DataInStageCallback
08014bdc g     O .rodata	00000018 TIM2_CR2_fields
08011824 g     O .rodata	00000008 Flash_WRPR_fields
080093c0 g     F .text	00000020 __sseek
08007b4c g     F .text	0000000a __sinit
0800cc8c g     O .rodata	00000060 DMA1_CCR2_fields
08009478 g     F .text	000000a8 __swbuf_r
08001494 g     F .text	00000018 delay1
08004dc8  w    F .text	00000002 HardFault_Handler
0800b6ac g     O .rodata	00000100 TSC_IOHCR_fields
08010a1c g     O .rodata	00000020 CRC_CR_fields
080014bc g     F .text	00000064 lcd
0800b69c g     O .rodata	00000008 NVIC_ISER0_fields
080088d4 g     F .text	00000002 __malloc_unlock
08013834 g     O .rodata	00000008 TIM15_ARR_fields
08010ee4 g     O .rodata	00000008 RTC_BKP24R_fields
08010edc g     O .rodata	00000008 TIM1_CCR3_fields
08018a70 g     O .rodata	00000008 TIM1_DMAR_fields
0800c98c g     O .rodata	00000008 TIM15_CCR1_fields
08004dc8  w    F .text	00000002 USB_HP_IRQHandler
08014a94 g     O .rodata	00000010 USART1_RTOR_fields
0800f1a4 g     O .rodata	00000070 RCC_AHBENR_fields
080126cc g     O .rodata	00000018 TIM2_CNT_fields
08013714 g     O .rodata	000000b0 I2C1_registers
080013cc g     F .text	0000000e SysTick_Handler
0800f9f4 g     O .rodata	00000008 RTC_WPR_fields
08015664 g     O .rodata	00000008 RTC_SSR_fields
0801119c g     O .rodata	00000008 TSC_IOG2CR_fields
0800314c g     F .text	0000000a HAL_GPIO_WritePin
08004844 g     F .text	00000026 USBD_CDC_ReceivePacket
08004dc8  w    F .text	00000002 PVD_IRQHandler
0800b6a4 g     O .rodata	00000008 DMA1_CPAR7_fields
080126e4 g     O .rodata	00000010 TIM6_CNT_fields
0800c7ac g     O .rodata	00000078 TIM1_DIER_fields
08004938 g     F .text	00000008 HAL_PCD_SOFCallback
0801047c g     O .rodata	00000008 NVIC_ICPR0_fields
08008808 g     F .text	000000c6 memmove
08004dc8  w    F .text	00000002 TAMP_STAMP_IRQHandler
0801540c g     O .rodata	00000020 NVIC_IPR2_fields
0801918c g       *ABS*	00000000 _sidata
08002e34 g     F .text	00000038 HAL_RCC_GetHCLKFreq
08004dc8  w    F .text	00000002 PendSV_Handler
08019bd4 g     O .parsetable	0000000c CmdButtonE
08013b5c g     O .rodata	00000008 NVIC_ICPR1_fields
08004dc8  w    F .text	00000002 NMI_Handler
08002f74 g     F .text	00000018 HAL_NVIC_EnableIRQ
080088d8 g     F .text	0000004c _Balloc
08019180 g       .ARM	00000000 __exidx_end
080051d0 g     F .text	00000064 __strtok_r
08004dc8  w    F .text	00000002 EXTI3_IRQHandler
08002dc8 g     F .text	0000006c HAL_RCC_GetSysClockFreq
08004c98 g     F .text	0000001c BSP_LED_Off
08018780 g     O .rodata	00000008 DMA1_CNDTR5_fields
0800f4ec g     O .rodata	00000098 TIM8_CCER_fields
0800fd14 g     O .rodata	00000100 CAN_F8R2_fields
08000b4c g     F .text	0000008a .hidden __gtdf2
08019c88 g       .parsetable	00000000 _parsetable_end
0801436c g     O .rodata	00000048 RCC_AHBRSTR_fields
08004dcc g     F .text	0000000c __errno
0800b5fc g     O .rodata	00000008 RTC_BKP6R_fields
0800bb8c g     O .rodata	00000028 CAN_TI2R_fields
08004278 g     F .text	00000218 USBD_StdDevReq
0801397c g     O .rodata	00000008 NVIC_ISER2_fields
08019c70 g     O .parsetable	0000000c CmdWE
0800e96c g     O .rodata	00000020 CAN_RDH0R_fields
08010ea4 g     O .rodata	00000020 FPU_FPDSCR_fields
08004a90 g     F .text	0000000c USBD_VCP_DeviceDescriptor
08002e6c  w    F .text	00000002 HAL_MspInit
0800ce0c g     O .rodata	00000100 CAN_F0R2_fields
0800abf4 g     O .rodata	00000008 TSC_IOG8CR_fields
08004a28 g     F .text	00000026 USBD_LL_IsStallEP
08014ec4 g     O .rodata	00000100 CAN_F0R1_fields
0800fe14 g     O .rodata	00000020 TIM15_SMCR_fields
080049dc g     F .text	0000000e USBD_LL_Start
0800406c g     F .text	0000000a USBD_Start
08001c16 g     F .text	0000000a _fstat_r
08003156 g     F .text	00000008 HAL_GPIO_TogglePin
08013c8c g     O .rodata	00000048 TIM8_CR1_fields
08011ad4 g     O .rodata	00000008 Flash_AR_fields
0800df44 g     O .rodata	00000100 CAN_F2R1_fields
08010bb4 g     O .rodata	00000058 COMP_COMP4_CSR_fields
0800c5d4 g     O .rodata	00000040 GPIOB_AFRH_fields
08009804 g       .text	00000000 _etext
08010b84 g     O .rodata	00000010 EXTI_PR2_fields
0801190c g     O .rodata	00000028 USB_FS_FNR_fields
20000a3c g       .bss	00000000 _sbss
08010944 g     O .rodata	00000070 COMP_registers
08013b64 g     O .rodata	00000100 CAN_F4R2_fields
08004a8c g     F .text	00000002 USBD_static_free
080103fc g     O .rodata	00000008 DMA1_CMAR1_fields
0800dcdc g     O .rodata	00000060 TIM2_DIER_fields
08000be8 g     F .text	00000010 .hidden __aeabi_cdcmple
0800eb5c g     O .rodata	00000008 TSC_IOG1CR_fields
08015954 g     O .rodata	00000020 TIM17_CCER_fields
08015754 g     O .rodata	00000008 TIM8_RCR_fields
08011edc g     O .rodata	00000010 TIM16_CNT_fields
08011dbc g     O .rodata	00000100 GPIOB_BSRR_fields
0800efec g     O .rodata	00000100 CAN_F16R2_fields
0800cc34 g     O .rodata	00000018 ADC1_OFR1_fields
0801453c g     O .rodata	00000100 CAN_F24R2_fields
0800e2c4 g     O .rodata	00000008 RTC_BKP23R_fields
080115ec g     O .rodata	00000008 TIM15_CCR2_fields
0800beb4 g     O .rodata	00000098 ADC1_CFGR_fields
0800b9e4 g     O .rodata	00000008 RTC_BKP13R_fields
0800405e g     F .text	0000000e USBD_RegisterClass
0800f21c g     O .rodata	00000100 CAN_F20R1_fields
0800f0ec g     O .rodata	00000060 USART1_ICR_fields
08018cf8 g     O .rodata	00000100 CAN_F25R2_fields
08015974 g     O .rodata	00000008 TSC_IOG4CR_fields
0800f31c g     O .rodata	00000100 CAN_F27R2_fields
08018c78 g     O .rodata	00000078 TIM8_SR_fields
0800af3c g     O .rodata	00000050 USB_FS_ISTR_fields
08013814 g     O .rodata	00000008 DMA1_CMAR2_fields
0800c824 g     O .rodata	00000008 RTC_BKP26R_fields
08010454 g     O .rodata	00000028 ADC1_SQR2_fields
0800f9fc g     O .rodata	00000010 TIM17_CNT_fields
0800c684 g     O .rodata	00000008 WWDG_SR_fields
0800de3c g     O .rodata	000000c0 EXTI_registers
08002fb8 g     F .text	00000188 HAL_GPIO_Init
0800421a g     F .text	00000006 USBD_LL_SetSpeed
20000178 g     O .data	00000004 BUTTON_PORT
08004d58 g     F .text	00000010 BSP_ACCELERO_GetXYZ
0800e2b4 g     O .rodata	00000008 NVIC_ICTR_fields
0800b8ac g     O .rodata	00000008 TIM6_ARR_fields
0800e98c g     O .rodata	000000b0 CAN_TSR_fields
08001ad4 g     F .text	000000b4 DumpBuffer
0800fc94 g     O .rodata	00000080 GPIOA_IDR_fields
0800ab24 g     O .rodata	00000050 USB_FS_USB_EP3R_fields
0800495c g     F .text	00000002 HAL_PCD_ResumeCallback
08000284 g     F .text	00000134 memcpy
08000bd8 g     F .text	00000020 .hidden __aeabi_cdrcmple
08014ab4 g     O .rodata	00000100 CAN_F7R2_fields
080146cc g     O .rodata	00000010 TIM1_CNT_fields
08004f6c g     F .text	000000f8 setvbuf
08001248 g     F .text	0000005c CmdLED
0800e154 g     O .rodata	00000078 TIM1_SR_fields
0800ccec g     O .rodata	00000020 NVIC_IPR13_fields
0800ba84 g     O .rodata	00000008 TIM15_PSC_fields
080044c0 g     F .text	000000b2 USBD_StdEPReq
08007a50 g     F .text	0000000c _cleanup_r
08012314 g     O .rodata	00000040 GPIOA_AFRH_fields
08001520 g     F .text	00000068 functionCmd
0800065c g     F .text	00000022 .hidden __floatsidf
080139c4 g     O .rodata	00000010 DAC_DHR12RD_fields
08013d0c g     O .rodata	00000058 COMP_COMP2_CSR_fields
080139d4 g     O .rodata	00000078 TIM8_DIER_fields
08018a60 g     O .rodata	00000010 ADC1_DIFSEL_fields
08000b54 g     F .text	00000082 .hidden __ltdf2
08004cd0 g     F .text	00000074 BSP_PB_Init
08004dc8  w    F .text	00000002 USB_HP_CAN_TX_IRQHandler
08004dc8  w    F .text	00000002 EXTI0_IRQHandler
08015084 g     O .rodata	00000010 TIM8_OR_fields
08004dc8  w    F .text	00000002 I2C2_EV_IRQHandler
0800bb5c g     O .rodata	00000020 CAN_TDH0R_fields
0800e04c g     O .rodata	00000050 USB_FS_USB_EP4R_fields
08000cac g     F .text	00000000 .hidden __aeabi_uldivmod
08010b54 g     O .rodata	00000030 WWDG_registers
0800ae34 g     O .rodata	00000008 TIM17_RCR_fields
08004f5c g     F .text	00000010 puts
0800460c g     F .text	00000016 USBD_CtlSendStatus
08004dc8  w    F .text	00000002 FPU_IRQHandler
08002ed4  w    F .text	0000001a HAL_Delay
08004490 g     F .text	00000030 USBD_StdItfReq
0800e044 g     O .rodata	00000008 TIM8_CCR4_fields
20000014 g     O .data	00000004 SystemCoreClock
08009308 g     F .text	0000005c __fpclassifyd
080146dc g     O .rodata	00000120 TIM15_registers
0800381c g     F .text	00000182 HAL_PCD_EP_Transmit
080001fc g     F .text	00000012 my_Tick
08010da4 g     O .rodata	00000100 CAN_F3R1_fields
08004238 g     F .text	00000028 USBD_ParseSetupRequest
08011c1c g     O .rodata	00000010 TIM2_CCR1_fields
0800ee3c g     O .rodata	00000010 DAC_SWTRIGR_fields
08004dc8  w    F .text	00000002 TIM1_UP_TIM16_IRQHandler
0800dabc g     O .rodata	00000100 CAN_F13R1_fields
08008240 g     F .text	00000010 malloc
0801022c g     O .rodata	00000008 IWDG_RLR_fields
08004010 g     F .text	00000022 PCD_ReadPMA
080012cc g     F .text	00000054 CmdGyro
0801563c g     O .rodata	00000010 CAN_FMR_fields
08019088 g     O .rodata	000000c8 __mprec_tens
08018ad0 g     O .rodata	00000040 OPAMP_registers
0801353c g     O .rodata	00000008 DMA1_CNDTR4_fields
08014e3c g     O .rodata	00000008 NVIC_IABR1_fields
08014d3c g     O .rodata	00000030 ADC1_2_registers
20000128 g     O .data	0000001c VCP_Desc
0801485c g     O .rodata	000000d0 EXTI_PR1_fields
08004dc8  w    F .text	00000002 UsageFault_Handler
08008144 g     F .text	00000008 __locale_charset
0801311c g     O .rodata	00000020 TIM8_CCR5_fields
08019c10 g     O .parsetable	0000000c gpioinitLCDE
08004dc8  w    F .text	00000002 ADC1_2_IRQHandler
20000de8 g     O .bss	00000004 __malloc_top_pad
20000e68 g     O .bss	00000050 input
08013d64 g     O .rodata	00000100 CAN_F4R1_fields
080118fc g     O .rodata	00000010 ADC1_TR3_fields
0800e1cc g     O .rodata	00000008 DMA1_CPAR2_fields
0800c68c g     O .rodata	00000048 TIM16_DIER_fields
08003140 g     F .text	0000000c HAL_GPIO_ReadPin
08010b3c g     O .rodata	00000008 NVIC_ICER2_fields
0800535c g     F .text	00000018 strtoul
20001358 g     O .bss	00000004 BuffLength
20000624 g     O .data	00000004 __mb_cur_max
0800063c g     F .text	0000001e .hidden __aeabi_ui2d
08008158 g     F .text	00000008 _localeconv_r
0800c67c g     O .rodata	00000008 TIM8_CCR1_fields
2000135c g     O .bss	0000006c UartHandle
08015224 g     O .rodata	00000100 CAN_F9R2_fields
08012d44 g     O .rodata	00000008 DAC_DHR12L2_fields
08008a58 g     F .text	00000012 __i2b
08007dd8 g     F .text	00000318 __sfvwrite_r
08004220 g     F .text	00000018 USBD_LL_SOF
20000000 g       .data	00000000 _sdata
08004dc8  w    F .text	00000002 SPI1_IRQHandler
08010eec g     O .rodata	00000028 CAN_TI0R_fields
08004dc8  w    F .text	00000002 CAN_SCE_IRQHandler
080003b8 g     F .text	00000000 .hidden __aeabi_drsub
08015374 g     O .rodata	00000048 ADC1_SMPR2_fields
08011d9c g     O .rodata	00000020 NVIC_IPR4_fields
08001bdc g     F .text	00000034 _sbrk_r
0800b9c4 g     O .rodata	00000020 NVIC_IPR18_fields
0800486c g     F .text	0000009c HAL_PCD_MspInit
08012f9c g     O .rodata	00000010 TIM6_DIER_fields
0800c454 g     O .rodata	00000060 TIM1_CCMR1_Output_fields
08018668 g     O .rodata	000000b0 USART1_ISR_fields
08004dc8  w    F .text	00000002 TIM6_DAC_IRQHandler
0800d1c4 g     O .rodata	00000068 I2C1_CR2_fields
08011194 g     O .rodata	00000008 TIM8_CCR2_fields
08003e44 g     F .text	000000a2 HAL_PCD_EP_SetStall
08001dc4 g     F .text	0000000a _read_r
0800ac4c g     O .rodata	00000048 TIM1_SMCR_fields
08011374 g     O .rodata	00000030 CAN_ESR_fields
08004034 g     F .text	0000002a USBD_Init
08013e74 g     O .rodata	00000080 GPIOB_BRR_fields
200010e0 g     O .bss	00000178 hpcd
08000c0c g     F .text	00000012 .hidden __aeabi_dcmplt
08009624 g     F .text	00000084 _fclose_r
08011d2c g     O .rodata	00000018 ADC1_OFR2_fields
0800bacc g     O .rodata	00000010 TIM2_ARR_fields
20000de4 g     O .bss	00000004 __malloc_max_sbrked_mem
080159bc g     O .rodata	00000100 CAN_F9R1_fields
0800140c g     F .text	00000064 gpioinitLCD
08011adc g     O .rodata	00000038 RTC_DR_fields
0801464c g     O .rodata	00000008 TIM1_CCR1_fields
08002f8c g     F .text	0000002c HAL_SYSTICK_Config
08000680 g     F .text	0000003a .hidden __extendsfdf2
08013434 g     O .rodata	00000008 Flash_OPTKEYR_fields
0800e7ac g     O .rodata	00000018 ADC1_OFR4_fields
200010dc g     O .bss	00000004 USBDDataIn
0800097c g     F .text	000001d0 .hidden __aeabi_ddiv
08004dc8  w    F .text	00000002 TIM8_UP_IRQHandler
20000144 g     O .data	0000001a USBD_StringSerial
0800ec6c g     O .rodata	00000100 CAN_F25R1_fields
08015784 g     O .rodata	00000018 SPI1_I2SPR_fields
08013014 g     O .rodata	00000008 ADC1_JDR1_fields
08013b54 g     O .rodata	00000008 IWDG_KR_fields
08014d9c g     O .rodata	00000050 USB_FS_USB_EP0R_fields
080003c4 g     F .text	00000276 .hidden __adddf3
080111a4 g     O .rodata	00000100 CAN_F23R2_fields
08010f34 g     O .rodata	00000050 CRC_registers
0800da14 g     O .rodata	000000a0 USART1_CR1_fields
0800e2ec g     O .rodata	00000320 RTC_registers
0800ea5c g     O .rodata	00000100 CAN_F5R2_fields
0800d86c g     O .rodata	00000028 TIM17_CR2_fields
08019178 g       .ARM	00000000 __exidx_start
0800d0f4 g     O .rodata	00000018 TIM16_CCMR1_Input_fields
0800be34 g     O .rodata	00000008 Flash_KEYR_fields
08000728 g     F .text	00000254 .hidden __aeabi_dmul
080117bc g     O .rodata	00000060 TIM8_CCMR2_Output_fields
0800c5ac g     O .rodata	00000028 PWR_CSR_fields
080144d4 g     O .rodata	00000010 RTC_ALRMASSR_fields
200000a0 g     O .data	00000043 USBD_CDC_OtherSpeedCfgDesc
08014bb4 g     O .rodata	00000020 SYSCFG_EXTICR4_fields
0800dc0c g     O .rodata	00000008 NVIC_IABR0_fields
08018ff4 g     O .rodata	00000004 _global_impure_ptr
0800dd8c g     O .rodata	00000040 FPU_MVFR0_fields
080136fc g     O .rodata	00000008 TIM16_RCR_fields
08008f1c g     F .text	000003ec _realloc_r
08004dd8 g     F .text	00000050 __libc_init_array
080045fa g     F .text	00000012 USBD_CtlContinueRx
08014aa4 g     O .rodata	00000008 RTC_BKP12R_fields
0800b404 g     O .rodata	00000010 USART1_GTPR_fields
08003230 g     F .text	00000338 HAL_PCD_EP_Open
08004dc8  w    F .text	00000002 DMA2_Channel2_IRQHandler
08000fdc g     F .text	0000026a .hidden __udivdi3
08004dc8  w    F .text	00000002 DMA1_Channel4_IRQHandler
0800c4bc g     O .rodata	00000010 TIM1_OR_fields
0800ab74 g     O .rodata	00000080 GPIOB_PUPDR_fields
0800399e g     F .text	000004a6 HAL_PCD_IRQHandler
0800183c g     F .text	00000020 CmdR
08009758 g     F .text	00000024 _fputwc_r
08019150 g     O .rodata	00000028 __mprec_bigtens
0801566c g     O .rodata	00000008 TIM1_CCR4_fields
0800063c g     F .text	0000001e .hidden __floatunsidf
080103d4 g     O .rodata	00000020 CAN_TDL1R_fields
08008cec g     F .text	00000046 __mcmp
08013cec g     O .rodata	00000020 NVIC_IPR7_fields
0801482c g     O .rodata	00000008 TIM17_DMAR_fields
08012f8c g     O .rodata	00000010 TIM15_CNT_fields
0800d374 g     O .rodata	00000008 RTC_BKP10R_fields
0800dd3c g     O .rodata	00000048 CAN_MSR_fields
08019c34 g     O .parsetable	0000000c lcdinitE
08011984 g     O .rodata	000000d0 RCC_registers
080097ec g     F .text	00000000 _init
0800ea3c g     O .rodata	00000020 CAN_TDL0R_fields
08010ec4 g     O .rodata	00000008 DAC_DHR8R2_fields
08012354 g     O .rodata	00000090 RCC_APB1RSTR_fields
08004d68 g     F .text	00000010 BSP_GYRO_GetXYZ
0800cf0c g     O .rodata	00000008 RTC_BKP0R_fields
08012784 g     O .rodata	00000590 CAN_registers
08019bc8 g       .parsetable	00000000 _parsetable_start
0800e8f4 g     O .rodata	00000060 DMA1_CCR5_fields
0800df3c g     O .rodata	00000008 RTC_BKP8R_fields
0800d5ac g     O .rodata	00000110 TSC_registers
08010c0c g     O .rodata	00000030 TIM2_CCMR2_Input_fields
08004a0c g     F .text	0000000e USBD_LL_StallEP
0800c114 g     O .rodata	00000008 NVIC_ICER1_fields
08014834 g     O .rodata	00000028 TIM16_EGR_fields
08019c58 g     O .parsetable	0000000c CmdRE
08012e8c g     O .rodata	00000100 CAN_F8R1_fields
08004dc8  w    F .text	00000002 USART3_IRQHandler
080102bc g     O .rodata	00000100 CAN_F21R1_fields
0800dbbc g     O .rodata	00000050 RCC_CSR_fields
08004ad0 g     F .text	00000040 USBD_VCP_SerialStrDescriptor
0801078c g     O .rodata	00000080 GPIOA_OTYPER_fields
0801598c g     O .rodata	00000010 DAC_DHR12LD_fields
0800cb04 g     O .rodata	00000030 TIM16_SR_fields
080123e4 g     O .rodata	000001a0 TIM1_registers
08007b60 g     F .text	0000002c __libc_fini_array
0801504c g     O .rodata	00000038 ADC1_JSQR_fields
20001c04 g       .bss	00000000 _ebss
080013dc g     F .text	00000030 CmdTest
08010c54 g     O .rodata	00000050 FPU_CPACR_fields
08004dc8  w    F .text	00000002 DMA1_Channel7_IRQHandler
080110cc g     O .rodata	00000020 CAN_TDL2R_fields
0800c224 g     O .rodata	00000040 GPIOA_AFRL_fields
08004d78  w    F .text	00000038 Reset_Handler
20000018 g     O .data	00000043 USBD_CDC_CfgFSDesc
080188e0 g     O .rodata	00000008 RTC_BKP29R_fields
0800bff4 g     O .rodata	00000020 NVIC_IPR0_fields
080104ac g     O .rodata	00000080 GPIOA_ODR_fields
080089bc g     F .text	00000040 __hi0bits
0800e1d4 g     O .rodata	00000020 NVIC_IPR15_fields
0800c4b4 g     O .rodata	00000008 TIM1_CCR2_fields
0800d8bc g     O .rodata	000000d0 EXTI_RTSR1_fields
0800e8ec g     O .rodata	00000008 DAC_DOR2_fields
080103f4 g     O .rodata	00000008 CRC_DR_fields
08000c5c g     F .text	0000004e .hidden __fixdfsi
0800c03c g     O .rodata	00000080 GPIOB_OSPEEDR_fields
08019c40 g     O .parsetable	0000000c CmdLEDE
08004dc8  w    F .text	00000002 UART5_IRQHandler
08002158 g     F .text	00000050 DecodePeripheral
08014804 g     O .rodata	00000020 SYSCFG_EXTICR1_fields
0800d384 g     O .rodata	00000100 CAN_F11R2_fields
08004dc8  w    F .text	00000002 ADC3_IRQHandler
08010234 g     O .rodata	00000038 RTC_TSTR_fields
0801132c g     O .rodata	00000048 TIM2_CR1_fields
08002e94 g     F .text	00000024 HAL_Init
0800febc g     O .rodata	00000100 CAN_F1R2_fields
08008ec4 g     F .text	00000058 _putc_r
080045da g     F .text	00000020 USBD_CtlPrepareRx
0800fa8c g     O .rodata	00000008 RTC_BKP17R_fields
08012584 g     O .rodata	00000020 CAN_RDL1R_fields
080135fc g     O .rodata	00000100 CAN_F23R1_fields
08004dc8  w    F .text	00000002 TIM4_IRQHandler
0800e7e4 g     O .rodata	00000100 CAN_F18R1_fields
08015674 g     O .rodata	000000d0 USB_FS_registers
080003c4 g     F .text	00000276 .hidden __aeabi_dadd
0801594c g     O .rodata	00000008 TIM8_CCR3_fields
08000b54 g     F .text	00000082 .hidden __ledf2
0801343c g     O .rodata	00000100 CAN_F13R2_fields
08009e2d g     O .rodata	00000008 LEDs
08011a54 g     O .rodata	00000030 TIM2_CCMR1_Input_fields
08018cf0 g     O .rodata	00000008 DAC_DHR12R1_fields
08015bbc g     O .rodata	00000028 I2C1_OAR1_fields
08004a84 g     F .text	00000008 USBD_static_malloc
0800c124 g     O .rodata	00000020 CAN_RF0R_fields
08004dc8  w    F .text	00000002 CAN_RX1_IRQHandler
08004dc8  w    F .text	00000002 DMA2_Channel1_IRQHandler
0800c11c g     O .rodata	00000008 RTC_BKP7R_fields
08008ba0 g     F .text	000000a0 __pow5mult
0801080c g     O .rodata	00000010 ADC1_TR1_fields
0801556c g     O .rodata	00000008 DMA1_CNDTR7_fields
080006bc g     F .text	0000006a .hidden __aeabi_ul2d
08004816 g     F .text	0000002e USBD_CDC_TransmitPacket
08019c4c g     O .parsetable	0000000c monitorE
0800e8e4 g     O .rodata	00000008 TSC_IOG5CR_fields
0800f19c g     O .rodata	00000008 DAC_DHR12R2_fields
08010ed4 g     O .rodata	00000008 RTC_BKP18R_fields
080001e4 g     F .text	00000016 mytest
0800d37c g     O .rodata	00000008 DMA1_CMAR6_fields
0800f16c g     O .rodata	00000030 TIM15_CCMR1_Input_fields
08001320 g     F .text	0000002c CmdButton
00000000  w      *UND*	00000000 __deregister_frame_info
08004622 g     F .text	00000016 USBD_CtlReceiveStatus
0800e71c g     O .rodata	00000010 TIM2_CCR4_fields
20001c04 g       ._user_heap_stack	00000000 end
20000160 g     O .data	00000008 LineCoding
0800ddcc g     O .rodata	00000070 SPI1_CR1_fields
08004dc8  w    F .text	00000002 I2C1_EV_IRQHandler
080126f4 g     O .rodata	00000090 SPI1_registers
080049ea g     F .text	00000014 USBD_LL_OpenEP
08011d44 g     O .rodata	00000010 TIM8_DCR_fields
080021f0 g     F .text	00000058 DecodePrintRegisters
080106ac g     O .rodata	00000068 USB_FS_USB_CNTR_fields
0800ed8c g     O .rodata	000000b0 USART1_registers
0800c4cc g     O .rodata	00000008 USART1_TDR_fields
0801227c g     O .rodata	00000078 RCC_APB1ENR_fields
08015be4 g     O .rodata	00000008 DMA1_CNDTR2_fields
08013a4c g     O .rodata	00000070 CAN_IER_fields
08014e44 g     O .rodata	00000060 DMA1_CCR1_fields
0801521c g     O .rodata	00000008 NVIC_ICER0_fields
080102ac g     O .rodata	00000008 NVIC_ISER1_fields
08004154 g     F .text	00000088 USBD_LL_DataInStage
080188d8 g     O .rodata	00000008 RTC_BKP31R_fields
08010664 g     O .rodata	00000048 TIM1_EGR_fields
0801466c g     O .rodata	00000060 TIM2_CCMR1_Output_fields
0801383c g     O .rodata	00000010 DAC_SR_fields
08011694 g     O .rodata	00000010 TIM2_CCR2_fields
08004960 g     F .text	0000007c USBD_LL_Init
08013c84 g     O .rodata	00000008 RTC_BKP3R_fields
08004c7c g     F .text	0000001c BSP_LED_On
08000c48 g     F .text	00000012 .hidden __aeabi_dcmpgt
08004dc8  w    F .text	00000002 DMA1_Channel6_IRQHandler
08004260 g     F .text	00000016 USBD_CtlError
2000005c g     O .data	00000038 USBD_CDC
0800408c g     F .text	0000000e USBD_ClrClassConfig
08018718 g     O .rodata	00000008 RTC_BKP5R_fields
08004dc8  w    F .text	00000002 UART4_IRQHandler
08004dc8  w    F .text	00000002 DMA2_Channel4_IRQHandler
080047ec g     F .text	0000000e USBD_CDC_RegisterInterface
08007b58 g     F .text	00000002 __sfp_lock_acquire
08008774 g     F .text	00000092 memchr
08007c28 g     F .text	000001b0 _free_r
08004dc8  w    F .text	00000002 TIM3_IRQHandler
08004dc8  w    F .text	00000002 RCC_IRQHandler
0800b2f4 g     O .rodata	00000020 RTC_CALR_fields
0800814c g     F .text	0000000c __locale_mb_cur_max
08000c34 g     F .text	00000012 .hidden __aeabi_dcmpge
0800dd84 g     O .rodata	00000008 DAC_DHR12L1_fields
0800b3d4 g     O .rodata	00000030 TIM17_SR_fields
080105ac g     O .rodata	00000080 GPIOB_OTYPER_fields
08004dc8  w    F .text	00000002 DMA1_Channel1_IRQHandler
080149ac g     O .rodata	00000008 RTC_BKP9R_fields
0801579c g     O .rodata	00000100 CAN_F14R2_fields
080003c0 g     F .text	0000027a .hidden __aeabi_dsub
08004916 g     F .text	00000012 HAL_PCD_DataOutStageCallback
08004dc8 g       .text	00000002 Default_Handler
20000a34 g     O .data	00000004 __malloc_sbrk_base
08004b2c g     F .text	0000001c USBD_VCP_ManufacturerStrDescriptor
08011c9c g     O .rodata	00000088 GPIOA_LCKR_fields
0800ef54 g     O .rodata	00000090 RTC_TAFCR_fields
20000168 g     O .data	00000010 USBD_CDC_fops
0801589c g     O .rodata	000000b0 GPIOA_registers
0800e70c g     O .rodata	00000008 NVIC_ISPR2_fields
08004dc8  w    F .text	00000002 USBWakeUp_RMP_IRQHandler
08012fb4 g     O .rodata	00000060 TIM2_CCMR2_Output_fields
0800c3c4 g     O .rodata	00000088 GPIOB_LCKR_fields
0800be3c g     O .rodata	00000078 TIM8_CR2_fields
0800380c g     F .text	00000010 HAL_PCD_EP_GetRxCount
0800b9ec g     O .rodata	00000030 CAN_BTR_fields
080006bc g     F .text	0000006a .hidden __floatundidf
08001588 g     F .text	000001e8 lcdinit
08018720 g     O .rodata	00000060 DMA1_CCR4_fields
0800c96c g     O .rodata	00000020 NVIC_IPR10_fields
0800efe4 g     O .rodata	00000008 TIM17_ARR_fields
0800ee4c g     O .rodata	00000100 CAN_F12R2_fields
08008c40 g     F .text	000000aa __lshift
0801328c g     O .rodata	00000028 USART1_RQR_fields
0801193c g     O .rodata	00000048 TIM17_DIER_fields
0800adcc g     O .rodata	00000008 RTC_BKP22R_fields
080132b4 g     O .rodata	00000020 CAN_TDH2R_fields
080109c4 g     O .rodata	00000008 TIM1_RCR_fields
08004a1a g     F .text	0000000e USBD_LL_ClearStallEP
08018c58 g     O .rodata	00000020 NVIC_IPR5_fields
0800c82c g     O .rodata	00000058 Flash_OBR_fields
08004dc8  w    F .text	00000002 EXTI15_10_IRQHandler
0800d154 g     O .rodata	00000018 CAN_TDT1R_fields
0801144c g     O .rodata	00000038 RTC_TR_fields
08011ebc g     O .rodata	00000020 NVIC_IPR17_fields
08009520 g     F .text	000000a4 __register_exitproc
0800c754 g     O .rodata	00000058 Flash_CR_fields
0800e254 g     O .rodata	00000058 SPI1_SR_fields
0800defc g     O .rodata	00000040 USB_FS_DADDR_fields
0800e95c g     O .rodata	00000010 EXTI_SWIER2_fields
08003204 g     F .text	0000002c HAL_PCD_SetAddress
08010434 g     O .rodata	00000020 NVIC_IPR19_fields
0800f41c g     O .rodata	00000008 TIM6_SR_fields
0800b41c g     O .rodata	00000100 CAN_F1R1_fields
08013e6c g     O .rodata	00000008 TIM17_PSC_fields
0800b364 g     O .rodata	00000020 SYSCFG_EXTICR2_fields
08008a6c g     F .text	00000134 __multiply
08015d74 g     O .rodata	00000008 SPI1_CRCPR_fields
08002afc g     F .text	000002cc HAL_RCC_ClockConfig
08002ef0 g     F .text	00000024 HAL_NVIC_SetPriorityGrouping
2000000c g     O .data	00000004 Commands
08015324 g     O .rodata	00000010 ADC1_TR2_fields
20000dec g     O .bss	00000028 __malloc_current_mallinfo
08010f2c g     O .rodata	00000008 RTC_TSSSR_fields
08001960 g     F .text	0000012c TaskInput
0800ec64 g     O .rodata	00000008 TIM6_CR2_fields
080135a4 g     O .rodata	00000050 RCC_CR_fields
0801081c g     O .rodata	000000e0 CAN_FM1R_fields
080112a4 g     O .rodata	00000008 TIM1_CCR6_fields
08008e08 g     F .text	000000ba __d2b
08015574 g     O .rodata	00000098 USART1_CR2_fields
0801318c g     O .rodata	00000060 TIM1_BDTR_fields
08005064 g     F .text	00000044 strcasecmp
0800b1cc g     O .rodata	00000008 IWDG_WINR_fields
080108fc g     O .rodata	00000048 ADC1_SMPR1_fields
0800025c g     F .text	00000004 my_Init
0800e2cc g     O .rodata	00000018 I2C1_OAR2_fields
08015094 g     O .rodata	00000100 CAN_F26R1_fields
08001770 g     F .text	000000b0 clearLCD
08005234 g     F .text	00000128 _strtoul_r
0801181c g     O .rodata	00000008 CRC_POL_fields
080188e8 g     O .rodata	00000008 DMA1_CMAR4_fields
08004dc8  w    F .text	00000002 TIM7_IRQHandler
0800495a g     F .text	00000002 HAL_PCD_SuspendCallback
080132dc g     O .rodata	00000008 DMA1_CPAR3_fields
0800f214 g     O .rodata	00000008 RTC_BKP14R_fields
08004698 g     F .text	0000000c USBD_CDC_GetDeviceQualifierDescriptor
08001c10 g     F .text	00000006 _close_r
0800aa6c g     O .rodata	00000008 SPI1_DR_fields
0800be14 g     O .rodata	00000018 RCC_CFGR2_fields
0800065c g     F .text	00000022 .hidden __aeabi_i2d
0800b9b4 g     O .rodata	00000010 TIM15_DCR_fields
0800ba8c g     O .rodata	00000018 Flash_ACR_fields
080189f0 g     O .rodata	00000008 CRC_IDR_fields
0800e714 g     O .rodata	00000008 DMA1_CPAR5_fields
08014c3c g     O .rodata	00000100 CAN_F18R2_fields
0801313c g     O .rodata	00000050 IWDG_registers
080051c0 g     F .text	00000010 strtok
08019c1c g     O .parsetable	0000000c CmdGyroE
080102b4 g     O .rodata	00000008 IWDG_PR_fields
080115cc g     O .rodata	00000020 NVIC_IPR11_fields
080109cc g     O .rodata	00000050 COMP_COMP7_CSR_fields
0800b2d4 g     O .rodata	00000020 CAN_RF1R_fields
08001cfc g     F .text	0000007c TerminalInit
08006818 g     F .text	000000c4 __swsetup_r
0800d8b4 g     O .rodata	00000008 TIM8_ARR_fields
08000d3c  w    F .text	00000002 .hidden __aeabi_ldiv0
08004dc8  w    F .text	00000002 EXTI9_5_IRQHandler
0800097c g     F .text	000001d0 .hidden __divdf3
0800d4a4 g     O .rodata	00000008 ADC1_DR_fields
08004dc8  w    F .text	00000002 RTC_WKUP_IRQHandler
080188c8 g     O .rodata	00000010 USART1_BRR_fields
08014dec g     O .rodata	00000050 TIM15_CCMR1_Output_fields
20000628 g     O .data	00000408 __malloc_av_
08011b8c g     O .rodata	00000088 SYSCFG_CFGR1_fields
08001dce g     F .text	00000010 TerminalReadNonBlock
08000728 g     F .text	00000254 .hidden __muldf3
080159a4 g     O .rodata	00000018 CAN_TDT0R_fields
08001b88 g     F .text	00000054 CmdDump
08009364 g     F .text	00000022 __sread
08010484 g     O .rodata	00000028 TIM16_CCMR1_Output_fields
0801381c g     O .rodata	00000018 WWDG_CFR_fields
08013ffc g     O .rodata	00000370 Peripherals
0801492c g     O .rodata	00000080 GPIOB_ODR_fields
08002ec8  w    F .text	0000000c HAL_GetTick
0801182c g     O .rodata	00000050 USB_FS_USB_EP5R_fields
0800eb64 g     O .rodata	00000100 CAN_F11R1_fields
080088d0 g     F .text	00000002 __malloc_lock
080132d4 g     O .rodata	00000008 NVIC_ISPR0_fields
0800c0bc g     O .rodata	00000058 ADC1_ISR_fields
0800c614 g     O .rodata	00000048 FPU_FPCCR_fields
08015744 g     O .rodata	00000010 TSC_ICR_fields
0800cc84 g     O .rodata	00000008 NVIC_IABR2_fields
08007a24 g     F .text	0000002c _fflush_r
08001dde g     F .text	00000012 TerminalReadAnyNonBlock
08004b10 g     F .text	0000001c USBD_VCP_ProductStrDescriptor
080095c4 g     F .text	0000005e _calloc_r
08015cec g     O .rodata	00000080 GPIOA_PUPDR_fields
08004dc8  w    F .text	00000002 SPI2_IRQHandler
08013cd4 g     O .rodata	00000008 RTC_BKP21R_fields
08018ec9 g     O .rodata	00000012 hUSBDDeviceDesc
0800ada4 g     O .rodata	00000028 RTC_TSDR_fields
08001f80 g     F .text	0000000c USB_LP_CAN_RX0_IRQHandler
080138ac g     O .rodata	00000048 RCC_CFGR3_fields
08004e28 g     F .text	0000009a memset
08004dc8  w    F .text	00000002 MemManage_Handler
08001358 g     F .text	00000074 main
080132e4 g     O .rodata	00000100 TSC_IOSCR_fields
0800a88c g     O .rodata	000001e0 DMA1_registers
08004d44 g     F .text	00000014 BSP_PB_GetState
080115f4 g     O .rodata	00000020 SYSCFG_EXTICR3_fields
20000de0 g     O .bss	00000004 __malloc_max_total_mem
0800e2ac g     O .rodata	00000008 ADC1_JDR3_fields
080115c4 g     O .rodata	00000008 SPI1_TXCRCR_fields
08019bc8 g       *ABS*	00000000 _siccmram
08018a80 g     O .rodata	00000050 COMP_COMP3_CSR_fields
0800f4cc g     O .rodata	00000020 NVIC_IPR9_fields
0800f76c g     O .rodata	00000040 DBGMCU_registers
08013c64 g     O .rodata	00000020 NVIC_IPR16_fields
0800e60c g     O .rodata	00000100 CAN_F2R2_fields
08004dc8  w    F .text	00000002 SVC_Handler
080093e0 g     F .text	00000008 __sclose
08004dc8  w    F .text	00000002 DMA2_Channel5_IRQHandler
0800d014 g     O .rodata	000000e0 DMA1_IFCR_fields
0800bf74 g     O .rodata	00000080 TSC_IOGCSR_fields
08001f10 g     F .text	00000070 TerminalInputBufferWrite
0801597c g     O .rodata	00000008 DMA1_CPAR1_fields
08006a28 g     F .text	00000ea2 _dtoa_r
08008250 g     F .text	00000524 _malloc_r
0801140c g     O .rodata	00000040 GPIOB_AFRL_fields
080097d0 g     F .text	0000001a __ascii_wctomb
0800bbb4 g     O .rodata	00000058 ADC1_IER_fields
080006cc g     F .text	0000005a .hidden __aeabi_l2d
0800c44c g     O .rodata	00000008 DAC_DHR8R1_fields
08012d14 g     O .rodata	00000030 TIM1_CCMR1_Input_fields
0800bd14 g     O .rodata	00000100 TSC_IOASCR_fields
0800d484 g     O .rodata	00000020 NVIC_IPR20_fields
080041dc g     F .text	0000003e USBD_LL_Reset
080125a4 g     O .rodata	00000018 CAN_RDT1R_fields
0800fa0c g     O .rodata	00000080 GPIOA_BRR_fields
08013efc g     O .rodata	00000100 CAN_F20R2_fields
080109b4 g     O .rodata	00000010 TSC_ISR_fields
00000000  w      *UND*	00000000 __libc_fini
08004a78 g     F .text	0000000c USBD_LL_GetRxDataSize
08004dc8  w    F .text	00000002 DMA1_Channel5_IRQHandler
08004dc8  w    F .text	00000002 USB_LP_IRQHandler
200013c8 g     O .bss	00000800 UserRxBuffer
08011584 g     O .rodata	00000040 SPI1_I2SCFGR_fields
08018e78 g     O .rodata	00000004 USBD_LangIDDesc
0800c294 g     O .rodata	00000100 CAN_F15R2_fields
08004dc8  w    F .text	00000002 EXTI4_IRQHandler
080137c4 g     O .rodata	00000050 USB_FS_USB_EP2R_fields
2000017c g     O .data	00000020 LED_PORT
0800b06c g     O .rodata	00000008 TIM8_CCR6_fields
080040f4 g     F .text	00000060 USBD_LL_DataOutStage
0800ef4c g     O .rodata	00000008 RTC_BKP4R_fields
08007b8c g     F .text	0000009c _malloc_trim_r
080147fc g     O .rodata	00000008 TSC_IOG7CR_fields
08013424 g     O .rodata	00000008 RTC_BKP16R_fields
0801062c g     O .rodata	00000028 DBGMCU_CR_fields
08010f14 g     O .rodata	00000018 CAN_RDT0R_fields
0800c884 g     O .rodata	00000008 ADC1_AWD2CR_fields
08015194 g     O .rodata	00000008 DMA1_CMAR5_fields
0800ed6c g     O .rodata	00000020 CAN_RDL0R_fields
08015d7c g     O .rodata	00000008 DMA1_CPAR4_fields
08013abc g     O .rodata	00000080 TIM6_registers
08019c28 g     O .parsetable	0000000c lcdE
080012a4 g     F .text	00000028 CmdAccel
08010c4c g     O .rodata	00000008 RTC_BKP11R_fields
080024c0 g     F .text	00000068 SystemInit
08011d54 g     O .rodata	00000048 TIM16_BDTR_fields
080014ac g     F .text	0000000e delay
08000b5c g     F .text	0000007a .hidden __nedf2
0801071c g     O .rodata	00000070 RTC_ALRMBR_fields
080110bc g     O .rodata	00000010 TIM2_DCR_fields
08018df8 g     O .rodata	00000050 ADC1_CR_fields
080097f8 g     F .text	00000000 _fini
08001820 g     F .text	0000001c CmdW
080031f8 g     F .text	0000000c HAL_PCD_Start
08004dc8  w    F .text	00000002 TIM1_TRG_COM_TIM17_IRQHandler
0800f7ac g     O .rodata	00000020 EXTI_EMR2_fields
0800c034 g     O .rodata	00000008 RTC_WUTR_fields
080135f4 g     O .rodata	00000008 DMA1_CPAR6_fields
08015044 g     O .rodata	00000008 CRC_INIT_fields
0800afdc g     O .rodata	00000088 RTC_ISR_fields
0800bb7c g     O .rodata	00000010 TIM1_DCR_fields
0800b664 g     O .rodata	00000038 PWR_CR_fields
0800dc14 g     O .rodata	00000030 TIM2_EGR_fields
080068f0 g     F .text	0000000c atexit
0801519c g     O .rodata	00000080 OPAMP_OPAMP1_CR_fields
0800c88c g     O .rodata	00000060 FPU_registers
0800bc14 g     O .rodata	00000100 EXTI_IMR1_fields
08001ed8 g     F .text	00000038 _write_r
0800c52c g     O .rodata	00000010 ADC1_SQR4_fields
10000000 g       .ccmram	00000000 _eccmram
0801560c g     O .rodata	00000028 ADC1_SQR3_fields
08004dc8  w    F .text	00000002 DMA1_Channel3_IRQHandler
08015b3c g     O .rodata	00000080 DBGMCU_APB1FZ_fields
080112cc g     O .rodata	00000060 SPI1_CR2_fields
08015654 g     O .rodata	00000010 ADC1_CALFACT_fields
08013e64 g     O .rodata	00000008 RTC_BKP28R_fields
08002e6e  w    F .text	00000024 HAL_InitTick
0800c6d4 g     O .rodata	00000020 TIM1_CCR5_fields
08004a4e g     F .text	0000000e USBD_LL_SetUSBAddress
08014ea4 g     O .rodata	00000020 NVIC_IPR12_fields
08018edc g     O .rodata	00000010 LED_PIN
200005c8 g     O .data	00000004 _impure_ptr
08010b94 g     O .rodata	00000018 CAN_TDT2R_fields
0801342c g     O .rodata	00000008 ADC1_JDR4_fields
080133e4 g     O .rodata	00000040 TIM15_CR2_fields
080078d0 g     F .text	00000154 __sflush_r
0800b604 g     O .rodata	00000060 RCC_CFGR_fields
08002eb8  w    F .text	00000010 HAL_IncTick
0800bf4c g     O .rodata	00000028 TIM17_EGR_fields
080049fe g     F .text	0000000e USBD_LL_CloseEP
08004dc8  w    F .text	00000002 ADC4_IRQHandler
080131ec g     O .rodata	000000a0 RTC_CR_fields
08019be0 g     O .parsetable	0000000c clearLCDE
080045c8 g     F .text	00000012 USBD_CtlContinueSendData
080149b4 g     O .rodata	000000e0 DMA1_ISR_fields
0800cb34 g     O .rodata	00000100 CAN_F6R1_fields
08004dc8  w    F .text	00000002 WWDG_IRQHandler
0800ae3c g     O .rodata	00000100 EXTI_EMR1_fields
0800f14c g     O .rodata	00000020 NVIC_IPR6_fields
08015d84 g     O .rodata	00000010 TIM2_CCR3_fields
0801384c g     O .rodata	00000060 DMA1_CCR6_fields
0801052c g     O .rodata	00000080 GPIOA_MODER_fields
080138fc g     O .rodata	00000080 OPAMP_OPAMP2_CR_fields
08011b14 g     O .rodata	00000078 TIM1_CR2_fields
0800e144 g     O .rodata	00000010 RTC_PRER_fields
08004a5c g     F .text	0000000e USBD_LL_Transmit
08004dc8  w    F .text	00000002 TIM2_IRQHandler
08000210 g     F .text	0000004a my_Loop
08015014 g     O .rodata	00000020 TIM16_CCER_fields
0800315e g     F .text	0000009a HAL_PCD_Init
200000e4 g     O .data	00000043 USBD_CDC_CfgHSDesc
08019c04 g     O .parsetable	0000000c CmdDecodeE
0800d274 g     O .rodata	00000100 CAN_F26R2_fields
080116a4 g     O .rodata	00000100 CAN_F6R2_fields
20000000 g       .data	00000000 myTickCount
0800d4ac g     O .rodata	00000100 CAN_F16R1_fields
0800b064 g     O .rodata	00000008 RTC_BKP27R_fields
08010c3c g     O .rodata	00000010 EXTI_RTSR2_fields
0801575c g     O .rodata	00000028 TIM16_CR2_fields
0800c994 g     O .rodata	00000070 RTC_ALRMAR_fields
08013b4c g     O .rodata	00000008 TIM1_ARR_fields
08004572 g     F .text	0000003a USBD_GetString
08004cb4 g     F .text	0000001c BSP_LED_Toggle
0800cd0c g     O .rodata	00000100 CAN_F22R2_fields
0800aca4 g     O .rodata	00000100 CAN_F24R1_fields
08004908 g     F .text	0000000e HAL_PCD_SetupStageCallback
080188f0 g     O .rodata	00000100 CAN_F5R1_fields
08004dc8  w    F .text	00000002 COMP7_IRQHandler
20008000 g       *ABS*	00000000 _estack
0800185c g     F .text	00000104 parse
08012274 g     O .rodata	00000008 RTC_BKP2R_fields
08004dc8  w    F .text	00000002 COMP1_2_3_IRQHandler
08011484 g     O .rodata	00000100 CAN_F17R1_fields
08004dc8  w    F .text	00000002 EXTI1_IRQHandler
0800c6f4 g     O .rodata	00000060 TIM8_BDTR_fields
08000bf8 g     F .text	00000012 .hidden __aeabi_dcmpeq
08011a84 g     O .rodata	00000050 USB_FS_USB_EP1R_fields
0800aa74 g     O .rodata	000000b0 ADC1_2_CSR_fields
08011934 g     O .rodata	00000008 FPU_FPCAR_fields
20000a3c g       .data	00000000 _edata
0800ffbc g     O .rodata	000001a0 TIM8_registers
0800e2bc g     O .rodata	00000008 RTC_BKP30R_fields
080117a4 g     O .rodata	00000018 TIM17_CCMR1_Input_fields
10000000 g       .ccmram	00000000 _sccmram
08010f84 g     O .rodata	00000038 TIM16_CR1_fields
08018b10 g     O .rodata	00000100 CAN_F17R2_fields
0800cc4c g     O .rodata	00000038 TIM15_CR1_fields
080096a8 g     F .text	000000b0 __fputwc
08002248 g     F .text	00000278 CmdDecode
08010bac g     O .rodata	00000008 TIM15_RCR_fields
0800e72c g     O .rodata	00000080 GPIOB_IDR_fields
0800abfc g     O .rodata	00000050 TIM1_CCMR3_Output_fields
08010714 g     O .rodata	00000008 TIM8_DMAR_fields
0800badc g     O .rodata	00000080 Flash_registers
0800f91c g     O .rodata	00000010 TIM16_DCR_fields
08018888 g     O .rodata	00000040 RCC_APB2RSTR_fields
08001a8c g     F .text	00000028 fetch_uint32_arg
08013b3c g     O .rodata	00000010 RTC_ALRMBSSR_fields
08013984 g     O .rodata	00000040 SYSCFG_RCR_fields
08004dc8  w    F .text	00000002 USART2_IRQHandler
0801533c g     O .rodata	00000038 TIM17_CR1_fields
08011f0c g     O .rodata	00000260 NVIC_registers
08004dc8  w    F .text	00000002 COMP4_5_6_IRQHandler
08009388 g     F .text	00000038 __swrite
08002528 g     F .text	000005d4 HAL_RCC_OscConfig
20000a30 g     O .data	00000004 __malloc_trim_threshold
08010b44 g     O .rodata	00000008 TIM17_CCR1_fields
0800d9ec g     O .rodata	00000028 I2C1_TIMINGR_fields
08013ef4 g     O .rodata	00000008 USB_FS_BTABLE_fields
0800f4ac g     O .rodata	00000020 CAN_TDH1R_fields
080110ec g     O .rodata	000000a8 I2C1_CR1_fields
08000000 g     O .isr_vector	00000000 g_pfnVectors
080045ac g     F .text	0000001c USBD_CtlSendData
080143d4 g     O .rodata	00000100 CAN_F15R1_fields
08013704 g     O .rodata	00000010 ADC1_2_CDR_fields
080080f0 g     F .text	00000052 _fwalk_reent
08008d34 g     F .text	000000d2 __mdiff
08015334 g     O .rodata	00000008 TIM6_PSC_fields
08000c5c g     F .text	0000004e .hidden __aeabi_d2iz
08012fac g     O .rodata	00000008 RTC_BKP15R_fields
0800d894 g     O .rodata	00000020 PWR_registers
080143b4 g     O .rodata	00000020 Flash_SR_fields
0801599c g     O .rodata	00000008 ADC1_JDR2_fields
080103cc g     O .rodata	00000008 RTC_BKP20R_fields
2000019c g     O .data	00000004 __ctype_ptr__
0800e954 g     O .rodata	00000008 DMA1_CNDTR6_fields
0800b1d4 g     O .rodata	00000100 CAN_F19R2_fields
08004dc8  w    F .text	00000002 I2C2_ER_IRQHandler
0800f92c g     O .rodata	00000040 ADC1_2_CCR_fields
08004dc8  w    F .text	00000002 DMA1_Channel2_IRQHandler
0800b0ec g     O .rodata	000000e0 DAC_registers
08015abc g     O .rodata	00000080 GPIOA_OSPEEDR_fields
08018858 g     O .rodata	00000030 TIM8_CCMR2_Input_fields
08007b5c g     F .text	00000002 __sfp_lock_release
0800b074 g     O .rodata	00000048 TIM17_BDTR_fields
08011eec g     O .rodata	00000020 CAN_RDH1R_fields
080113a4 g     O .rodata	00000060 TIM2_CCER_fields
08015034 g     O .rodata	00000010 DAC_DHR8RD_fields
08001ab4 g     F .text	00000020 fetch_string_arg
08004c14 g     F .text	00000068 BSP_LED_Init
0800fb94 g     O .rodata	00000080 GPIOB_MODER_fields
08019bf8 g     O .parsetable	0000000c CmdDumpE
08018e68 g     O .rodata	00000010 PLLMULFactorTable
0800dc44 g     O .rodata	00000098 USART1_CR3_fields
080020b0 g     F .text	0000004c DecodeField
08014bf4 g     O .rodata	00000020 CAN_RI0R_fields
08004dc8  w    F .text	00000002 TIM8_BRK_IRQHandler
0800c65c g     O .rodata	00000020 DBGMCU_APB2FZ_fields
0800be2c g     O .rodata	00000008 TIM1_PSC_fields
080021a8 g     F .text	00000048 DecodePrintPeripherals
0800f96c g     O .rodata	00000038 TIM15_CCER_fields
08018eec g     O .rodata	00000101 _ctype_
08011c14 g     O .rodata	00000008 DMA1_CMAR7_fields
08000d3c  w    F .text	00000002 .hidden __aeabi_idiv0
0800e7c4 g     O .rodata	00000020 CAN_RI1R_fields
0801542c g     O .rodata	00000028 SYSCFG_CFGR2_fields
0800f424 g     O .rodata	00000088 RCC_CIR_fields
08019c64 g     O .parsetable	0000000c CmdStatsE
08004dc8  w    F .text	00000002 FLASH_IRQHandler
0800f764 g     O .rodata	00000008 TIM15_DMAR_fields
08015454 g     O .rodata	00000010 EXTI_FTSR2_fields
0800f814 g     O .rodata	00000100 CAN_F10R2_fields
0800d9cc g     O .rodata	00000020 NVIC_IPR3_fields
0801564c g     O .rodata	00000008 DMA1_CNDTR1_fields
0800c39c g     O .rodata	00000028 I2C1_TIMEOUTR_fields
0800ba1c g     O .rodata	00000048 TIM15_BDTR_fields
08004a9c g     F .text	0000000c USBD_VCP_LangIDStrDescriptor
20001258 g     O .bss	00000100 USBD_StrDesc
08001df0 g     F .text	000000e8 TerminalOutputBufferWrite
08004dc8  w    F .text	00000002 BusFault_Handler
08004dc8  w    F .text	00000002 USART1_IRQHandler
0800f9a4 g     O .rodata	00000050 COMP_COMP1_CSR_fields
08018c10 g     O .rodata	00000048 TIM8_EGR_fields
08008160 g     F .text	000000e0 __smakebuf_r
0801026c g     O .rodata	00000040 TIM15_SR_fields
08005164 g     F .text	0000005c strlen
0800d98c g     O .rodata	00000040 RCC_APB2ENR_fields
08004dc8  w    F .text	00000002 SPI3_IRQHandler
08000be8 g     F .text	00000010 .hidden __aeabi_cdcmpeq
08000b4c g     F .text	0000008a .hidden __gedf2
20001bc8 g     O .bss	0000003c TimHandle
0801187c g     O .rodata	00000060 DMA1_CCR3_fields
0800d22c g     O .rodata	00000048 TIM1_CR1_fields
08014654 g     O .rodata	00000018 IWDG_SR_fields
080153bc g     O .rodata	00000050 USB_FS_USB_EP6R_fields
080125bc g     O .rodata	00000110 TIM16_registers
08004032  w    F .text	00000002 HAL_PCDEx_SetConnectionState
0800f664 g     O .rodata	00000100 TIM17_registers
0800e09c g     O .rodata	00000098 TIM1_CCER_fields
20000a38 g     O .data	00000004 __wctomb
08010ca4 g     O .rodata	00000100 CAN_F3R2_fields
08000cdc g     F .text	0000002e .hidden __gnu_ldivmod_helper
0800c8ec g     O .rodata	00000080 DAC_CR_fields
08004dc8  w    F .text	00000002 I2C1_ER_IRQHandler
08009460 g     F .text	00000018 __sprint_r
0800c4dc g     O .rodata	00000050 USB_FS_USB_EP7R_fields
0800fe34 g     O .rodata	00000088 I2C1_ISR_fields
0800add4 g     O .rodata	00000060 TIM1_CCMR2_Output_fields
0800c014 g     O .rodata	00000020 NVIC_IPR8_fields
08018e58 g     O .rodata	00000010 PredivFactorTable
08015464 g     O .rodata	00000008 TSC_IOG3CR_fields
08000680 g     F .text	0000003a .hidden __aeabi_f2d
08004a6a g     F .text	0000000e USBD_LL_PrepareReceive
0800e2e4 g     O .rodata	00000008 DMA1_CNDTR3_fields
0800b7ac g     O .rodata	00000100 CAN_F27R1_fields
08010654 g     O .rodata	00000010 TSC_IER_fields
0800f584 g     O .rodata	000000e0 CAN_FFA1R_fields
0800e134 g     O .rodata	00000010 TIM8_CNT_fields
0800f914 g     O .rodata	00000008 ADC1_AWD3CR_fields
00000000  w      *UND*	00000000 _Jv_RegisterClasses
08015634 g     O .rodata	00000008 RTC_BKP25R_fields
08010a3c g     O .rodata	00000100 TSC_IOCCR_fields
08011614 g     O .rodata	00000080 OPAMP_OPAMP3_CR_fields
0800480a g     F .text	0000000c USBD_CDC_SetRxBuffer
08018788 g     O .rodata	000000d0 EXTI_SWIER1_fields
080003c0 g     F .text	0000027a .hidden __subdf3
0800afd4 g     O .rodata	00000008 TIM16_ARR_fields
080103bc g     O .rodata	00000010 DBGMCU_IDCODE_fields
08005378 g     F .text	00001424 _vfprintf_r
080089fc g     F .text	0000005a __lo0bits
080122f4 g     O .rodata	00000020 EXTI_IMR2_fields
080138f4 g     O .rodata	00000008 TIM6_EGR_fields
08011c64 g     O .rodata	00000008 SPI1_RXCRCR_fields
08018a78 g     O .rodata	00000008 I2C1_PECR_fields
08003718 g     F .text	000000f4 HAL_PCD_EP_Receive
08018650 g     O .rodata	00000018 ADC1_OFR3_fields
0800d16c g     O .rodata	00000058 COMP_COMP6_CSR_fields
08010ecc g     O .rodata	00000008 RTC_BKP1R_fields
08013544 g     O .rodata	00000060 TIM8_CCMR1_Output_fields
0801306c g     O .rodata	000000b0 GPIOB_registers
080020fc g     F .text	0000005c DecodeRegister
0800f7cc g     O .rodata	00000048 TIM8_SMCR_fields
08002004 g     F .text	00000058 DecodeReadRegister
00000000  w      *UND*	00000000 __register_frame_info
0800b384 g     O .rodata	00000050 CAN_MCR_fields
0800b414 g     O .rodata	00000008 DAC_DOR1_fields
08001d78 g     F .text	0000004c TerminalRead
0800e1f4 g     O .rodata	00000060 TSC_CR_fields
0800c394 g     O .rodata	00000008 TIM2_DMAR_fields
08001470 g     F .text	00000024 monitor
0800b0bc g     O .rodata	00000030 TIM8_CCMR1_Input_fields
0800b8b4 g     O .rodata	00000100 CAN_F12R1_fields
08004dc8  w    F .text	00000002 USBWakeUp_IRQHandler
080189f8 g     O .rodata	00000008 TIM16_PSC_fields
0800dab4 g     O .rodata	00000008 USART1_RDR_fields
08011c2c g     O .rodata	00000038 RCC_BDCR_fields
08013cdc g     O .rodata	00000010 TIM17_DCR_fields
08015d6c g     O .rodata	00000008 NVIC_ISPR1_fields
0800bc0c g     O .rodata	00000008 NVIC_ICPR2_fields
08019bc8 g     O .parsetable	0000000c CmdAccelE
0801546c g     O .rodata	00000100 CAN_F21R2_fields
080047fa g     F .text	00000010 USBD_CDC_SetTxBuffer
0800c53c g     O .rodata	00000070 SYSCFG_registers
0800fc14 g     O .rodata	00000080 OPAMP_OPAMP4_CR_fields
08004dc8  w    F .text	00000002 DMA2_Channel3_IRQHandler
0801015c g     O .rodata	000000d0 EXTI_FTSR1_fields
08004b64 g     F .text	0000001c USBD_VCP_InterfaceStrDescriptor
0800fa94 g     O .rodata	00000100 CAN_F7R1_fields
08008938 g     F .text	00000082 __multadd
0800409a g     F .text	0000005a USBD_LL_SetupStage
20000e14 g     O .bss	00000004 value
08008924 g     F .text	00000012 _Bfree
0800134c g     F .text	0000000a Error_Handler
0801463c g     O .rodata	00000010 WWDG_CR_fields
08004dc8  w    F .text	00000002 EXTI2_TSC_IRQHandler
0800c4d4 g     O .rodata	00000008 NVIC_STIR_fields
08004dc8  w    F .text	00000002 TIM1_BRK_TIM15_IRQHandler
0801301c g     O .rodata	00000050 TIM8_CCMR3_Output_fields



Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000a3c 	.word	0x20000a3c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080097ec 	.word	0x080097ec

080001ac <frame_dummy>:
 80001ac:	4b08      	ldr	r3, [pc, #32]	; (80001d0 <frame_dummy+0x24>)
 80001ae:	b510      	push	{r4, lr}
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4808      	ldr	r0, [pc, #32]	; (80001d4 <frame_dummy+0x28>)
 80001b4:	4908      	ldr	r1, [pc, #32]	; (80001d8 <frame_dummy+0x2c>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4808      	ldr	r0, [pc, #32]	; (80001dc <frame_dummy+0x30>)
 80001bc:	6803      	ldr	r3, [r0, #0]
 80001be:	b903      	cbnz	r3, 80001c2 <frame_dummy+0x16>
 80001c0:	bd10      	pop	{r4, pc}
 80001c2:	4b07      	ldr	r3, [pc, #28]	; (80001e0 <frame_dummy+0x34>)
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d0fb      	beq.n	80001c0 <frame_dummy+0x14>
 80001c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80001cc:	4718      	bx	r3
 80001ce:	bf00      	nop
 80001d0:	00000000 	.word	0x00000000
 80001d4:	080097ec 	.word	0x080097ec
 80001d8:	20000a40 	.word	0x20000a40
 80001dc:	20000a3c 	.word	0x20000a3c
 80001e0:	00000000 	.word	0x00000000

080001e4 <mytest>:
    .type   mytest, %function   @@ - symbol type (not req)
@@ Declaration : int mytest(int x)
@@ Uses r0 for param 0
@@   r0: x
mytest:
    push {lr}
 80001e4:	b500      	push	{lr}
    push {r1}
 80001e6:	b402      	push	{r1}
    push {r0-r7}
 80001e8:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
    ldr  r0, =0
 80001ea:	481d      	ldr	r0, [pc, #116]	; (8000260 <my_Init+0x4>)
    bl   BSP_LED_Toggle           @@ call BSP function
 80001ec:	f004 fd62 	bl	8004cb4 <BSP_LED_Toggle>
    pop  {r0-r7}
 80001f0:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    ldr  r1, =myTickCount
 80001f2:	491c      	ldr	r1, [pc, #112]	; (8000264 <my_Init+0x8>)
    ldr  r0, [r1]
 80001f4:	6808      	ldr	r0, [r1, #0]
    pop  {r1} 
 80001f6:	bc02      	pop	{r1}
    pop  {pc}
 80001f8:	bd00      	pop	{pc}
 80001fa:	bf00      	nop

080001fc <my_Tick>:
    .thumb_func             @@ /
    .type   my_Tick, %function   @@ - symbol type (not req)
@@ Declaration : void my_Tick( void )
@@ Uses nothing
my_Tick:
    push {lr}
 80001fc:	b500      	push	{lr}
    push {r0-r1}
 80001fe:	b403      	push	{r0, r1}

    ldr  r1, =myTickCount
 8000200:	4918      	ldr	r1, [pc, #96]	; (8000264 <my_Init+0x8>)
    ldr  r0, [r1]
 8000202:	6808      	ldr	r0, [r1, #0]
    add  r0, r0, #1
 8000204:	f100 0001 	add.w	r0, r0, #1
    str  r0, [r1]
 8000208:	6008      	str	r0, [r1, #0]
    pop {r0-r1}
 800020a:	bc03      	pop	{r0, r1}
    pop  {pc}
 800020c:	bd00      	pop	{pc}
 800020e:	bf00      	nop

08000210 <my_Loop>:
    .thumb_func             @@ /
    .type   my_Loop, %function   @@ - symbol type (not req)
@@ Declaration : void my_Loop( void )
@@ Uses nothing
my_Loop:
    push {lr}
 8000210:	b500      	push	{lr}
    push {r0-r1}
 8000212:	b403      	push	{r0, r1}
    ldr r1, =myTickCount            @@ - load the address of myTickCount in r1
 8000214:	4913      	ldr	r1, [pc, #76]	; (8000264 <my_Init+0x8>)
    ldr r0, [r1]                    @@ - load the value of r1 in r0
 8000216:	6808      	ldr	r0, [r1, #0]
    cmp r0, #1000                   @@ - Compare the value of r0 with 1000
 8000218:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
    bge HERE                        @@ - if branch is greater than or equals to 1000 jump to a label named HERE
 800021c:	da01      	bge.n	8000222 <HERE>
    pop {r0-r1}
 800021e:	bc03      	pop	{r0, r1}
    pop {pc}                        @@ - Cause the function to return
 8000220:	bd00      	pop	{pc}

08000222 <HERE>:
HERE: 
    ldr r5,=myTickCount             @@ - load the address of myTickCount in r5
 8000222:	4d10      	ldr	r5, [pc, #64]	; (8000264 <my_Init+0x8>)
    mov r6,#0                       @@ - set r6 value to zero
 8000224:	f04f 0600 	mov.w	r6, #0
    str r6,[r5]                     @@ - store the value of r6 in the address pointed by r5(reset the myTickCount to zero)
 8000228:	602e      	str	r6, [r5, #0]

    ldr r0, =0                      @@ - passing the parameter in the function BSP_LED_Toggle (r0 = 0)
 800022a:	480d      	ldr	r0, [pc, #52]	; (8000260 <my_Init+0x4>)
    bl   BSP_LED_Toggle             @@ - Call BSP function
 800022c:	f004 fd42 	bl	8004cb4 <BSP_LED_Toggle>
    ldr r0, =1                      @@ - passing the parameter in the function BSP_LED_Toggle (r0 = 1)
 8000230:	480d      	ldr	r0, [pc, #52]	; (8000268 <my_Init+0xc>)
    bl   BSP_LED_Toggle             @@ - Call BSP function
 8000232:	f004 fd3f 	bl	8004cb4 <BSP_LED_Toggle>
    ldr r0, =2                      @@ - passing the parameter in the function BSP_LED_Toggle (r0 = 2)
 8000236:	480d      	ldr	r0, [pc, #52]	; (800026c <my_Init+0x10>)
    bl   BSP_LED_Toggle             @@ - Call BSP function
 8000238:	f004 fd3c 	bl	8004cb4 <BSP_LED_Toggle>
    ldr r0, =3                      @@ - passing the parameter in the function BSP_LED_Toggle (r0 = 3)
 800023c:	480c      	ldr	r0, [pc, #48]	; (8000270 <my_Init+0x14>)
    bl   BSP_LED_Toggle             @@ - Call BSP function
 800023e:	f004 fd39 	bl	8004cb4 <BSP_LED_Toggle>
    ldr r0, =4                      @@ - passing the parameter in the function BSP_LED_Toggle (r0 = 4)
 8000242:	480c      	ldr	r0, [pc, #48]	; (8000274 <my_Init+0x18>)
    bl   BSP_LED_Toggle             @@ - Call BSP function
 8000244:	f004 fd36 	bl	8004cb4 <BSP_LED_Toggle>
    ldr r0, =5                      @@ - passing the parameter in the function BSP_LED_Toggle (r0 = 5)
 8000248:	480b      	ldr	r0, [pc, #44]	; (8000278 <my_Init+0x1c>)
    bl   BSP_LED_Toggle             @@ - Call BSP function
 800024a:	f004 fd33 	bl	8004cb4 <BSP_LED_Toggle>
    ldr r0, =6                      @@ - passing the parameter in the function BSP_LED_Toggle (r0 = 6)
 800024e:	480b      	ldr	r0, [pc, #44]	; (800027c <my_Init+0x20>)
    bl   BSP_LED_Toggle             @@ - Call BSP function
 8000250:	f004 fd30 	bl	8004cb4 <BSP_LED_Toggle>
    ldr r0, =7                      @@ - passing the parameter in the function BSP_LED_Toggle (r0 = 7)
 8000254:	480a      	ldr	r0, [pc, #40]	; (8000280 <my_Init+0x24>)
    bl   BSP_LED_Toggle             @@ - Call BSP function
 8000256:	f004 fd2d 	bl	8004cb4 <BSP_LED_Toggle>
 800025a:	bf00      	nop

0800025c <my_Init>:
    .thumb_func             @@ /
    .type   my_Init, %function   @@ - symbol type (not req)
@@ Declaration : void my_Init( void )
@@ Uses nothing
my_Init:
    push {lr}
 800025c:	b500      	push	{lr}
    pop  {pc}
 800025e:	bd00      	pop	{pc}
@@   r0: x
mytest:
    push {lr}
    push {r1}
    push {r0-r7}
    ldr  r0, =0
 8000260:	00000000 	.word	0x00000000
    bl   BSP_LED_Toggle           @@ call BSP function
    pop  {r0-r7}
    ldr  r1, =myTickCount
 8000264:	20000000 	.word	0x20000000
    mov r6,#0                       @@ - set r6 value to zero
    str r6,[r5]                     @@ - store the value of r6 in the address pointed by r5(reset the myTickCount to zero)

    ldr r0, =0                      @@ - passing the parameter in the function BSP_LED_Toggle (r0 = 0)
    bl   BSP_LED_Toggle             @@ - Call BSP function
    ldr r0, =1                      @@ - passing the parameter in the function BSP_LED_Toggle (r0 = 1)
 8000268:	00000001 	.word	0x00000001
    bl   BSP_LED_Toggle             @@ - Call BSP function
    ldr r0, =2                      @@ - passing the parameter in the function BSP_LED_Toggle (r0 = 2)
 800026c:	00000002 	.word	0x00000002
    bl   BSP_LED_Toggle             @@ - Call BSP function
    ldr r0, =3                      @@ - passing the parameter in the function BSP_LED_Toggle (r0 = 3)
 8000270:	00000003 	.word	0x00000003
    bl   BSP_LED_Toggle             @@ - Call BSP function
    ldr r0, =4                      @@ - passing the parameter in the function BSP_LED_Toggle (r0 = 4)
 8000274:	00000004 	.word	0x00000004
    bl   BSP_LED_Toggle             @@ - Call BSP function
    ldr r0, =5                      @@ - passing the parameter in the function BSP_LED_Toggle (r0 = 5)
 8000278:	00000005 	.word	0x00000005
    bl   BSP_LED_Toggle             @@ - Call BSP function
    ldr r0, =6                      @@ - passing the parameter in the function BSP_LED_Toggle (r0 = 6)
 800027c:	00000006 	.word	0x00000006
    bl   BSP_LED_Toggle             @@ - Call BSP function
    ldr r0, =7                      @@ - passing the parameter in the function BSP_LED_Toggle (r0 = 7)
 8000280:	00000007 	.word	0x00000007

08000284 <memcpy>:
 8000284:	4684      	mov	ip, r0
 8000286:	ea41 0300 	orr.w	r3, r1, r0
 800028a:	f013 0303 	ands.w	r3, r3, #3
 800028e:	d16d      	bne.n	800036c <memcpy+0xe8>
 8000290:	3a40      	subs	r2, #64	; 0x40
 8000292:	d341      	bcc.n	8000318 <memcpy+0x94>
 8000294:	f851 3b04 	ldr.w	r3, [r1], #4
 8000298:	f840 3b04 	str.w	r3, [r0], #4
 800029c:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a0:	f840 3b04 	str.w	r3, [r0], #4
 80002a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a8:	f840 3b04 	str.w	r3, [r0], #4
 80002ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80002b0:	f840 3b04 	str.w	r3, [r0], #4
 80002b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002b8:	f840 3b04 	str.w	r3, [r0], #4
 80002bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80002c0:	f840 3b04 	str.w	r3, [r0], #4
 80002c4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002c8:	f840 3b04 	str.w	r3, [r0], #4
 80002cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80002d0:	f840 3b04 	str.w	r3, [r0], #4
 80002d4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002d8:	f840 3b04 	str.w	r3, [r0], #4
 80002dc:	f851 3b04 	ldr.w	r3, [r1], #4
 80002e0:	f840 3b04 	str.w	r3, [r0], #4
 80002e4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002e8:	f840 3b04 	str.w	r3, [r0], #4
 80002ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80002f0:	f840 3b04 	str.w	r3, [r0], #4
 80002f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002f8:	f840 3b04 	str.w	r3, [r0], #4
 80002fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000300:	f840 3b04 	str.w	r3, [r0], #4
 8000304:	f851 3b04 	ldr.w	r3, [r1], #4
 8000308:	f840 3b04 	str.w	r3, [r0], #4
 800030c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000310:	f840 3b04 	str.w	r3, [r0], #4
 8000314:	3a40      	subs	r2, #64	; 0x40
 8000316:	d2bd      	bcs.n	8000294 <memcpy+0x10>
 8000318:	3230      	adds	r2, #48	; 0x30
 800031a:	d311      	bcc.n	8000340 <memcpy+0xbc>
 800031c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000320:	f840 3b04 	str.w	r3, [r0], #4
 8000324:	f851 3b04 	ldr.w	r3, [r1], #4
 8000328:	f840 3b04 	str.w	r3, [r0], #4
 800032c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000330:	f840 3b04 	str.w	r3, [r0], #4
 8000334:	f851 3b04 	ldr.w	r3, [r1], #4
 8000338:	f840 3b04 	str.w	r3, [r0], #4
 800033c:	3a10      	subs	r2, #16
 800033e:	d2ed      	bcs.n	800031c <memcpy+0x98>
 8000340:	320c      	adds	r2, #12
 8000342:	d305      	bcc.n	8000350 <memcpy+0xcc>
 8000344:	f851 3b04 	ldr.w	r3, [r1], #4
 8000348:	f840 3b04 	str.w	r3, [r0], #4
 800034c:	3a04      	subs	r2, #4
 800034e:	d2f9      	bcs.n	8000344 <memcpy+0xc0>
 8000350:	3204      	adds	r2, #4
 8000352:	d008      	beq.n	8000366 <memcpy+0xe2>
 8000354:	07d2      	lsls	r2, r2, #31
 8000356:	bf1c      	itt	ne
 8000358:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800035c:	f800 3b01 	strbne.w	r3, [r0], #1
 8000360:	d301      	bcc.n	8000366 <memcpy+0xe2>
 8000362:	880b      	ldrh	r3, [r1, #0]
 8000364:	8003      	strh	r3, [r0, #0]
 8000366:	4660      	mov	r0, ip
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	2a08      	cmp	r2, #8
 800036e:	d313      	bcc.n	8000398 <memcpy+0x114>
 8000370:	078b      	lsls	r3, r1, #30
 8000372:	d08d      	beq.n	8000290 <memcpy+0xc>
 8000374:	f010 0303 	ands.w	r3, r0, #3
 8000378:	d08a      	beq.n	8000290 <memcpy+0xc>
 800037a:	f1c3 0304 	rsb	r3, r3, #4
 800037e:	1ad2      	subs	r2, r2, r3
 8000380:	07db      	lsls	r3, r3, #31
 8000382:	bf1c      	itt	ne
 8000384:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000388:	f800 3b01 	strbne.w	r3, [r0], #1
 800038c:	d380      	bcc.n	8000290 <memcpy+0xc>
 800038e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000392:	f820 3b02 	strh.w	r3, [r0], #2
 8000396:	e77b      	b.n	8000290 <memcpy+0xc>
 8000398:	3a04      	subs	r2, #4
 800039a:	d3d9      	bcc.n	8000350 <memcpy+0xcc>
 800039c:	3a01      	subs	r2, #1
 800039e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80003a2:	f800 3b01 	strb.w	r3, [r0], #1
 80003a6:	d2f9      	bcs.n	800039c <memcpy+0x118>
 80003a8:	780b      	ldrb	r3, [r1, #0]
 80003aa:	7003      	strb	r3, [r0, #0]
 80003ac:	784b      	ldrb	r3, [r1, #1]
 80003ae:	7043      	strb	r3, [r0, #1]
 80003b0:	788b      	ldrb	r3, [r1, #2]
 80003b2:	7083      	strb	r3, [r0, #2]
 80003b4:	4660      	mov	r0, ip
 80003b6:	4770      	bx	lr

080003b8 <__aeabi_drsub>:
 80003b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	e002      	b.n	80003c4 <__adddf3>
 80003be:	bf00      	nop

080003c0 <__aeabi_dsub>:
 80003c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003c4 <__adddf3>:
 80003c4:	b530      	push	{r4, r5, lr}
 80003c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	bf1f      	itttt	ne
 80003da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ea:	f000 80e2 	beq.w	80005b2 <__adddf3+0x1ee>
 80003ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f6:	bfb8      	it	lt
 80003f8:	426d      	neglt	r5, r5
 80003fa:	dd0c      	ble.n	8000416 <__adddf3+0x52>
 80003fc:	442c      	add	r4, r5
 80003fe:	ea80 0202 	eor.w	r2, r0, r2
 8000402:	ea81 0303 	eor.w	r3, r1, r3
 8000406:	ea82 0000 	eor.w	r0, r2, r0
 800040a:	ea83 0101 	eor.w	r1, r3, r1
 800040e:	ea80 0202 	eor.w	r2, r0, r2
 8000412:	ea81 0303 	eor.w	r3, r1, r3
 8000416:	2d36      	cmp	r5, #54	; 0x36
 8000418:	bf88      	it	hi
 800041a:	bd30      	pophi	{r4, r5, pc}
 800041c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000420:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000424:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000428:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x70>
 800042e:	4240      	negs	r0, r0
 8000430:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000434:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000438:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800043c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000440:	d002      	beq.n	8000448 <__adddf3+0x84>
 8000442:	4252      	negs	r2, r2
 8000444:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000448:	ea94 0f05 	teq	r4, r5
 800044c:	f000 80a7 	beq.w	800059e <__adddf3+0x1da>
 8000450:	f1a4 0401 	sub.w	r4, r4, #1
 8000454:	f1d5 0e20 	rsbs	lr, r5, #32
 8000458:	db0d      	blt.n	8000476 <__adddf3+0xb2>
 800045a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045e:	fa22 f205 	lsr.w	r2, r2, r5
 8000462:	1880      	adds	r0, r0, r2
 8000464:	f141 0100 	adc.w	r1, r1, #0
 8000468:	fa03 f20e 	lsl.w	r2, r3, lr
 800046c:	1880      	adds	r0, r0, r2
 800046e:	fa43 f305 	asr.w	r3, r3, r5
 8000472:	4159      	adcs	r1, r3
 8000474:	e00e      	b.n	8000494 <__adddf3+0xd0>
 8000476:	f1a5 0520 	sub.w	r5, r5, #32
 800047a:	f10e 0e20 	add.w	lr, lr, #32
 800047e:	2a01      	cmp	r2, #1
 8000480:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000484:	bf28      	it	cs
 8000486:	f04c 0c02 	orrcs.w	ip, ip, #2
 800048a:	fa43 f305 	asr.w	r3, r3, r5
 800048e:	18c0      	adds	r0, r0, r3
 8000490:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	d507      	bpl.n	80004aa <__adddf3+0xe6>
 800049a:	f04f 0e00 	mov.w	lr, #0
 800049e:	f1dc 0c00 	rsbs	ip, ip, #0
 80004a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80004aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004ae:	d31b      	bcc.n	80004e8 <__adddf3+0x124>
 80004b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004b4:	d30c      	bcc.n	80004d0 <__adddf3+0x10c>
 80004b6:	0849      	lsrs	r1, r1, #1
 80004b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80004bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c0:	f104 0401 	add.w	r4, r4, #1
 80004c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004cc:	f080 809a 	bcs.w	8000604 <__adddf3+0x240>
 80004d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d4:	bf08      	it	eq
 80004d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004da:	f150 0000 	adcs.w	r0, r0, #0
 80004de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004e2:	ea41 0105 	orr.w	r1, r1, r5
 80004e6:	bd30      	pop	{r4, r5, pc}
 80004e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004ec:	4140      	adcs	r0, r0
 80004ee:	eb41 0101 	adc.w	r1, r1, r1
 80004f2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80004f6:	f1a4 0401 	sub.w	r4, r4, #1
 80004fa:	d1e9      	bne.n	80004d0 <__adddf3+0x10c>
 80004fc:	f091 0f00 	teq	r1, #0
 8000500:	bf04      	itt	eq
 8000502:	4601      	moveq	r1, r0
 8000504:	2000      	moveq	r0, #0
 8000506:	fab1 f381 	clz	r3, r1
 800050a:	bf08      	it	eq
 800050c:	3320      	addeq	r3, #32
 800050e:	f1a3 030b 	sub.w	r3, r3, #11
 8000512:	f1b3 0220 	subs.w	r2, r3, #32
 8000516:	da0c      	bge.n	8000532 <__adddf3+0x16e>
 8000518:	320c      	adds	r2, #12
 800051a:	dd08      	ble.n	800052e <__adddf3+0x16a>
 800051c:	f102 0c14 	add.w	ip, r2, #20
 8000520:	f1c2 020c 	rsb	r2, r2, #12
 8000524:	fa01 f00c 	lsl.w	r0, r1, ip
 8000528:	fa21 f102 	lsr.w	r1, r1, r2
 800052c:	e00c      	b.n	8000548 <__adddf3+0x184>
 800052e:	f102 0214 	add.w	r2, r2, #20
 8000532:	bfd8      	it	le
 8000534:	f1c2 0c20 	rsble	ip, r2, #32
 8000538:	fa01 f102 	lsl.w	r1, r1, r2
 800053c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000540:	bfdc      	itt	le
 8000542:	ea41 010c 	orrle.w	r1, r1, ip
 8000546:	4090      	lslle	r0, r2
 8000548:	1ae4      	subs	r4, r4, r3
 800054a:	bfa2      	ittt	ge
 800054c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000550:	4329      	orrge	r1, r5
 8000552:	bd30      	popge	{r4, r5, pc}
 8000554:	ea6f 0404 	mvn.w	r4, r4
 8000558:	3c1f      	subs	r4, #31
 800055a:	da1c      	bge.n	8000596 <__adddf3+0x1d2>
 800055c:	340c      	adds	r4, #12
 800055e:	dc0e      	bgt.n	800057e <__adddf3+0x1ba>
 8000560:	f104 0414 	add.w	r4, r4, #20
 8000564:	f1c4 0220 	rsb	r2, r4, #32
 8000568:	fa20 f004 	lsr.w	r0, r0, r4
 800056c:	fa01 f302 	lsl.w	r3, r1, r2
 8000570:	ea40 0003 	orr.w	r0, r0, r3
 8000574:	fa21 f304 	lsr.w	r3, r1, r4
 8000578:	ea45 0103 	orr.w	r1, r5, r3
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	f1c4 040c 	rsb	r4, r4, #12
 8000582:	f1c4 0220 	rsb	r2, r4, #32
 8000586:	fa20 f002 	lsr.w	r0, r0, r2
 800058a:	fa01 f304 	lsl.w	r3, r1, r4
 800058e:	ea40 0003 	orr.w	r0, r0, r3
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	fa21 f004 	lsr.w	r0, r1, r4
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	f094 0f00 	teq	r4, #0
 80005a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005a6:	bf06      	itte	eq
 80005a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005ac:	3401      	addeq	r4, #1
 80005ae:	3d01      	subne	r5, #1
 80005b0:	e74e      	b.n	8000450 <__adddf3+0x8c>
 80005b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b6:	bf18      	it	ne
 80005b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005bc:	d029      	beq.n	8000612 <__adddf3+0x24e>
 80005be:	ea94 0f05 	teq	r4, r5
 80005c2:	bf08      	it	eq
 80005c4:	ea90 0f02 	teqeq	r0, r2
 80005c8:	d005      	beq.n	80005d6 <__adddf3+0x212>
 80005ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ce:	bf04      	itt	eq
 80005d0:	4619      	moveq	r1, r3
 80005d2:	4610      	moveq	r0, r2
 80005d4:	bd30      	pop	{r4, r5, pc}
 80005d6:	ea91 0f03 	teq	r1, r3
 80005da:	bf1e      	ittt	ne
 80005dc:	2100      	movne	r1, #0
 80005de:	2000      	movne	r0, #0
 80005e0:	bd30      	popne	{r4, r5, pc}
 80005e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e6:	d105      	bne.n	80005f4 <__adddf3+0x230>
 80005e8:	0040      	lsls	r0, r0, #1
 80005ea:	4149      	adcs	r1, r1
 80005ec:	bf28      	it	cs
 80005ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f8:	bf3c      	itt	cc
 80005fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005fe:	bd30      	popcc	{r4, r5, pc}
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000608:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800060c:	f04f 0000 	mov.w	r0, #0
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000616:	bf1a      	itte	ne
 8000618:	4619      	movne	r1, r3
 800061a:	4610      	movne	r0, r2
 800061c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000620:	bf1c      	itt	ne
 8000622:	460b      	movne	r3, r1
 8000624:	4602      	movne	r2, r0
 8000626:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800062a:	bf06      	itte	eq
 800062c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000630:	ea91 0f03 	teqeq	r1, r3
 8000634:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	bf00      	nop

0800063c <__aeabi_ui2d>:
 800063c:	f090 0f00 	teq	r0, #0
 8000640:	bf04      	itt	eq
 8000642:	2100      	moveq	r1, #0
 8000644:	4770      	bxeq	lr
 8000646:	b530      	push	{r4, r5, lr}
 8000648:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800064c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000650:	f04f 0500 	mov.w	r5, #0
 8000654:	f04f 0100 	mov.w	r1, #0
 8000658:	e750      	b.n	80004fc <__adddf3+0x138>
 800065a:	bf00      	nop

0800065c <__aeabi_i2d>:
 800065c:	f090 0f00 	teq	r0, #0
 8000660:	bf04      	itt	eq
 8000662:	2100      	moveq	r1, #0
 8000664:	4770      	bxeq	lr
 8000666:	b530      	push	{r4, r5, lr}
 8000668:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800066c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000670:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000674:	bf48      	it	mi
 8000676:	4240      	negmi	r0, r0
 8000678:	f04f 0100 	mov.w	r1, #0
 800067c:	e73e      	b.n	80004fc <__adddf3+0x138>
 800067e:	bf00      	nop

08000680 <__aeabi_f2d>:
 8000680:	0042      	lsls	r2, r0, #1
 8000682:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000686:	ea4f 0131 	mov.w	r1, r1, rrx
 800068a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068e:	bf1f      	itttt	ne
 8000690:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000694:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000698:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800069c:	4770      	bxne	lr
 800069e:	f092 0f00 	teq	r2, #0
 80006a2:	bf14      	ite	ne
 80006a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	e720      	b.n	80004fc <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aedc 	beq.w	80004aa <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6c1      	b.n	80004aa <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_dmul>:
 8000728:	b570      	push	{r4, r5, r6, lr}
 800072a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000736:	bf1d      	ittte	ne
 8000738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800073c:	ea94 0f0c 	teqne	r4, ip
 8000740:	ea95 0f0c 	teqne	r5, ip
 8000744:	f000 f8de 	bleq	8000904 <__aeabi_dmul+0x1dc>
 8000748:	442c      	add	r4, r5
 800074a:	ea81 0603 	eor.w	r6, r1, r3
 800074e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000752:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000756:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800075a:	bf18      	it	ne
 800075c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000760:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000764:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000768:	d038      	beq.n	80007dc <__aeabi_dmul+0xb4>
 800076a:	fba0 ce02 	umull	ip, lr, r0, r2
 800076e:	f04f 0500 	mov.w	r5, #0
 8000772:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000776:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800077a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800077e:	f04f 0600 	mov.w	r6, #0
 8000782:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000786:	f09c 0f00 	teq	ip, #0
 800078a:	bf18      	it	ne
 800078c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000790:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000794:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000798:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800079c:	d204      	bcs.n	80007a8 <__aeabi_dmul+0x80>
 800079e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80007a2:	416d      	adcs	r5, r5
 80007a4:	eb46 0606 	adc.w	r6, r6, r6
 80007a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80007ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007c0:	bf88      	it	hi
 80007c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80007c6:	d81e      	bhi.n	8000806 <__aeabi_dmul+0xde>
 80007c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80007cc:	bf08      	it	eq
 80007ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007d2:	f150 0000 	adcs.w	r0, r0, #0
 80007d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007e0:	ea46 0101 	orr.w	r1, r6, r1
 80007e4:	ea40 0002 	orr.w	r0, r0, r2
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007f0:	bfc2      	ittt	gt
 80007f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007fa:	bd70      	popgt	{r4, r5, r6, pc}
 80007fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000800:	f04f 0e00 	mov.w	lr, #0
 8000804:	3c01      	subs	r4, #1
 8000806:	f300 80ab 	bgt.w	8000960 <__aeabi_dmul+0x238>
 800080a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800080e:	bfde      	ittt	le
 8000810:	2000      	movle	r0, #0
 8000812:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000816:	bd70      	pople	{r4, r5, r6, pc}
 8000818:	f1c4 0400 	rsb	r4, r4, #0
 800081c:	3c20      	subs	r4, #32
 800081e:	da35      	bge.n	800088c <__aeabi_dmul+0x164>
 8000820:	340c      	adds	r4, #12
 8000822:	dc1b      	bgt.n	800085c <__aeabi_dmul+0x134>
 8000824:	f104 0414 	add.w	r4, r4, #20
 8000828:	f1c4 0520 	rsb	r5, r4, #32
 800082c:	fa00 f305 	lsl.w	r3, r0, r5
 8000830:	fa20 f004 	lsr.w	r0, r0, r4
 8000834:	fa01 f205 	lsl.w	r2, r1, r5
 8000838:	ea40 0002 	orr.w	r0, r0, r2
 800083c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000840:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000844:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000848:	fa21 f604 	lsr.w	r6, r1, r4
 800084c:	eb42 0106 	adc.w	r1, r2, r6
 8000850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000854:	bf08      	it	eq
 8000856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f1c4 040c 	rsb	r4, r4, #12
 8000860:	f1c4 0520 	rsb	r5, r4, #32
 8000864:	fa00 f304 	lsl.w	r3, r0, r4
 8000868:	fa20 f005 	lsr.w	r0, r0, r5
 800086c:	fa01 f204 	lsl.w	r2, r1, r4
 8000870:	ea40 0002 	orr.w	r0, r0, r2
 8000874:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000878:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800087c:	f141 0100 	adc.w	r1, r1, #0
 8000880:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000884:	bf08      	it	eq
 8000886:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800088a:	bd70      	pop	{r4, r5, r6, pc}
 800088c:	f1c4 0520 	rsb	r5, r4, #32
 8000890:	fa00 f205 	lsl.w	r2, r0, r5
 8000894:	ea4e 0e02 	orr.w	lr, lr, r2
 8000898:	fa20 f304 	lsr.w	r3, r0, r4
 800089c:	fa01 f205 	lsl.w	r2, r1, r5
 80008a0:	ea43 0302 	orr.w	r3, r3, r2
 80008a4:	fa21 f004 	lsr.w	r0, r1, r4
 80008a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008ac:	fa21 f204 	lsr.w	r2, r1, r4
 80008b0:	ea20 0002 	bic.w	r0, r0, r2
 80008b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008bc:	bf08      	it	eq
 80008be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008c2:	bd70      	pop	{r4, r5, r6, pc}
 80008c4:	f094 0f00 	teq	r4, #0
 80008c8:	d10f      	bne.n	80008ea <__aeabi_dmul+0x1c2>
 80008ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80008ce:	0040      	lsls	r0, r0, #1
 80008d0:	eb41 0101 	adc.w	r1, r1, r1
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	bf08      	it	eq
 80008da:	3c01      	subeq	r4, #1
 80008dc:	d0f7      	beq.n	80008ce <__aeabi_dmul+0x1a6>
 80008de:	ea41 0106 	orr.w	r1, r1, r6
 80008e2:	f095 0f00 	teq	r5, #0
 80008e6:	bf18      	it	ne
 80008e8:	4770      	bxne	lr
 80008ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008ee:	0052      	lsls	r2, r2, #1
 80008f0:	eb43 0303 	adc.w	r3, r3, r3
 80008f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008f8:	bf08      	it	eq
 80008fa:	3d01      	subeq	r5, #1
 80008fc:	d0f7      	beq.n	80008ee <__aeabi_dmul+0x1c6>
 80008fe:	ea43 0306 	orr.w	r3, r3, r6
 8000902:	4770      	bx	lr
 8000904:	ea94 0f0c 	teq	r4, ip
 8000908:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090c:	bf18      	it	ne
 800090e:	ea95 0f0c 	teqne	r5, ip
 8000912:	d00c      	beq.n	800092e <__aeabi_dmul+0x206>
 8000914:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091e:	d1d1      	bne.n	80008c4 <__aeabi_dmul+0x19c>
 8000920:	ea81 0103 	eor.w	r1, r1, r3
 8000924:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000928:	f04f 0000 	mov.w	r0, #0
 800092c:	bd70      	pop	{r4, r5, r6, pc}
 800092e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000932:	bf06      	itte	eq
 8000934:	4610      	moveq	r0, r2
 8000936:	4619      	moveq	r1, r3
 8000938:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800093c:	d019      	beq.n	8000972 <__aeabi_dmul+0x24a>
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	d102      	bne.n	800094a <__aeabi_dmul+0x222>
 8000944:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000948:	d113      	bne.n	8000972 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	d105      	bne.n	800095c <__aeabi_dmul+0x234>
 8000950:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000954:	bf1c      	itt	ne
 8000956:	4610      	movne	r0, r2
 8000958:	4619      	movne	r1, r3
 800095a:	d10a      	bne.n	8000972 <__aeabi_dmul+0x24a>
 800095c:	ea81 0103 	eor.w	r1, r1, r3
 8000960:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000964:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000968:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800096c:	f04f 0000 	mov.w	r0, #0
 8000970:	bd70      	pop	{r4, r5, r6, pc}
 8000972:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000976:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800097a:	bd70      	pop	{r4, r5, r6, pc}

0800097c <__aeabi_ddiv>:
 800097c:	b570      	push	{r4, r5, r6, lr}
 800097e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000982:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000986:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800098a:	bf1d      	ittte	ne
 800098c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000990:	ea94 0f0c 	teqne	r4, ip
 8000994:	ea95 0f0c 	teqne	r5, ip
 8000998:	f000 f8a7 	bleq	8000aea <__aeabi_ddiv+0x16e>
 800099c:	eba4 0405 	sub.w	r4, r4, r5
 80009a0:	ea81 0e03 	eor.w	lr, r1, r3
 80009a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80009ac:	f000 8088 	beq.w	8000ac0 <__aeabi_ddiv+0x144>
 80009b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80009b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80009b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80009bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009d4:	429d      	cmp	r5, r3
 80009d6:	bf08      	it	eq
 80009d8:	4296      	cmpeq	r6, r2
 80009da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009e2:	d202      	bcs.n	80009ea <__aeabi_ddiv+0x6e>
 80009e4:	085b      	lsrs	r3, r3, #1
 80009e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ea:	1ab6      	subs	r6, r6, r2
 80009ec:	eb65 0503 	sbc.w	r5, r5, r3
 80009f0:	085b      	lsrs	r3, r3, #1
 80009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a06:	bf22      	ittt	cs
 8000a08:	1ab6      	subcs	r6, r6, r2
 8000a0a:	4675      	movcs	r5, lr
 8000a0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a10:	085b      	lsrs	r3, r3, #1
 8000a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a1e:	bf22      	ittt	cs
 8000a20:	1ab6      	subcs	r6, r6, r2
 8000a22:	4675      	movcs	r5, lr
 8000a24:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a28:	085b      	lsrs	r3, r3, #1
 8000a2a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a36:	bf22      	ittt	cs
 8000a38:	1ab6      	subcs	r6, r6, r2
 8000a3a:	4675      	movcs	r5, lr
 8000a3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a40:	085b      	lsrs	r3, r3, #1
 8000a42:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a46:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a4e:	bf22      	ittt	cs
 8000a50:	1ab6      	subcs	r6, r6, r2
 8000a52:	4675      	movcs	r5, lr
 8000a54:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a58:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a5c:	d018      	beq.n	8000a90 <__aeabi_ddiv+0x114>
 8000a5e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a62:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a66:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a6a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a6e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a72:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a76:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a7a:	d1c0      	bne.n	80009fe <__aeabi_ddiv+0x82>
 8000a7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a80:	d10b      	bne.n	8000a9a <__aeabi_ddiv+0x11e>
 8000a82:	ea41 0100 	orr.w	r1, r1, r0
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a8e:	e7b6      	b.n	80009fe <__aeabi_ddiv+0x82>
 8000a90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a94:	bf04      	itt	eq
 8000a96:	4301      	orreq	r1, r0
 8000a98:	2000      	moveq	r0, #0
 8000a9a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a9e:	bf88      	it	hi
 8000aa0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000aa4:	f63f aeaf 	bhi.w	8000806 <__aeabi_dmul+0xde>
 8000aa8:	ebb5 0c03 	subs.w	ip, r5, r3
 8000aac:	bf04      	itt	eq
 8000aae:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000ab2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000ab6:	f150 0000 	adcs.w	r0, r0, #0
 8000aba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000abe:	bd70      	pop	{r4, r5, r6, pc}
 8000ac0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000ac4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000ac8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000acc:	bfc2      	ittt	gt
 8000ace:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ad2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ad6:	bd70      	popgt	{r4, r5, r6, pc}
 8000ad8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000adc:	f04f 0e00 	mov.w	lr, #0
 8000ae0:	3c01      	subs	r4, #1
 8000ae2:	e690      	b.n	8000806 <__aeabi_dmul+0xde>
 8000ae4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ae8:	e68d      	b.n	8000806 <__aeabi_dmul+0xde>
 8000aea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000aee:	ea94 0f0c 	teq	r4, ip
 8000af2:	bf08      	it	eq
 8000af4:	ea95 0f0c 	teqeq	r5, ip
 8000af8:	f43f af3b 	beq.w	8000972 <__aeabi_dmul+0x24a>
 8000afc:	ea94 0f0c 	teq	r4, ip
 8000b00:	d10a      	bne.n	8000b18 <__aeabi_ddiv+0x19c>
 8000b02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000b06:	f47f af34 	bne.w	8000972 <__aeabi_dmul+0x24a>
 8000b0a:	ea95 0f0c 	teq	r5, ip
 8000b0e:	f47f af25 	bne.w	800095c <__aeabi_dmul+0x234>
 8000b12:	4610      	mov	r0, r2
 8000b14:	4619      	mov	r1, r3
 8000b16:	e72c      	b.n	8000972 <__aeabi_dmul+0x24a>
 8000b18:	ea95 0f0c 	teq	r5, ip
 8000b1c:	d106      	bne.n	8000b2c <__aeabi_ddiv+0x1b0>
 8000b1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b22:	f43f aefd 	beq.w	8000920 <__aeabi_dmul+0x1f8>
 8000b26:	4610      	mov	r0, r2
 8000b28:	4619      	mov	r1, r3
 8000b2a:	e722      	b.n	8000972 <__aeabi_dmul+0x24a>
 8000b2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b30:	bf18      	it	ne
 8000b32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b36:	f47f aec5 	bne.w	80008c4 <__aeabi_dmul+0x19c>
 8000b3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b3e:	f47f af0d 	bne.w	800095c <__aeabi_dmul+0x234>
 8000b42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b46:	f47f aeeb 	bne.w	8000920 <__aeabi_dmul+0x1f8>
 8000b4a:	e712      	b.n	8000972 <__aeabi_dmul+0x24a>

08000b4c <__gedf2>:
 8000b4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000b50:	e006      	b.n	8000b60 <__cmpdf2+0x4>
 8000b52:	bf00      	nop

08000b54 <__ledf2>:
 8000b54:	f04f 0c01 	mov.w	ip, #1
 8000b58:	e002      	b.n	8000b60 <__cmpdf2+0x4>
 8000b5a:	bf00      	nop

08000b5c <__cmpdf2>:
 8000b5c:	f04f 0c01 	mov.w	ip, #1
 8000b60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	bf18      	it	ne
 8000b72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b76:	d01b      	beq.n	8000bb0 <__cmpdf2+0x54>
 8000b78:	b001      	add	sp, #4
 8000b7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b7e:	bf0c      	ite	eq
 8000b80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b84:	ea91 0f03 	teqne	r1, r3
 8000b88:	bf02      	ittt	eq
 8000b8a:	ea90 0f02 	teqeq	r0, r2
 8000b8e:	2000      	moveq	r0, #0
 8000b90:	4770      	bxeq	lr
 8000b92:	f110 0f00 	cmn.w	r0, #0
 8000b96:	ea91 0f03 	teq	r1, r3
 8000b9a:	bf58      	it	pl
 8000b9c:	4299      	cmppl	r1, r3
 8000b9e:	bf08      	it	eq
 8000ba0:	4290      	cmpeq	r0, r2
 8000ba2:	bf2c      	ite	cs
 8000ba4:	17d8      	asrcs	r0, r3, #31
 8000ba6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000baa:	f040 0001 	orr.w	r0, r0, #1
 8000bae:	4770      	bx	lr
 8000bb0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb8:	d102      	bne.n	8000bc0 <__cmpdf2+0x64>
 8000bba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bbe:	d107      	bne.n	8000bd0 <__cmpdf2+0x74>
 8000bc0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bc8:	d1d6      	bne.n	8000b78 <__cmpdf2+0x1c>
 8000bca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bce:	d0d3      	beq.n	8000b78 <__cmpdf2+0x1c>
 8000bd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_cdrcmple>:
 8000bd8:	4684      	mov	ip, r0
 8000bda:	4610      	mov	r0, r2
 8000bdc:	4662      	mov	r2, ip
 8000bde:	468c      	mov	ip, r1
 8000be0:	4619      	mov	r1, r3
 8000be2:	4663      	mov	r3, ip
 8000be4:	e000      	b.n	8000be8 <__aeabi_cdcmpeq>
 8000be6:	bf00      	nop

08000be8 <__aeabi_cdcmpeq>:
 8000be8:	b501      	push	{r0, lr}
 8000bea:	f7ff ffb7 	bl	8000b5c <__cmpdf2>
 8000bee:	2800      	cmp	r0, #0
 8000bf0:	bf48      	it	mi
 8000bf2:	f110 0f00 	cmnmi.w	r0, #0
 8000bf6:	bd01      	pop	{r0, pc}

08000bf8 <__aeabi_dcmpeq>:
 8000bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bfc:	f7ff fff4 	bl	8000be8 <__aeabi_cdcmpeq>
 8000c00:	bf0c      	ite	eq
 8000c02:	2001      	moveq	r0, #1
 8000c04:	2000      	movne	r0, #0
 8000c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0a:	bf00      	nop

08000c0c <__aeabi_dcmplt>:
 8000c0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c10:	f7ff ffea 	bl	8000be8 <__aeabi_cdcmpeq>
 8000c14:	bf34      	ite	cc
 8000c16:	2001      	movcc	r0, #1
 8000c18:	2000      	movcs	r0, #0
 8000c1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c1e:	bf00      	nop

08000c20 <__aeabi_dcmple>:
 8000c20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c24:	f7ff ffe0 	bl	8000be8 <__aeabi_cdcmpeq>
 8000c28:	bf94      	ite	ls
 8000c2a:	2001      	movls	r0, #1
 8000c2c:	2000      	movhi	r0, #0
 8000c2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c32:	bf00      	nop

08000c34 <__aeabi_dcmpge>:
 8000c34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c38:	f7ff ffce 	bl	8000bd8 <__aeabi_cdrcmple>
 8000c3c:	bf94      	ite	ls
 8000c3e:	2001      	movls	r0, #1
 8000c40:	2000      	movhi	r0, #0
 8000c42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c46:	bf00      	nop

08000c48 <__aeabi_dcmpgt>:
 8000c48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c4c:	f7ff ffc4 	bl	8000bd8 <__aeabi_cdrcmple>
 8000c50:	bf34      	ite	cc
 8000c52:	2001      	movcc	r0, #1
 8000c54:	2000      	movcs	r0, #0
 8000c56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c5a:	bf00      	nop

08000c5c <__aeabi_d2iz>:
 8000c5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c64:	d215      	bcs.n	8000c92 <__aeabi_d2iz+0x36>
 8000c66:	d511      	bpl.n	8000c8c <__aeabi_d2iz+0x30>
 8000c68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c70:	d912      	bls.n	8000c98 <__aeabi_d2iz+0x3c>
 8000c72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c82:	fa23 f002 	lsr.w	r0, r3, r2
 8000c86:	bf18      	it	ne
 8000c88:	4240      	negne	r0, r0
 8000c8a:	4770      	bx	lr
 8000c8c:	f04f 0000 	mov.w	r0, #0
 8000c90:	4770      	bx	lr
 8000c92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c96:	d105      	bne.n	8000ca4 <__aeabi_d2iz+0x48>
 8000c98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	bf08      	it	eq
 8000c9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ca2:	4770      	bx	lr
 8000ca4:	f04f 0000 	mov.w	r0, #0
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <__aeabi_uldivmod>:
 8000cac:	b953      	cbnz	r3, 8000cc4 <__aeabi_uldivmod+0x18>
 8000cae:	b94a      	cbnz	r2, 8000cc4 <__aeabi_uldivmod+0x18>
 8000cb0:	2900      	cmp	r1, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	2800      	cmpeq	r0, #0
 8000cb6:	bf1c      	itt	ne
 8000cb8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cbc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cc0:	f000 b83c 	b.w	8000d3c <__aeabi_idiv0>
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	46ec      	mov	ip, sp
 8000cc8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000ccc:	f000 f81e 	bl	8000d0c <__gnu_uldivmod_helper>
 8000cd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd4:	b002      	add	sp, #8
 8000cd6:	bc0c      	pop	{r2, r3}
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop

08000cdc <__gnu_ldivmod_helper>:
 8000cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ce0:	9c06      	ldr	r4, [sp, #24]
 8000ce2:	4615      	mov	r5, r2
 8000ce4:	4606      	mov	r6, r0
 8000ce6:	460f      	mov	r7, r1
 8000ce8:	4698      	mov	r8, r3
 8000cea:	f000 f829 	bl	8000d40 <__divdi3>
 8000cee:	fb05 f301 	mul.w	r3, r5, r1
 8000cf2:	fb00 3808 	mla	r8, r0, r8, r3
 8000cf6:	fba5 2300 	umull	r2, r3, r5, r0
 8000cfa:	1ab2      	subs	r2, r6, r2
 8000cfc:	4443      	add	r3, r8
 8000cfe:	eb67 0303 	sbc.w	r3, r7, r3
 8000d02:	e9c4 2300 	strd	r2, r3, [r4]
 8000d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d0a:	bf00      	nop

08000d0c <__gnu_uldivmod_helper>:
 8000d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d10:	9c06      	ldr	r4, [sp, #24]
 8000d12:	4690      	mov	r8, r2
 8000d14:	4606      	mov	r6, r0
 8000d16:	460f      	mov	r7, r1
 8000d18:	461d      	mov	r5, r3
 8000d1a:	f000 f95f 	bl	8000fdc <__udivdi3>
 8000d1e:	fb00 f505 	mul.w	r5, r0, r5
 8000d22:	fba0 2308 	umull	r2, r3, r0, r8
 8000d26:	fb08 5501 	mla	r5, r8, r1, r5
 8000d2a:	1ab2      	subs	r2, r6, r2
 8000d2c:	442b      	add	r3, r5
 8000d2e:	eb67 0303 	sbc.w	r3, r7, r3
 8000d32:	e9c4 2300 	strd	r2, r3, [r4]
 8000d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d3a:	bf00      	nop

08000d3c <__aeabi_idiv0>:
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop

08000d40 <__divdi3>:
 8000d40:	2900      	cmp	r1, #0
 8000d42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d46:	f2c0 80a6 	blt.w	8000e96 <__divdi3+0x156>
 8000d4a:	2600      	movs	r6, #0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	f2c0 809c 	blt.w	8000e8a <__divdi3+0x14a>
 8000d52:	4688      	mov	r8, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	469e      	mov	lr, r3
 8000d58:	4615      	mov	r5, r2
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	460f      	mov	r7, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d13d      	bne.n	8000dde <__divdi3+0x9e>
 8000d62:	428a      	cmp	r2, r1
 8000d64:	d959      	bls.n	8000e1a <__divdi3+0xda>
 8000d66:	fab2 f382 	clz	r3, r2
 8000d6a:	b13b      	cbz	r3, 8000d7c <__divdi3+0x3c>
 8000d6c:	f1c3 0220 	rsb	r2, r3, #32
 8000d70:	409f      	lsls	r7, r3
 8000d72:	fa20 f202 	lsr.w	r2, r0, r2
 8000d76:	409d      	lsls	r5, r3
 8000d78:	4317      	orrs	r7, r2
 8000d7a:	409c      	lsls	r4, r3
 8000d7c:	0c29      	lsrs	r1, r5, #16
 8000d7e:	0c22      	lsrs	r2, r4, #16
 8000d80:	fbb7 fef1 	udiv	lr, r7, r1
 8000d84:	b2a8      	uxth	r0, r5
 8000d86:	fb01 771e 	mls	r7, r1, lr, r7
 8000d8a:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8000d8e:	fb00 f30e 	mul.w	r3, r0, lr
 8000d92:	42bb      	cmp	r3, r7
 8000d94:	d90a      	bls.n	8000dac <__divdi3+0x6c>
 8000d96:	197f      	adds	r7, r7, r5
 8000d98:	f10e 32ff 	add.w	r2, lr, #4294967295	; 0xffffffff
 8000d9c:	f080 8105 	bcs.w	8000faa <__divdi3+0x26a>
 8000da0:	42bb      	cmp	r3, r7
 8000da2:	f240 8102 	bls.w	8000faa <__divdi3+0x26a>
 8000da6:	f1ae 0e02 	sub.w	lr, lr, #2
 8000daa:	442f      	add	r7, r5
 8000dac:	1aff      	subs	r7, r7, r3
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb7 f3f1 	udiv	r3, r7, r1
 8000db4:	fb01 7713 	mls	r7, r1, r3, r7
 8000db8:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8000dbc:	fb00 f003 	mul.w	r0, r0, r3
 8000dc0:	42b8      	cmp	r0, r7
 8000dc2:	d908      	bls.n	8000dd6 <__divdi3+0x96>
 8000dc4:	197f      	adds	r7, r7, r5
 8000dc6:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8000dca:	f080 80f0 	bcs.w	8000fae <__divdi3+0x26e>
 8000dce:	42b8      	cmp	r0, r7
 8000dd0:	f240 80ed 	bls.w	8000fae <__divdi3+0x26e>
 8000dd4:	3b02      	subs	r3, #2
 8000dd6:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000dda:	2200      	movs	r2, #0
 8000ddc:	e003      	b.n	8000de6 <__divdi3+0xa6>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d90f      	bls.n	8000e02 <__divdi3+0xc2>
 8000de2:	2200      	movs	r2, #0
 8000de4:	4613      	mov	r3, r2
 8000de6:	1c34      	adds	r4, r6, #0
 8000de8:	bf18      	it	ne
 8000dea:	2401      	movne	r4, #1
 8000dec:	4260      	negs	r0, r4
 8000dee:	f04f 0500 	mov.w	r5, #0
 8000df2:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 8000df6:	4058      	eors	r0, r3
 8000df8:	4051      	eors	r1, r2
 8000dfa:	1900      	adds	r0, r0, r4
 8000dfc:	4169      	adcs	r1, r5
 8000dfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e02:	fab3 f283 	clz	r2, r3
 8000e06:	2a00      	cmp	r2, #0
 8000e08:	f040 8086 	bne.w	8000f18 <__divdi3+0x1d8>
 8000e0c:	428b      	cmp	r3, r1
 8000e0e:	d302      	bcc.n	8000e16 <__divdi3+0xd6>
 8000e10:	4584      	cmp	ip, r0
 8000e12:	f200 80db 	bhi.w	8000fcc <__divdi3+0x28c>
 8000e16:	2301      	movs	r3, #1
 8000e18:	e7e5      	b.n	8000de6 <__divdi3+0xa6>
 8000e1a:	b912      	cbnz	r2, 8000e22 <__divdi3+0xe2>
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	fbb3 f5f2 	udiv	r5, r3, r2
 8000e22:	fab5 f085 	clz	r0, r5
 8000e26:	2800      	cmp	r0, #0
 8000e28:	d13b      	bne.n	8000ea2 <__divdi3+0x162>
 8000e2a:	1b78      	subs	r0, r7, r5
 8000e2c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e30:	fa1f fc85 	uxth.w	ip, r5
 8000e34:	2201      	movs	r2, #1
 8000e36:	fbb0 f8fe 	udiv	r8, r0, lr
 8000e3a:	0c21      	lsrs	r1, r4, #16
 8000e3c:	fb0e 0718 	mls	r7, lr, r8, r0
 8000e40:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 8000e44:	fb0c f308 	mul.w	r3, ip, r8
 8000e48:	42bb      	cmp	r3, r7
 8000e4a:	d907      	bls.n	8000e5c <__divdi3+0x11c>
 8000e4c:	197f      	adds	r7, r7, r5
 8000e4e:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 8000e52:	d202      	bcs.n	8000e5a <__divdi3+0x11a>
 8000e54:	42bb      	cmp	r3, r7
 8000e56:	f200 80bd 	bhi.w	8000fd4 <__divdi3+0x294>
 8000e5a:	4688      	mov	r8, r1
 8000e5c:	1aff      	subs	r7, r7, r3
 8000e5e:	b2a4      	uxth	r4, r4
 8000e60:	fbb7 f3fe 	udiv	r3, r7, lr
 8000e64:	fb0e 7713 	mls	r7, lr, r3, r7
 8000e68:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8000e6c:	fb0c fc03 	mul.w	ip, ip, r3
 8000e70:	45bc      	cmp	ip, r7
 8000e72:	d907      	bls.n	8000e84 <__divdi3+0x144>
 8000e74:	197f      	adds	r7, r7, r5
 8000e76:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8000e7a:	d202      	bcs.n	8000e82 <__divdi3+0x142>
 8000e7c:	45bc      	cmp	ip, r7
 8000e7e:	f200 80a7 	bhi.w	8000fd0 <__divdi3+0x290>
 8000e82:	460b      	mov	r3, r1
 8000e84:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e88:	e7ad      	b.n	8000de6 <__divdi3+0xa6>
 8000e8a:	4252      	negs	r2, r2
 8000e8c:	ea6f 0606 	mvn.w	r6, r6
 8000e90:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e94:	e75d      	b.n	8000d52 <__divdi3+0x12>
 8000e96:	4240      	negs	r0, r0
 8000e98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e9c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8000ea0:	e754      	b.n	8000d4c <__divdi3+0xc>
 8000ea2:	f1c0 0220 	rsb	r2, r0, #32
 8000ea6:	fa24 f102 	lsr.w	r1, r4, r2
 8000eaa:	fa07 f300 	lsl.w	r3, r7, r0
 8000eae:	4085      	lsls	r5, r0
 8000eb0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eb4:	40d7      	lsrs	r7, r2
 8000eb6:	4319      	orrs	r1, r3
 8000eb8:	fbb7 f2fe 	udiv	r2, r7, lr
 8000ebc:	0c0b      	lsrs	r3, r1, #16
 8000ebe:	fb0e 7712 	mls	r7, lr, r2, r7
 8000ec2:	fa1f fc85 	uxth.w	ip, r5
 8000ec6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8000eca:	fb0c f702 	mul.w	r7, ip, r2
 8000ece:	429f      	cmp	r7, r3
 8000ed0:	fa04 f400 	lsl.w	r4, r4, r0
 8000ed4:	d907      	bls.n	8000ee6 <__divdi3+0x1a6>
 8000ed6:	195b      	adds	r3, r3, r5
 8000ed8:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 8000edc:	d274      	bcs.n	8000fc8 <__divdi3+0x288>
 8000ede:	429f      	cmp	r7, r3
 8000ee0:	d972      	bls.n	8000fc8 <__divdi3+0x288>
 8000ee2:	3a02      	subs	r2, #2
 8000ee4:	442b      	add	r3, r5
 8000ee6:	1bdf      	subs	r7, r3, r7
 8000ee8:	b289      	uxth	r1, r1
 8000eea:	fbb7 f8fe 	udiv	r8, r7, lr
 8000eee:	fb0e 7318 	mls	r3, lr, r8, r7
 8000ef2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ef6:	fb0c f708 	mul.w	r7, ip, r8
 8000efa:	429f      	cmp	r7, r3
 8000efc:	d908      	bls.n	8000f10 <__divdi3+0x1d0>
 8000efe:	195b      	adds	r3, r3, r5
 8000f00:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 8000f04:	d25c      	bcs.n	8000fc0 <__divdi3+0x280>
 8000f06:	429f      	cmp	r7, r3
 8000f08:	d95a      	bls.n	8000fc0 <__divdi3+0x280>
 8000f0a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0e:	442b      	add	r3, r5
 8000f10:	1bd8      	subs	r0, r3, r7
 8000f12:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 8000f16:	e78e      	b.n	8000e36 <__divdi3+0xf6>
 8000f18:	f1c2 0320 	rsb	r3, r2, #32
 8000f1c:	fa2c f103 	lsr.w	r1, ip, r3
 8000f20:	fa0e fe02 	lsl.w	lr, lr, r2
 8000f24:	fa20 f703 	lsr.w	r7, r0, r3
 8000f28:	ea41 0e0e 	orr.w	lr, r1, lr
 8000f2c:	fa08 f002 	lsl.w	r0, r8, r2
 8000f30:	fa28 f103 	lsr.w	r1, r8, r3
 8000f34:	ea4f 451e 	mov.w	r5, lr, lsr #16
 8000f38:	4338      	orrs	r0, r7
 8000f3a:	fbb1 f8f5 	udiv	r8, r1, r5
 8000f3e:	0c03      	lsrs	r3, r0, #16
 8000f40:	fb05 1118 	mls	r1, r5, r8, r1
 8000f44:	fa1f f78e 	uxth.w	r7, lr
 8000f48:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f4c:	fb07 f308 	mul.w	r3, r7, r8
 8000f50:	428b      	cmp	r3, r1
 8000f52:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f56:	d909      	bls.n	8000f6c <__divdi3+0x22c>
 8000f58:	eb11 010e 	adds.w	r1, r1, lr
 8000f5c:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
 8000f60:	d230      	bcs.n	8000fc4 <__divdi3+0x284>
 8000f62:	428b      	cmp	r3, r1
 8000f64:	d92e      	bls.n	8000fc4 <__divdi3+0x284>
 8000f66:	f1a8 0802 	sub.w	r8, r8, #2
 8000f6a:	4471      	add	r1, lr
 8000f6c:	1ac9      	subs	r1, r1, r3
 8000f6e:	b280      	uxth	r0, r0
 8000f70:	fbb1 f3f5 	udiv	r3, r1, r5
 8000f74:	fb05 1113 	mls	r1, r5, r3, r1
 8000f78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f7c:	fb07 f703 	mul.w	r7, r7, r3
 8000f80:	428f      	cmp	r7, r1
 8000f82:	d908      	bls.n	8000f96 <__divdi3+0x256>
 8000f84:	eb11 010e 	adds.w	r1, r1, lr
 8000f88:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000f8c:	d216      	bcs.n	8000fbc <__divdi3+0x27c>
 8000f8e:	428f      	cmp	r7, r1
 8000f90:	d914      	bls.n	8000fbc <__divdi3+0x27c>
 8000f92:	3b02      	subs	r3, #2
 8000f94:	4471      	add	r1, lr
 8000f96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f9a:	1bc9      	subs	r1, r1, r7
 8000f9c:	fba3 890c 	umull	r8, r9, r3, ip
 8000fa0:	4549      	cmp	r1, r9
 8000fa2:	d309      	bcc.n	8000fb8 <__divdi3+0x278>
 8000fa4:	d005      	beq.n	8000fb2 <__divdi3+0x272>
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	e71d      	b.n	8000de6 <__divdi3+0xa6>
 8000faa:	4696      	mov	lr, r2
 8000fac:	e6fe      	b.n	8000dac <__divdi3+0x6c>
 8000fae:	4613      	mov	r3, r2
 8000fb0:	e711      	b.n	8000dd6 <__divdi3+0x96>
 8000fb2:	4094      	lsls	r4, r2
 8000fb4:	4544      	cmp	r4, r8
 8000fb6:	d2f6      	bcs.n	8000fa6 <__divdi3+0x266>
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	e7f4      	b.n	8000fa6 <__divdi3+0x266>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	e7ea      	b.n	8000f96 <__divdi3+0x256>
 8000fc0:	4688      	mov	r8, r1
 8000fc2:	e7a5      	b.n	8000f10 <__divdi3+0x1d0>
 8000fc4:	46c8      	mov	r8, r9
 8000fc6:	e7d1      	b.n	8000f6c <__divdi3+0x22c>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	e78c      	b.n	8000ee6 <__divdi3+0x1a6>
 8000fcc:	4613      	mov	r3, r2
 8000fce:	e70a      	b.n	8000de6 <__divdi3+0xa6>
 8000fd0:	3b02      	subs	r3, #2
 8000fd2:	e757      	b.n	8000e84 <__divdi3+0x144>
 8000fd4:	f1a8 0802 	sub.w	r8, r8, #2
 8000fd8:	442f      	add	r7, r5
 8000fda:	e73f      	b.n	8000e5c <__divdi3+0x11c>

08000fdc <__udivdi3>:
 8000fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d144      	bne.n	800106e <__udivdi3+0x92>
 8000fe4:	428a      	cmp	r2, r1
 8000fe6:	4615      	mov	r5, r2
 8000fe8:	4604      	mov	r4, r0
 8000fea:	d94f      	bls.n	800108c <__udivdi3+0xb0>
 8000fec:	fab2 f782 	clz	r7, r2
 8000ff0:	460e      	mov	r6, r1
 8000ff2:	b14f      	cbz	r7, 8001008 <__udivdi3+0x2c>
 8000ff4:	f1c7 0320 	rsb	r3, r7, #32
 8000ff8:	40b9      	lsls	r1, r7
 8000ffa:	fa20 f603 	lsr.w	r6, r0, r3
 8000ffe:	fa02 f507 	lsl.w	r5, r2, r7
 8001002:	430e      	orrs	r6, r1
 8001004:	fa00 f407 	lsl.w	r4, r0, r7
 8001008:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800100c:	0c23      	lsrs	r3, r4, #16
 800100e:	fbb6 f0fe 	udiv	r0, r6, lr
 8001012:	b2af      	uxth	r7, r5
 8001014:	fb0e 6110 	mls	r1, lr, r0, r6
 8001018:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800101c:	fb07 f100 	mul.w	r1, r7, r0
 8001020:	4299      	cmp	r1, r3
 8001022:	d909      	bls.n	8001038 <__udivdi3+0x5c>
 8001024:	195b      	adds	r3, r3, r5
 8001026:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800102a:	f080 80ec 	bcs.w	8001206 <__udivdi3+0x22a>
 800102e:	4299      	cmp	r1, r3
 8001030:	f240 80e9 	bls.w	8001206 <__udivdi3+0x22a>
 8001034:	3802      	subs	r0, #2
 8001036:	442b      	add	r3, r5
 8001038:	1a5a      	subs	r2, r3, r1
 800103a:	b2a4      	uxth	r4, r4
 800103c:	fbb2 f3fe 	udiv	r3, r2, lr
 8001040:	fb0e 2213 	mls	r2, lr, r3, r2
 8001044:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8001048:	fb07 f703 	mul.w	r7, r7, r3
 800104c:	4297      	cmp	r7, r2
 800104e:	d908      	bls.n	8001062 <__udivdi3+0x86>
 8001050:	1952      	adds	r2, r2, r5
 8001052:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8001056:	f080 80d8 	bcs.w	800120a <__udivdi3+0x22e>
 800105a:	4297      	cmp	r7, r2
 800105c:	f240 80d5 	bls.w	800120a <__udivdi3+0x22e>
 8001060:	3b02      	subs	r3, #2
 8001062:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001066:	2600      	movs	r6, #0
 8001068:	4631      	mov	r1, r6
 800106a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800106e:	428b      	cmp	r3, r1
 8001070:	d847      	bhi.n	8001102 <__udivdi3+0x126>
 8001072:	fab3 f683 	clz	r6, r3
 8001076:	2e00      	cmp	r6, #0
 8001078:	d148      	bne.n	800110c <__udivdi3+0x130>
 800107a:	428b      	cmp	r3, r1
 800107c:	d302      	bcc.n	8001084 <__udivdi3+0xa8>
 800107e:	4282      	cmp	r2, r0
 8001080:	f200 80cd 	bhi.w	800121e <__udivdi3+0x242>
 8001084:	2001      	movs	r0, #1
 8001086:	4631      	mov	r1, r6
 8001088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800108c:	b912      	cbnz	r2, 8001094 <__udivdi3+0xb8>
 800108e:	2501      	movs	r5, #1
 8001090:	fbb5 f5f2 	udiv	r5, r5, r2
 8001094:	fab5 f885 	clz	r8, r5
 8001098:	f1b8 0f00 	cmp.w	r8, #0
 800109c:	d177      	bne.n	800118e <__udivdi3+0x1b2>
 800109e:	1b4a      	subs	r2, r1, r5
 80010a0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80010a4:	b2af      	uxth	r7, r5
 80010a6:	2601      	movs	r6, #1
 80010a8:	fbb2 f0fe 	udiv	r0, r2, lr
 80010ac:	0c23      	lsrs	r3, r4, #16
 80010ae:	fb0e 2110 	mls	r1, lr, r0, r2
 80010b2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80010b6:	fb07 f300 	mul.w	r3, r7, r0
 80010ba:	428b      	cmp	r3, r1
 80010bc:	d907      	bls.n	80010ce <__udivdi3+0xf2>
 80010be:	1949      	adds	r1, r1, r5
 80010c0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80010c4:	d202      	bcs.n	80010cc <__udivdi3+0xf0>
 80010c6:	428b      	cmp	r3, r1
 80010c8:	f200 80ba 	bhi.w	8001240 <__udivdi3+0x264>
 80010cc:	4610      	mov	r0, r2
 80010ce:	1ac9      	subs	r1, r1, r3
 80010d0:	b2a4      	uxth	r4, r4
 80010d2:	fbb1 f3fe 	udiv	r3, r1, lr
 80010d6:	fb0e 1113 	mls	r1, lr, r3, r1
 80010da:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80010de:	fb07 f703 	mul.w	r7, r7, r3
 80010e2:	42a7      	cmp	r7, r4
 80010e4:	d908      	bls.n	80010f8 <__udivdi3+0x11c>
 80010e6:	1964      	adds	r4, r4, r5
 80010e8:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80010ec:	f080 808f 	bcs.w	800120e <__udivdi3+0x232>
 80010f0:	42a7      	cmp	r7, r4
 80010f2:	f240 808c 	bls.w	800120e <__udivdi3+0x232>
 80010f6:	3b02      	subs	r3, #2
 80010f8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80010fc:	4631      	mov	r1, r6
 80010fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001102:	2600      	movs	r6, #0
 8001104:	4630      	mov	r0, r6
 8001106:	4631      	mov	r1, r6
 8001108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800110c:	f1c6 0420 	rsb	r4, r6, #32
 8001110:	fa22 f504 	lsr.w	r5, r2, r4
 8001114:	40b3      	lsls	r3, r6
 8001116:	432b      	orrs	r3, r5
 8001118:	fa20 fc04 	lsr.w	ip, r0, r4
 800111c:	fa01 f706 	lsl.w	r7, r1, r6
 8001120:	fa21 f504 	lsr.w	r5, r1, r4
 8001124:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8001128:	ea4c 0707 	orr.w	r7, ip, r7
 800112c:	fbb5 f8fe 	udiv	r8, r5, lr
 8001130:	0c39      	lsrs	r1, r7, #16
 8001132:	fb0e 5518 	mls	r5, lr, r8, r5
 8001136:	fa1f fc83 	uxth.w	ip, r3
 800113a:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 800113e:	fb0c f108 	mul.w	r1, ip, r8
 8001142:	42a9      	cmp	r1, r5
 8001144:	fa02 f206 	lsl.w	r2, r2, r6
 8001148:	d904      	bls.n	8001154 <__udivdi3+0x178>
 800114a:	18ed      	adds	r5, r5, r3
 800114c:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 8001150:	d367      	bcc.n	8001222 <__udivdi3+0x246>
 8001152:	46a0      	mov	r8, r4
 8001154:	1a6d      	subs	r5, r5, r1
 8001156:	b2bf      	uxth	r7, r7
 8001158:	fbb5 f4fe 	udiv	r4, r5, lr
 800115c:	fb0e 5514 	mls	r5, lr, r4, r5
 8001160:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 8001164:	fb0c fc04 	mul.w	ip, ip, r4
 8001168:	458c      	cmp	ip, r1
 800116a:	d904      	bls.n	8001176 <__udivdi3+0x19a>
 800116c:	18c9      	adds	r1, r1, r3
 800116e:	f104 35ff 	add.w	r5, r4, #4294967295	; 0xffffffff
 8001172:	d35c      	bcc.n	800122e <__udivdi3+0x252>
 8001174:	462c      	mov	r4, r5
 8001176:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 800117a:	ebcc 0101 	rsb	r1, ip, r1
 800117e:	fba4 2302 	umull	r2, r3, r4, r2
 8001182:	4299      	cmp	r1, r3
 8001184:	d348      	bcc.n	8001218 <__udivdi3+0x23c>
 8001186:	d044      	beq.n	8001212 <__udivdi3+0x236>
 8001188:	4620      	mov	r0, r4
 800118a:	2600      	movs	r6, #0
 800118c:	e76c      	b.n	8001068 <__udivdi3+0x8c>
 800118e:	f1c8 0420 	rsb	r4, r8, #32
 8001192:	fa01 f308 	lsl.w	r3, r1, r8
 8001196:	fa05 f508 	lsl.w	r5, r5, r8
 800119a:	fa20 f704 	lsr.w	r7, r0, r4
 800119e:	40e1      	lsrs	r1, r4
 80011a0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80011a4:	431f      	orrs	r7, r3
 80011a6:	fbb1 f6fe 	udiv	r6, r1, lr
 80011aa:	0c3a      	lsrs	r2, r7, #16
 80011ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80011b0:	fa1f fc85 	uxth.w	ip, r5
 80011b4:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 80011b8:	fb0c f206 	mul.w	r2, ip, r6
 80011bc:	429a      	cmp	r2, r3
 80011be:	fa00 f408 	lsl.w	r4, r0, r8
 80011c2:	d907      	bls.n	80011d4 <__udivdi3+0x1f8>
 80011c4:	195b      	adds	r3, r3, r5
 80011c6:	f106 31ff 	add.w	r1, r6, #4294967295	; 0xffffffff
 80011ca:	d237      	bcs.n	800123c <__udivdi3+0x260>
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d935      	bls.n	800123c <__udivdi3+0x260>
 80011d0:	3e02      	subs	r6, #2
 80011d2:	442b      	add	r3, r5
 80011d4:	1a9b      	subs	r3, r3, r2
 80011d6:	b2bf      	uxth	r7, r7
 80011d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80011dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80011e0:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 80011e4:	fb0c f100 	mul.w	r1, ip, r0
 80011e8:	4299      	cmp	r1, r3
 80011ea:	d907      	bls.n	80011fc <__udivdi3+0x220>
 80011ec:	195b      	adds	r3, r3, r5
 80011ee:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80011f2:	d221      	bcs.n	8001238 <__udivdi3+0x25c>
 80011f4:	4299      	cmp	r1, r3
 80011f6:	d91f      	bls.n	8001238 <__udivdi3+0x25c>
 80011f8:	3802      	subs	r0, #2
 80011fa:	442b      	add	r3, r5
 80011fc:	1a5a      	subs	r2, r3, r1
 80011fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8001202:	4667      	mov	r7, ip
 8001204:	e750      	b.n	80010a8 <__udivdi3+0xcc>
 8001206:	4610      	mov	r0, r2
 8001208:	e716      	b.n	8001038 <__udivdi3+0x5c>
 800120a:	460b      	mov	r3, r1
 800120c:	e729      	b.n	8001062 <__udivdi3+0x86>
 800120e:	4613      	mov	r3, r2
 8001210:	e772      	b.n	80010f8 <__udivdi3+0x11c>
 8001212:	40b0      	lsls	r0, r6
 8001214:	4290      	cmp	r0, r2
 8001216:	d2b7      	bcs.n	8001188 <__udivdi3+0x1ac>
 8001218:	1e60      	subs	r0, r4, #1
 800121a:	2600      	movs	r6, #0
 800121c:	e724      	b.n	8001068 <__udivdi3+0x8c>
 800121e:	4630      	mov	r0, r6
 8001220:	e722      	b.n	8001068 <__udivdi3+0x8c>
 8001222:	42a9      	cmp	r1, r5
 8001224:	d995      	bls.n	8001152 <__udivdi3+0x176>
 8001226:	f1a8 0802 	sub.w	r8, r8, #2
 800122a:	441d      	add	r5, r3
 800122c:	e792      	b.n	8001154 <__udivdi3+0x178>
 800122e:	458c      	cmp	ip, r1
 8001230:	d9a0      	bls.n	8001174 <__udivdi3+0x198>
 8001232:	3c02      	subs	r4, #2
 8001234:	4419      	add	r1, r3
 8001236:	e79e      	b.n	8001176 <__udivdi3+0x19a>
 8001238:	4610      	mov	r0, r2
 800123a:	e7df      	b.n	80011fc <__udivdi3+0x220>
 800123c:	460e      	mov	r6, r1
 800123e:	e7c9      	b.n	80011d4 <__udivdi3+0x1f8>
 8001240:	3802      	subs	r0, #2
 8001242:	4429      	add	r1, r5
 8001244:	e743      	b.n	80010ce <__udivdi3+0xf2>
 8001246:	bf00      	nop

08001248 <CmdLED>:
    HAL_IncTick();
    my_Tick();
}

void CmdLED(int mode)
{
 8001248:	b507      	push	{r0, r1, r2, lr}
  uint32_t led,val;
  int rc;
  if(mode != CMD_INTERACTIVE) {
 800124a:	b9f8      	cbnz	r0, 800128c <CmdLED+0x44>
    return;
  }

  rc = fetch_uint32_arg(&led);
 800124c:	4668      	mov	r0, sp
 800124e:	f000 fc1d 	bl	8001a8c <fetch_uint32_arg>
  if(rc) {
 8001252:	b108      	cbz	r0, 8001258 <CmdLED+0x10>
    printf("Missing LED index\n");
 8001254:	480f      	ldr	r0, [pc, #60]	; (8001294 <CmdLED+0x4c>)
 8001256:	e004      	b.n	8001262 <CmdLED+0x1a>
    return;
  }
    
  rc = fetch_uint32_arg(&val);
 8001258:	a801      	add	r0, sp, #4
 800125a:	f000 fc17 	bl	8001a8c <fetch_uint32_arg>
  if(rc) {
 800125e:	b118      	cbz	r0, 8001268 <CmdLED+0x20>
    printf("Missing state value, 0 for Off, 1 for On\n");
 8001260:	480d      	ldr	r0, [pc, #52]	; (8001298 <CmdLED+0x50>)
 8001262:	f003 fe7b 	bl	8004f5c <puts>
    return;
 8001266:	e011      	b.n	800128c <CmdLED+0x44>
  }
  
  if((led < 3) || (led > 10)) {
 8001268:	9900      	ldr	r1, [sp, #0]
 800126a:	1ecb      	subs	r3, r1, #3
 800126c:	2b07      	cmp	r3, #7
 800126e:	d903      	bls.n	8001278 <CmdLED+0x30>
    printf("Led index of %u is out of the range (3..10)\n",
 8001270:	480a      	ldr	r0, [pc, #40]	; (800129c <CmdLED+0x54>)
 8001272:	f003 fe27 	bl	8004ec4 <printf>
	   (unsigned int)led);
    return;
 8001276:	e009      	b.n	800128c <CmdLED+0x44>
 8001278:	4a09      	ldr	r2, [pc, #36]	; (80012a0 <CmdLED+0x58>)
  }

  led -= 3;
  if(val) {
 800127a:	9901      	ldr	r1, [sp, #4]
    printf("Led index of %u is out of the range (3..10)\n",
	   (unsigned int)led);
    return;
  }

  led -= 3;
 800127c:	9300      	str	r3, [sp, #0]
  if(val) {
    BSP_LED_On(LEDs[led]);
 800127e:	5cd0      	ldrb	r0, [r2, r3]
	   (unsigned int)led);
    return;
  }

  led -= 3;
  if(val) {
 8001280:	b111      	cbz	r1, 8001288 <CmdLED+0x40>
    BSP_LED_On(LEDs[led]);
 8001282:	f003 fcfb 	bl	8004c7c <BSP_LED_On>
 8001286:	e001      	b.n	800128c <CmdLED+0x44>
  } else {
    BSP_LED_Off(LEDs[led]);
 8001288:	f003 fd06 	bl	8004c98 <BSP_LED_Off>
  }

} 
 800128c:	b003      	add	sp, #12
 800128e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001292:	bf00      	nop
 8001294:	08009c9c 	.word	0x08009c9c
 8001298:	08009cae 	.word	0x08009cae
 800129c:	08009cd7 	.word	0x08009cd7
 80012a0:	08009e2d 	.word	0x08009e2d

080012a4 <CmdAccel>:

ADD_CMD("led",CmdLED,"<index> <state> Turn off/on LED")

void CmdAccel(int mode)
{
 80012a4:	b507      	push	{r0, r1, r2, lr}
  int16_t xyz[3];

  if(mode != CMD_INTERACTIVE) {
 80012a6:	b958      	cbnz	r0, 80012c0 <CmdAccel+0x1c>
    return;
  }

  BSP_ACCELERO_GetXYZ(xyz);
 80012a8:	4668      	mov	r0, sp
 80012aa:	f003 fd55 	bl	8004d58 <BSP_ACCELERO_GetXYZ>

  printf("Accelerometer returns:\n"
 80012ae:	4806      	ldr	r0, [pc, #24]	; (80012c8 <CmdAccel+0x24>)
 80012b0:	f9bd 1000 	ldrsh.w	r1, [sp]
 80012b4:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 80012b8:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80012bc:	f003 fe02 	bl	8004ec4 <printf>
	 "   Y: %d\n"
	 "   Z: %d\n",
	 xyz[0],xyz[1],xyz[2]);


}
 80012c0:	b003      	add	sp, #12
 80012c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80012c6:	bf00      	nop
 80012c8:	08009d04 	.word	0x08009d04

080012cc <CmdGyro>:

ADD_CMD("accel", CmdAccel,"                Read Accelerometer");

void CmdGyro(int mode)
{
 80012cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  float xyz[3];

  if(mode != CMD_INTERACTIVE) {
 80012ce:	b9f8      	cbnz	r0, 8001310 <CmdGyro+0x44>
    return;
  }

  BSP_GYRO_GetXYZ(xyz);
 80012d0:	a801      	add	r0, sp, #4
 80012d2:	f003 fd49 	bl	8004d68 <BSP_GYRO_GetXYZ>

  printf("Gyroscope returns:\n"
	 "   X: %d\n"
	 "   Y: %d\n"
	 "   Z: %d\n",
	 (int)(xyz[0]*256),
 80012d6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8001318 <CmdGyro+0x4c>
 80012da:	eddd 6a01 	vldr	s13, [sp, #4]
	 (int)(xyz[1]*256),
 80012de:	ed9d 7a02 	vldr	s14, [sp, #8]
	 (int)(xyz[2]*256));
 80012e2:	eddd 7a03 	vldr	s15, [sp, #12]
    return;
  }

  BSP_GYRO_GetXYZ(xyz);

  printf("Gyroscope returns:\n"
 80012e6:	480d      	ldr	r0, [pc, #52]	; (800131c <CmdGyro+0x50>)
	 "   X: %d\n"
	 "   Y: %d\n"
	 "   Z: %d\n",
	 (int)(xyz[0]*256),
 80012e8:	ee66 6a86 	vmul.f32	s13, s13, s12
	 (int)(xyz[1]*256),
 80012ec:	ee27 7a06 	vmul.f32	s14, s14, s12
	 (int)(xyz[2]*256));
 80012f0:	ee67 7a86 	vmul.f32	s15, s15, s12
    return;
  }

  BSP_GYRO_GetXYZ(xyz);

  printf("Gyroscope returns:\n"
 80012f4:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 80012f8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80012fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001300:	ee16 1a90 	vmov	r1, s13
 8001304:	ee17 2a10 	vmov	r2, s14
 8001308:	ee17 3a90 	vmov	r3, s15
 800130c:	f003 fdda 	bl	8004ec4 <printf>
	 "   Y: %d\n"
	 "   Z: %d\n",
	 (int)(xyz[0]*256),
	 (int)(xyz[1]*256),
	 (int)(xyz[2]*256));
}
 8001310:	b005      	add	sp, #20
 8001312:	f85d fb04 	ldr.w	pc, [sp], #4
 8001316:	bf00      	nop
 8001318:	43800000 	.word	0x43800000
 800131c:	08009d37 	.word	0x08009d37

08001320 <CmdButton>:

ADD_CMD("gyro", CmdGyro,"                Read Gyroscope");

void CmdButton(int mode)
{
 8001320:	b508      	push	{r3, lr}
  uint32_t button;

  if(mode != CMD_INTERACTIVE) {
 8001322:	b958      	cbnz	r0, 800133c <CmdButton+0x1c>
    return;
  }

  button = BSP_PB_GetState(BUTTON_USER);
 8001324:	f003 fd0e 	bl	8004d44 <BSP_PB_GetState>
  
  printf("Button is currently: %s\n",
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <CmdButton+0x20>)
 800132a:	4906      	ldr	r1, [pc, #24]	; (8001344 <CmdButton+0x24>)
 800132c:	2800      	cmp	r0, #0
 800132e:	bf18      	it	ne
 8001330:	4619      	movne	r1, r3
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <CmdButton+0x28>)
	 button ? "Pressed" : "Released");

  return;
}
 8001334:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return;
  }

  button = BSP_PB_GetState(BUTTON_USER);
  
  printf("Button is currently: %s\n",
 8001338:	f003 bdc4 	b.w	8004ec4 <printf>
 800133c:	bd08      	pop	{r3, pc}
 800133e:	bf00      	nop
 8001340:	08009d66 	.word	0x08009d66
 8001344:	08009d6e 	.word	0x08009d6e
 8001348:	08009d77 	.word	0x08009d77

0800134c <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 800134c:	b508      	push	{r3, lr}
  BSP_LED_On(LED6);
 800134e:	2003      	movs	r0, #3
 8001350:	f003 fc94 	bl	8004c7c <BSP_LED_On>
  /* Infinite loop */
  while(1)
  {
  }
 8001354:	e7fe      	b.n	8001354 <Error_Handler+0x8>
	...

08001358 <main>:

/* Private function prototypes -----------------------------------------------*/
static void SystemClock_Config(void);

int main(int argc, char **argv)
{
 8001358:	b510      	push	{r4, lr}
 800135a:	b090      	sub	sp, #64	; 0x40
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800135c:	2301      	movs	r3, #1
 800135e:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001360:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001362:	2300      	movs	r3, #0
 8001364:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001366:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800136a:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800136c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 800136e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001370:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001374:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001376:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 8001378:	f001 f8d6 	bl	8002528 <HAL_RCC_OscConfig>
 800137c:	b108      	cbz	r0, 8001382 <main+0x2a>
  {
    Error_Handler();
 800137e:	f7ff ffe5 	bl	800134c <Error_Handler>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001382:	230f      	movs	r3, #15
 8001384:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001386:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 8001388:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800138c:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK)
 800138e:	4621      	mov	r1, r4
 8001390:	a801      	add	r0, sp, #4
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001392:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 8001394:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK)
 8001396:	f001 fbb1 	bl	8002afc <HAL_RCC_ClockConfig>
 800139a:	4604      	mov	r4, r0
 800139c:	2800      	cmp	r0, #0
 800139e:	d1ee      	bne.n	800137e <main+0x26>


  /* Configure the system clock */
  SystemClock_Config();

  HAL_Init();
 80013a0:	f001 fd78 	bl	8002e94 <HAL_Init>

  /* Start the Watchdog */


  TerminalInit();  /* Initialize UART and USB */
 80013a4:	f000 fcaa 	bl	8001cfc <TerminalInit>
  /* Configure the LEDs... */
  for(i=0; i<numLEDs; i++) {
    BSP_LED_Init(LEDs[i]);
 80013a8:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <main+0x70>)
 80013aa:	5d18      	ldrb	r0, [r3, r4]
  /* Start the Watchdog */


  TerminalInit();  /* Initialize UART and USB */
  /* Configure the LEDs... */
  for(i=0; i<numLEDs; i++) {
 80013ac:	3401      	adds	r4, #1
    BSP_LED_Init(LEDs[i]);
 80013ae:	f003 fc31 	bl	8004c14 <BSP_LED_Init>
  /* Start the Watchdog */


  TerminalInit();  /* Initialize UART and USB */
  /* Configure the LEDs... */
  for(i=0; i<numLEDs; i++) {
 80013b2:	2c08      	cmp	r4, #8
 80013b4:	d1f8      	bne.n	80013a8 <main+0x50>
    BSP_LED_Init(LEDs[i]);
  }

  /* Initialize the pushbutton */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 80013b6:	2000      	movs	r0, #0
 80013b8:	4601      	mov	r1, r0
 80013ba:	f003 fc89 	bl	8004cd0 <BSP_PB_Init>
  if(gyroRc != GYRO_OK) {
    printf("Failed to initialize Gyroscope\n");
    Error_Handler();
  }
  */
  my_Init();
 80013be:	f7fe ff4d 	bl	800025c <my_Init>
  
  while(1) 
  {
    TaskInput();
 80013c2:	f000 facd 	bl	8001960 <TaskInput>
  }
 80013c6:	e7fc      	b.n	80013c2 <main+0x6a>
 80013c8:	08009e2d 	.word	0x08009e2d

080013cc <SysTick_Handler>:
  {
  }
}

void SysTick_Handler(void)
{
 80013cc:	b508      	push	{r3, lr}
    HAL_IncTick();
 80013ce:	f001 fd73 	bl	8002eb8 <HAL_IncTick>
    my_Tick();
}
 80013d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void SysTick_Handler(void)
{
    HAL_IncTick();
    my_Tick();
 80013d6:	f7fe bf11 	b.w	80001fc <my_Tick>
	...

080013dc <CmdTest>:
int mytest( int x );

void CmdTest(int action)
{

  if(action==CMD_SHORT_HELP) return;
 80013dc:	2801      	cmp	r0, #1
#include "common.h"

int mytest( int x );

void CmdTest(int action)
{
 80013de:	b508      	push	{r3, lr}

  if(action==CMD_SHORT_HELP) return;
 80013e0:	d00f      	beq.n	8001402 <CmdTest+0x26>
  if(action==CMD_LONG_HELP) {
 80013e2:	2802      	cmp	r0, #2
 80013e4:	d104      	bne.n	80013f0 <CmdTest+0x14>
    printf("testasm\n\n"
 80013e6:	4807      	ldr	r0, [pc, #28]	; (8001404 <CmdTest+0x28>)
	   );

    return;
  }
  printf("ret val = %d\n", mytest( 77  ) );
}
 80013e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void CmdTest(int action)
{

  if(action==CMD_SHORT_HELP) return;
  if(action==CMD_LONG_HELP) {
    printf("testasm\n\n"
 80013ec:	f003 bdb6 	b.w	8004f5c <puts>
	   "This command tests the C to assembler interface\n"
	   );

    return;
  }
  printf("ret val = %d\n", mytest( 77  ) );
 80013f0:	204d      	movs	r0, #77	; 0x4d
 80013f2:	f7fe fef7 	bl	80001e4 <mytest>
}
 80013f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	   "This command tests the C to assembler interface\n"
	   );

    return;
  }
  printf("ret val = %d\n", mytest( 77  ) );
 80013fa:	4601      	mov	r1, r0
 80013fc:	4802      	ldr	r0, [pc, #8]	; (8001408 <CmdTest+0x2c>)
 80013fe:	f003 bd61 	b.w	8004ec4 <printf>
 8001402:	bd08      	pop	{r3, pc}
 8001404:	08009e35 	.word	0x08009e35
 8001408:	08009e6e 	.word	0x08009e6e

0800140c <gpioinitLCD>:
#include "common.h"
uint32_t value;
void functionCmd(uint32_t pin, uint32_t state);

void gpioinitLCD(int mode)
{
 800140c:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Turn on clocks to I/O */
__GPIOD_CLK_ENABLE();
 800140e:	4d16      	ldr	r5, [pc, #88]	; (8001468 <gpioinitLCD+0x5c>)
                       | GPIO_PIN_6 | GPIO_PIN_7  | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10);
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
GPIO_InitStruct.Pull = GPIO_NOPULL;
GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
GPIO_InitStruct.Alternate = 0;
HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001410:	4816      	ldr	r0, [pc, #88]	; (800146c <gpioinitLCD+0x60>)
void functionCmd(uint32_t pin, uint32_t state);

void gpioinitLCD(int mode)
{
/* Turn on clocks to I/O */
__GPIOD_CLK_ENABLE();
 8001412:	696b      	ldr	r3, [r5, #20]
#include "common.h"
uint32_t value;
void functionCmd(uint32_t pin, uint32_t state);

void gpioinitLCD(int mode)
{
 8001414:	b087      	sub	sp, #28
/* Turn on clocks to I/O */
__GPIOD_CLK_ENABLE();
 8001416:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800141a:	616b      	str	r3, [r5, #20]
/* Configure GPIO pins */
GPIO_InitTypeDef  GPIO_InitStruct;
GPIO_InitStruct.Pin = (GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 
                       | GPIO_PIN_6 | GPIO_PIN_7  | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10);
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2400      	movs	r4, #0

/* Configure GPIO pins */
GPIO_InitTypeDef  GPIO_InitStruct;
GPIO_InitStruct.Pin = (GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 
                       | GPIO_PIN_6 | GPIO_PIN_7  | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10);
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141e:	2601      	movs	r6, #1
/* Turn on clocks to I/O */
__GPIOD_CLK_ENABLE();

/* Configure GPIO pins */
GPIO_InitTypeDef  GPIO_InitStruct;
GPIO_InitStruct.Pin = (GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 
 8001420:	f240 73ff 	movw	r3, #2047	; 0x7ff
                       | GPIO_PIN_6 | GPIO_PIN_7  | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10);
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
GPIO_InitStruct.Pull = GPIO_NOPULL;
GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001424:	2703      	movs	r7, #3
GPIO_InitStruct.Alternate = 0;
HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001426:	a901      	add	r1, sp, #4
/* Turn on clocks to I/O */
__GPIOD_CLK_ENABLE();

/* Configure GPIO pins */
GPIO_InitTypeDef  GPIO_InitStruct;
GPIO_InitStruct.Pin = (GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 
 8001428:	9301      	str	r3, [sp, #4]
                       | GPIO_PIN_6 | GPIO_PIN_7  | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10);
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142a:	9602      	str	r6, [sp, #8]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	9403      	str	r4, [sp, #12]
GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800142e:	9704      	str	r7, [sp, #16]
GPIO_InitStruct.Alternate = 0;
 8001430:	9405      	str	r4, [sp, #20]
HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001432:	f001 fdc1 	bl	8002fb8 <HAL_GPIO_Init>


__GPIOA_CLK_ENABLE();
 8001436:	696b      	ldr	r3, [r5, #20]
 8001438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800143c:	616b      	str	r3, [r5, #20]
GPIO_InitStruct.Pin = (GPIO_PIN_10);
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
GPIO_InitStruct.Pull = GPIO_NOPULL;
GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
GPIO_InitStruct.Alternate = 0;
HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143e:	a901      	add	r1, sp, #4


__GPIOA_CLK_ENABLE();

//GPIO_InitTypeDef  GPIO_InitStruct;
GPIO_InitStruct.Pin = (GPIO_PIN_10);
 8001440:	f44f 6580 	mov.w	r5, #1024	; 0x400
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
GPIO_InitStruct.Pull = GPIO_NOPULL;
GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
GPIO_InitStruct.Alternate = 0;
HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001444:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000


__GPIOA_CLK_ENABLE();

//GPIO_InitTypeDef  GPIO_InitStruct;
GPIO_InitStruct.Pin = (GPIO_PIN_10);
 8001448:	9501      	str	r5, [sp, #4]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144a:	9602      	str	r6, [sp, #8]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	9403      	str	r4, [sp, #12]
GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800144e:	9704      	str	r7, [sp, #16]
GPIO_InitStruct.Alternate = 0;
 8001450:	9405      	str	r4, [sp, #20]
HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001452:	f001 fdb1 	bl	8002fb8 <HAL_GPIO_Init>


HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,1);
 8001456:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800145a:	4629      	mov	r1, r5
 800145c:	4632      	mov	r2, r6
 800145e:	f001 fe75 	bl	800314c <HAL_GPIO_WritePin>
return;
}
 8001462:	b007      	add	sp, #28
 8001464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001466:	bf00      	nop
 8001468:	40021000 	.word	0x40021000
 800146c:	48000c00 	.word	0x48000c00

08001470 <monitor>:




void monitor(int mode)
{
 8001470:	b510      	push	{r4, lr}
  if(mode != CMD_INTERACTIVE)
 8001472:	b948      	cbnz	r0, 8001488 <monitor+0x18>
  {
    return;
  }
   
   fetch_uint32_arg(&value);
 8001474:	4c05      	ldr	r4, [pc, #20]	; (800148c <monitor+0x1c>)
 8001476:	4620      	mov	r0, r4
 8001478:	f000 fb08 	bl	8001a8c <fetch_uint32_arg>
   printf("delay value:  %u\n",(unsigned)value);
 800147c:	6821      	ldr	r1, [r4, #0]
 800147e:	4804      	ldr	r0, [pc, #16]	; (8001490 <monitor+0x20>)
  
}
 8001480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  {
    return;
  }
   
   fetch_uint32_arg(&value);
   printf("delay value:  %u\n",(unsigned)value);
 8001484:	f003 bd1e 	b.w	8004ec4 <printf>
 8001488:	bd10      	pop	{r4, pc}
 800148a:	bf00      	nop
 800148c:	20000e14 	.word	0x20000e14
 8001490:	08009e92 	.word	0x08009e92

08001494 <delay1>:
ADD_CMD("gpioinitLCD",gpioinitLCD,"              Initialize GPIO Pins for LCD");


void delay1(int tick)
{
   myTickCount= 0;
 8001494:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <delay1+0x14>)
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
   while(myTickCount < tick)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4282      	cmp	r2, r0
 800149e:	d201      	bcs.n	80014a4 <delay1+0x10>
   {
    asm volatile ("nop\n");
 80014a0:	bf00      	nop
 80014a2:	e7fa      	b.n	800149a <delay1+0x6>
   }
}
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	20000000 	.word	0x20000000

080014ac <delay>:

void delay(int tick1)
{
  for(int data = 0; data < tick1; data++)
 80014ac:	2300      	movs	r3, #0
 80014ae:	4283      	cmp	r3, r0
 80014b0:	da02      	bge.n	80014b8 <delay+0xc>
  {
    asm volatile ("nop\n");
 80014b2:	bf00      	nop
   }
}

void delay(int tick1)
{
  for(int data = 0; data < tick1; data++)
 80014b4:	3301      	adds	r3, #1
 80014b6:	e7fa      	b.n	80014ae <delay+0x2>
  {
    asm volatile ("nop\n");
   }
}
 80014b8:	4770      	bx	lr
	...

080014bc <lcd>:

ADD_CMD("monitor",monitor,"            motorstop<enable><motorstop>");


void lcd(int mode)
{
 80014bc:	b537      	push	{r0, r1, r2, r4, r5, lr}

  uint32_t data;
  char *message;
  fetch_uint32_arg(&data);
 80014be:	4668      	mov	r0, sp
 80014c0:	f000 fae4 	bl	8001a8c <fetch_uint32_arg>
  fetch_string_arg(&message);
 80014c4:	a801      	add	r0, sp, #4
 80014c6:	f000 faf5 	bl	8001ab4 <fetch_string_arg>

  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_10,data);                     //RS
 80014ca:	4814      	ldr	r0, [pc, #80]	; (800151c <lcd+0x60>)
 80014cc:	f89d 2000 	ldrb.w	r2, [sp]
 80014d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014d4:	f001 fe3a 	bl	800314c <HAL_GPIO_WritePin>

  uint32_t temp;

  for(int k=0;message[k];k++)
 80014d8:	2500      	movs	r5, #0
 80014da:	9b01      	ldr	r3, [sp, #4]
 80014dc:	5d5a      	ldrb	r2, [r3, r5]
 80014de:	b1d2      	cbz	r2, 8001516 <lcd+0x5a>
  {
   temp = GPIOD->ODR;
 80014e0:	4c0e      	ldr	r4, [pc, #56]	; (800151c <lcd+0x60>)
 80014e2:	6963      	ldr	r3, [r4, #20]
   temp &= ~0xff;
 80014e4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   temp |= message[k];
 80014e8:	4313      	orrs	r3, r2
   GPIOD->ODR = temp; 
 80014ea:	6163      	str	r3, [r4, #20]
   delay(100);
 80014ec:	2064      	movs	r0, #100	; 0x64
 80014ee:	f7ff ffdd 	bl	80014ac <delay>
   HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,0); 
 80014f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014f6:	2200      	movs	r2, #0
 80014f8:	4620      	mov	r0, r4
 80014fa:	f001 fe27 	bl	800314c <HAL_GPIO_WritePin>
   delay(500);
 80014fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001502:	f7ff ffd3 	bl	80014ac <delay>
   HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,1);
 8001506:	4620      	mov	r0, r4
 8001508:	f44f 7180 	mov.w	r1, #256	; 0x100
 800150c:	2201      	movs	r2, #1
 800150e:	f001 fe1d 	bl	800314c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_10,data);                     //RS

  uint32_t temp;

  for(int k=0;message[k];k++)
 8001512:	3501      	adds	r5, #1
 8001514:	e7e1      	b.n	80014da <lcd+0x1e>
 /* delay(500);
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_9,0); 
  delay(500);
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_9,1);*/         
 
}
 8001516:	b003      	add	sp, #12
 8001518:	bd30      	pop	{r4, r5, pc}
 800151a:	bf00      	nop
 800151c:	48000c00 	.word	0x48000c00

08001520 <functionCmd>:




void functionCmd(uint32_t pin, uint32_t state)
{
 8001520:	460a      	mov	r2, r1
switch(pin)
 8001522:	280a      	cmp	r0, #10
 8001524:	d829      	bhi.n	800157a <functionCmd+0x5a>
 8001526:	e8df f000 	tbb	[pc, r0]
 800152a:	0906      	.short	0x0906
 800152c:	1714110e 	.word	0x1714110e
 8001530:	20281d1a 	.word	0x20281d1a
 8001534:	24          	.byte	0x24
 8001535:	00          	.byte	0x00
{
case 0:
HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0,state);
 8001536:	4812      	ldr	r0, [pc, #72]	; (8001580 <functionCmd+0x60>)
 8001538:	2101      	movs	r1, #1
 800153a:	e001      	b.n	8001540 <functionCmd+0x20>
break;

case 1:
HAL_GPIO_WritePin(GPIOD,GPIO_PIN_1,state);
 800153c:	4810      	ldr	r0, [pc, #64]	; (8001580 <functionCmd+0x60>)
 800153e:	2102      	movs	r1, #2
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	f001 be03 	b.w	800314c <HAL_GPIO_WritePin>
break;

case 2:
HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,state);
 8001546:	480e      	ldr	r0, [pc, #56]	; (8001580 <functionCmd+0x60>)
 8001548:	2104      	movs	r1, #4
 800154a:	e7f9      	b.n	8001540 <functionCmd+0x20>
break;

case 3:
HAL_GPIO_WritePin(GPIOD,GPIO_PIN_3,state);
 800154c:	480c      	ldr	r0, [pc, #48]	; (8001580 <functionCmd+0x60>)
 800154e:	2108      	movs	r1, #8
 8001550:	e7f6      	b.n	8001540 <functionCmd+0x20>
break;

case 4:
HAL_GPIO_WritePin(GPIOD,GPIO_PIN_4,state);
 8001552:	480b      	ldr	r0, [pc, #44]	; (8001580 <functionCmd+0x60>)
 8001554:	2110      	movs	r1, #16
 8001556:	e7f3      	b.n	8001540 <functionCmd+0x20>
break;

case 5:
HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,state);
 8001558:	4809      	ldr	r0, [pc, #36]	; (8001580 <functionCmd+0x60>)
 800155a:	2120      	movs	r1, #32
 800155c:	e7f0      	b.n	8001540 <functionCmd+0x20>
break;

case 6:
HAL_GPIO_WritePin(GPIOD,GPIO_PIN_6,state);
 800155e:	4808      	ldr	r0, [pc, #32]	; (8001580 <functionCmd+0x60>)
 8001560:	2140      	movs	r1, #64	; 0x40
 8001562:	e7ed      	b.n	8001540 <functionCmd+0x20>
break;

case 7:
HAL_GPIO_WritePin(GPIOD,GPIO_PIN_7,state);
 8001564:	4806      	ldr	r0, [pc, #24]	; (8001580 <functionCmd+0x60>)
 8001566:	2180      	movs	r1, #128	; 0x80
 8001568:	e7ea      	b.n	8001540 <functionCmd+0x20>
break;

case 9:
HAL_GPIO_WritePin(GPIOD,GPIO_PIN_9,state);
 800156a:	4805      	ldr	r0, [pc, #20]	; (8001580 <functionCmd+0x60>)
 800156c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001570:	e7e6      	b.n	8001540 <functionCmd+0x20>
break;

case 10:
HAL_GPIO_WritePin(GPIOD,GPIO_PIN_10,state);
 8001572:	4803      	ldr	r0, [pc, #12]	; (8001580 <functionCmd+0x60>)
 8001574:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001578:	e7e2      	b.n	8001540 <functionCmd+0x20>
break;

default:
printf("Enter between 0-10\n");
 800157a:	4802      	ldr	r0, [pc, #8]	; (8001584 <functionCmd+0x64>)
 800157c:	f003 bcee 	b.w	8004f5c <puts>
 8001580:	48000c00 	.word	0x48000c00
 8001584:	08009ea4 	.word	0x08009ea4

08001588 <lcdinit>:
   }
}


void lcdinit(int mode)
{
 8001588:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_10,0);                     //RS   0 means command mode
 800158a:	4c78      	ldr	r4, [pc, #480]	; (800176c <lcdinit+0x1e4>)
 800158c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001590:	4620      	mov	r0, r4
 8001592:	2200      	movs	r2, #0
 8001594:	f001 fdda 	bl	800314c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_9,0);                      //RW   0 means write mode
 8001598:	4620      	mov	r0, r4
 800159a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800159e:	2200      	movs	r2, #0
 80015a0:	f001 fdd4 	bl	800314c <HAL_GPIO_WritePin>
  
  delay(100);
 80015a4:	2064      	movs	r0, #100	; 0x64
 80015a6:	f7ff ff81 	bl	80014ac <delay>

  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,1);                      //Enable
 80015aa:	2201      	movs	r2, #1
 80015ac:	4620      	mov	r0, r4
 80015ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015b2:	f001 fdcb 	bl	800314c <HAL_GPIO_WritePin>

  delay(300);
 80015b6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80015ba:	f7ff ff77 	bl	80014ac <delay>
 //initilaze the lcd in 16*2 mode
  functionCmd(0,0);
 80015be:	2000      	movs	r0, #0
 80015c0:	4601      	mov	r1, r0
 80015c2:	f7ff ffad 	bl	8001520 <functionCmd>
  functionCmd(1,0);
 80015c6:	2001      	movs	r0, #1
 80015c8:	2100      	movs	r1, #0
 80015ca:	f7ff ffa9 	bl	8001520 <functionCmd>
  functionCmd(2,1);
 80015ce:	2002      	movs	r0, #2
 80015d0:	2101      	movs	r1, #1
 80015d2:	f7ff ffa5 	bl	8001520 <functionCmd>
  functionCmd(3,1);
 80015d6:	2003      	movs	r0, #3
 80015d8:	2101      	movs	r1, #1
 80015da:	f7ff ffa1 	bl	8001520 <functionCmd>
  functionCmd(4,1);
 80015de:	2004      	movs	r0, #4
 80015e0:	2101      	movs	r1, #1
 80015e2:	f7ff ff9d 	bl	8001520 <functionCmd>
  functionCmd(5,1);
 80015e6:	2005      	movs	r0, #5
 80015e8:	2101      	movs	r1, #1
 80015ea:	f7ff ff99 	bl	8001520 <functionCmd>
  functionCmd(6,0);
 80015ee:	2006      	movs	r0, #6
 80015f0:	2100      	movs	r1, #0
 80015f2:	f7ff ff95 	bl	8001520 <functionCmd>
  functionCmd(7,0);
 80015f6:	2100      	movs	r1, #0
 80015f8:	2007      	movs	r0, #7
 80015fa:	f7ff ff91 	bl	8001520 <functionCmd>

//latch
  delay(100);
 80015fe:	2064      	movs	r0, #100	; 0x64
 8001600:	f7ff ff54 	bl	80014ac <delay>
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,0);                      //Enable
 8001604:	4620      	mov	r0, r4
 8001606:	f44f 7180 	mov.w	r1, #256	; 0x100
 800160a:	2200      	movs	r2, #0
 800160c:	f001 fd9e 	bl	800314c <HAL_GPIO_WritePin>
  delay(500);
 8001610:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001614:	f7ff ff4a 	bl	80014ac <delay>
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,1); 
 8001618:	2201      	movs	r2, #1
 800161a:	4620      	mov	r0, r4
 800161c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001620:	f001 fd94 	bl	800314c <HAL_GPIO_WritePin>
  delay1(5);
 8001624:	2005      	movs	r0, #5
 8001626:	f7ff ff35 	bl	8001494 <delay1>

//clear the lcd and set the DDRAM address 0 in address counter
  functionCmd(0,1);
 800162a:	2000      	movs	r0, #0
 800162c:	2101      	movs	r1, #1
 800162e:	f7ff ff77 	bl	8001520 <functionCmd>
  functionCmd(1,0);
 8001632:	2001      	movs	r0, #1
 8001634:	2100      	movs	r1, #0
 8001636:	f7ff ff73 	bl	8001520 <functionCmd>
  functionCmd(2,0);
 800163a:	2002      	movs	r0, #2
 800163c:	2100      	movs	r1, #0
 800163e:	f7ff ff6f 	bl	8001520 <functionCmd>
  functionCmd(3,0);
 8001642:	2003      	movs	r0, #3
 8001644:	2100      	movs	r1, #0
 8001646:	f7ff ff6b 	bl	8001520 <functionCmd>
  functionCmd(4,0);
 800164a:	2004      	movs	r0, #4
 800164c:	2100      	movs	r1, #0
 800164e:	f7ff ff67 	bl	8001520 <functionCmd>
  functionCmd(5,0);
 8001652:	2005      	movs	r0, #5
 8001654:	2100      	movs	r1, #0
 8001656:	f7ff ff63 	bl	8001520 <functionCmd>
  functionCmd(6,0);
 800165a:	2006      	movs	r0, #6
 800165c:	2100      	movs	r1, #0
 800165e:	f7ff ff5f 	bl	8001520 <functionCmd>
  functionCmd(7,0);
 8001662:	2100      	movs	r1, #0
 8001664:	2007      	movs	r0, #7
 8001666:	f7ff ff5b 	bl	8001520 <functionCmd>

   //latch                  
  delay(100);
 800166a:	2064      	movs	r0, #100	; 0x64
 800166c:	f7ff ff1e 	bl	80014ac <delay>
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,0); 
 8001670:	4620      	mov	r0, r4
 8001672:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001676:	2200      	movs	r2, #0
 8001678:	f001 fd68 	bl	800314c <HAL_GPIO_WritePin>
  delay(500);
 800167c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001680:	f7ff ff14 	bl	80014ac <delay>
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,1);
 8001684:	2201      	movs	r2, #1
 8001686:	4620      	mov	r0, r4
 8001688:	f44f 7180 	mov.w	r1, #256	; 0x100
 800168c:	f001 fd5e 	bl	800314c <HAL_GPIO_WritePin>
  delay1(5);
 8001690:	2005      	movs	r0, #5
 8001692:	f7ff feff 	bl	8001494 <delay1>

//Display On/Off and display cursor and make it blink
  functionCmd(0,1);
 8001696:	2000      	movs	r0, #0
 8001698:	2101      	movs	r1, #1
 800169a:	f7ff ff41 	bl	8001520 <functionCmd>
  functionCmd(1,1);
 800169e:	2001      	movs	r0, #1
 80016a0:	4601      	mov	r1, r0
 80016a2:	f7ff ff3d 	bl	8001520 <functionCmd>
  functionCmd(2,1);
 80016a6:	2002      	movs	r0, #2
 80016a8:	2101      	movs	r1, #1
 80016aa:	f7ff ff39 	bl	8001520 <functionCmd>
  functionCmd(3,1);
 80016ae:	2003      	movs	r0, #3
 80016b0:	2101      	movs	r1, #1
 80016b2:	f7ff ff35 	bl	8001520 <functionCmd>
  functionCmd(4,0);
 80016b6:	2004      	movs	r0, #4
 80016b8:	2100      	movs	r1, #0
 80016ba:	f7ff ff31 	bl	8001520 <functionCmd>
  functionCmd(5,0);
 80016be:	2005      	movs	r0, #5
 80016c0:	2100      	movs	r1, #0
 80016c2:	f7ff ff2d 	bl	8001520 <functionCmd>
  functionCmd(6,0);
 80016c6:	2006      	movs	r0, #6
 80016c8:	2100      	movs	r1, #0
 80016ca:	f7ff ff29 	bl	8001520 <functionCmd>
  functionCmd(7,0);
 80016ce:	2100      	movs	r1, #0
 80016d0:	2007      	movs	r0, #7
 80016d2:	f7ff ff25 	bl	8001520 <functionCmd>

  //latch
  delay(100);
 80016d6:	2064      	movs	r0, #100	; 0x64
 80016d8:	f7ff fee8 	bl	80014ac <delay>
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,0); 
 80016dc:	4620      	mov	r0, r4
 80016de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016e2:	2200      	movs	r2, #0
 80016e4:	f001 fd32 	bl	800314c <HAL_GPIO_WritePin>
  delay(500);
 80016e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016ec:	f7ff fede 	bl	80014ac <delay>
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,1);
 80016f0:	2201      	movs	r2, #1
 80016f2:	4620      	mov	r0, r4
 80016f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016f8:	f001 fd28 	bl	800314c <HAL_GPIO_WritePin>
  delay1(5);
 80016fc:	2005      	movs	r0, #5
 80016fe:	f7ff fec9 	bl	8001494 <delay1>

//Enter Mode Set
  functionCmd(0,0);
 8001702:	2000      	movs	r0, #0
 8001704:	4601      	mov	r1, r0
 8001706:	f7ff ff0b 	bl	8001520 <functionCmd>
  functionCmd(1,1);
 800170a:	2001      	movs	r0, #1
 800170c:	4601      	mov	r1, r0
 800170e:	f7ff ff07 	bl	8001520 <functionCmd>
  functionCmd(2,1);
 8001712:	2002      	movs	r0, #2
 8001714:	2101      	movs	r1, #1
 8001716:	f7ff ff03 	bl	8001520 <functionCmd>
  functionCmd(3,0);
 800171a:	2003      	movs	r0, #3
 800171c:	2100      	movs	r1, #0
 800171e:	f7ff feff 	bl	8001520 <functionCmd>
  functionCmd(4,0);
 8001722:	2004      	movs	r0, #4
 8001724:	2100      	movs	r1, #0
 8001726:	f7ff fefb 	bl	8001520 <functionCmd>
  functionCmd(5,0);
 800172a:	2005      	movs	r0, #5
 800172c:	2100      	movs	r1, #0
 800172e:	f7ff fef7 	bl	8001520 <functionCmd>
  functionCmd(6,0);
 8001732:	2006      	movs	r0, #6
 8001734:	2100      	movs	r1, #0
 8001736:	f7ff fef3 	bl	8001520 <functionCmd>
  functionCmd(7,0);
 800173a:	2100      	movs	r1, #0
 800173c:	2007      	movs	r0, #7
 800173e:	f7ff feef 	bl	8001520 <functionCmd>

  //latch
  delay(100);
 8001742:	2064      	movs	r0, #100	; 0x64
 8001744:	f7ff feb2 	bl	80014ac <delay>
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,0); 
 8001748:	4620      	mov	r0, r4
 800174a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800174e:	2200      	movs	r2, #0
 8001750:	f001 fcfc 	bl	800314c <HAL_GPIO_WritePin>
  delay(500);
 8001754:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001758:	f7ff fea8 	bl	80014ac <delay>
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,1);
 800175c:	4620      	mov	r0, r4
 800175e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001762:	2201      	movs	r2, #1

  GPIOD->BSRR=0;
  delay(100);
  GPIOD->BRR=1;
  delay(100);*/
}
 8001764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  //latch
  delay(100);
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,0); 
  delay(500);
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,1);
 8001768:	f001 bcf0 	b.w	800314c <HAL_GPIO_WritePin>
 800176c:	48000c00 	.word	0x48000c00

08001770 <clearLCD>:

ADD_CMD("lcdinit",lcdinit,"              Initialize the LCD");


void clearLCD(int mode)
{
 8001770:	b510      	push	{r4, lr}
  if(mode != CMD_INTERACTIVE)
 8001772:	4604      	mov	r4, r0
 8001774:	2800      	cmp	r0, #0
 8001776:	d150      	bne.n	800181a <clearLCD+0xaa>
  {
    return;
  }
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_10,0);                     //RS   0 means command mode
 8001778:	4622      	mov	r2, r4
 800177a:	4828      	ldr	r0, [pc, #160]	; (800181c <clearLCD+0xac>)
 800177c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001780:	f001 fce4 	bl	800314c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_9,0);                      //RW   0 means write mode
 8001784:	4622      	mov	r2, r4
 8001786:	f44f 7100 	mov.w	r1, #512	; 0x200
 800178a:	4824      	ldr	r0, [pc, #144]	; (800181c <clearLCD+0xac>)
 800178c:	f001 fcde 	bl	800314c <HAL_GPIO_WritePin>
  
  delay(100);
 8001790:	2064      	movs	r0, #100	; 0x64
 8001792:	f7ff fe8b 	bl	80014ac <delay>

  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,1);                      //Enable
 8001796:	2201      	movs	r2, #1
 8001798:	f44f 7180 	mov.w	r1, #256	; 0x100
 800179c:	481f      	ldr	r0, [pc, #124]	; (800181c <clearLCD+0xac>)
 800179e:	f001 fcd5 	bl	800314c <HAL_GPIO_WritePin>

  delay(300); 
 80017a2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80017a6:	f7ff fe81 	bl	80014ac <delay>
 
  //clear the lcd and set the DDRAM address 0 in address counter
  functionCmd(0,1);
 80017aa:	4620      	mov	r0, r4
 80017ac:	2101      	movs	r1, #1
 80017ae:	f7ff feb7 	bl	8001520 <functionCmd>
  functionCmd(1,0);
 80017b2:	4621      	mov	r1, r4
 80017b4:	2001      	movs	r0, #1
 80017b6:	f7ff feb3 	bl	8001520 <functionCmd>
  functionCmd(2,0);
 80017ba:	4621      	mov	r1, r4
 80017bc:	2002      	movs	r0, #2
 80017be:	f7ff feaf 	bl	8001520 <functionCmd>
  functionCmd(3,0);
 80017c2:	4621      	mov	r1, r4
 80017c4:	2003      	movs	r0, #3
 80017c6:	f7ff feab 	bl	8001520 <functionCmd>
  functionCmd(4,0);
 80017ca:	4621      	mov	r1, r4
 80017cc:	2004      	movs	r0, #4
 80017ce:	f7ff fea7 	bl	8001520 <functionCmd>
  functionCmd(5,0);
 80017d2:	4621      	mov	r1, r4
 80017d4:	2005      	movs	r0, #5
 80017d6:	f7ff fea3 	bl	8001520 <functionCmd>
  functionCmd(6,0);
 80017da:	4621      	mov	r1, r4
 80017dc:	2006      	movs	r0, #6
 80017de:	f7ff fe9f 	bl	8001520 <functionCmd>
  functionCmd(7,0);
 80017e2:	4621      	mov	r1, r4
 80017e4:	2007      	movs	r0, #7
 80017e6:	f7ff fe9b 	bl	8001520 <functionCmd>

   //latch                  
  delay(100);
 80017ea:	2064      	movs	r0, #100	; 0x64
 80017ec:	f7ff fe5e 	bl	80014ac <delay>
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,0); 
 80017f0:	4622      	mov	r2, r4
 80017f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017f6:	4809      	ldr	r0, [pc, #36]	; (800181c <clearLCD+0xac>)
 80017f8:	f001 fca8 	bl	800314c <HAL_GPIO_WritePin>
  delay(500);
 80017fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001800:	f7ff fe54 	bl	80014ac <delay>
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,1);
 8001804:	4805      	ldr	r0, [pc, #20]	; (800181c <clearLCD+0xac>)
 8001806:	f44f 7180 	mov.w	r1, #256	; 0x100
 800180a:	2201      	movs	r2, #1
 800180c:	f001 fc9e 	bl	800314c <HAL_GPIO_WritePin>
  delay1(5);
 8001810:	2005      	movs	r0, #5
  
}
 8001812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   //latch                  
  delay(100);
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,0); 
  delay(500);
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,1);
  delay1(5);
 8001816:	f7ff be3d 	b.w	8001494 <delay1>
 800181a:	bd10      	pop	{r4, pc}
 800181c:	48000c00 	.word	0x48000c00

08001820 <CmdW>:
	 (unsigned int)(*((uint32_t *)addr)));
}


void CmdW(int mode)
{
 8001820:	b507      	push	{r0, r1, r2, lr}
  uint32_t addr,data;

  if(mode != CMD_INTERACTIVE) return;
 8001822:	b940      	cbnz	r0, 8001836 <CmdW+0x16>

  fetch_uint32_arg(&addr);
 8001824:	4668      	mov	r0, sp
 8001826:	f000 f931 	bl	8001a8c <fetch_uint32_arg>
  fetch_uint32_arg(&data);
 800182a:	a801      	add	r0, sp, #4
 800182c:	f000 f92e 	bl	8001a8c <fetch_uint32_arg>

  *((uint32_t *)addr) = data;
 8001830:	9b00      	ldr	r3, [sp, #0]
 8001832:	9a01      	ldr	r2, [sp, #4]
 8001834:	601a      	str	r2, [r3, #0]
}
 8001836:	b003      	add	sp, #12
 8001838:	f85d fb04 	ldr.w	pc, [sp], #4

0800183c <CmdR>:
#include "common.h"



void CmdR(int mode)
{
 800183c:	b507      	push	{r0, r1, r2, lr}
  uint32_t addr;

  if(mode != CMD_INTERACTIVE) return;
 800183e:	b938      	cbnz	r0, 8001850 <CmdR+0x14>

  fetch_uint32_arg(&addr);
 8001840:	a801      	add	r0, sp, #4
 8001842:	f000 f923 	bl	8001a8c <fetch_uint32_arg>

  printf("0x%08X: 0x%08X\n",(unsigned int)addr, 
 8001846:	9901      	ldr	r1, [sp, #4]
 8001848:	4803      	ldr	r0, [pc, #12]	; (8001858 <CmdR+0x1c>)
 800184a:	680a      	ldr	r2, [r1, #0]
 800184c:	f003 fb3a 	bl	8004ec4 <printf>
	 (unsigned int)(*((uint32_t *)addr)));
}
 8001850:	b003      	add	sp, #12
 8001852:	f85d fb04 	ldr.w	pc, [sp], #4
 8001856:	bf00      	nop
 8001858:	08009f98 	.word	0x08009f98

0800185c <parse>:

#define SEPS " \t\n\v\f\r"

/* Parse the buffer and call commands */ 
int parse(char *buf, int len, const parse_table *table)
{
 800185c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001860:	4615      	mov	r5, r2
  char *p;
  int i,arg;
  const parse_table *t;
  
  /* Check for silly things */
  if(buf == NULL) {
 8001862:	b908      	cbnz	r0, 8001868 <parse+0xc>
    printf("NULL buf pointer passed to %s()\n",__FUNCTION__);
 8001864:	4833      	ldr	r0, [pc, #204]	; (8001934 <parse+0xd8>)
 8001866:	e020      	b.n	80018aa <parse+0x4e>
    return -1;
  }

  if(len==0) {
 8001868:	b909      	cbnz	r1, 800186e <parse+0x12>
    printf("len == 0 in %s\n",__FUNCTION__);
 800186a:	4833      	ldr	r0, [pc, #204]	; (8001938 <parse+0xdc>)
 800186c:	e01d      	b.n	80018aa <parse+0x4e>
    return -1;
  }

  if(table == NULL) {
 800186e:	b122      	cbz	r2, 800187a <parse+0x1e>
  }


  /* Find the first word, by skiping over whitespace */
  i = len;
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 8001870:	4b32      	ldr	r3, [pc, #200]	; (800193c <parse+0xe0>)
 8001872:	1e4c      	subs	r4, r1, #1
 8001874:	681e      	ldr	r6, [r3, #0]
 8001876:	4603      	mov	r3, r0
 8001878:	e00a      	b.n	8001890 <parse+0x34>
    printf("len == 0 in %s\n",__FUNCTION__);
    return -1;
  }

  if(table == NULL) {
    printf("NULL table pointer passed to %s()\n",__FUNCTION__);
 800187a:	4831      	ldr	r0, [pc, #196]	; (8001940 <parse+0xe4>)
 800187c:	e015      	b.n	80018aa <parse+0x4e>
  }


  /* Find the first word, by skiping over whitespace */
  i = len;
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 800187e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001882:	2a00      	cmp	r2, #0
 8001884:	d04d      	beq.n	8001922 <parse+0xc6>
 8001886:	4432      	add	r2, r6
 8001888:	3c01      	subs	r4, #1
 800188a:	7852      	ldrb	r2, [r2, #1]
 800188c:	0712      	lsls	r2, r2, #28
 800188e:	d54b      	bpl.n	8001928 <parse+0xcc>
 8001890:	1c67      	adds	r7, r4, #1
 8001892:	4618      	mov	r0, r3
 8001894:	4621      	mov	r1, r4
 8001896:	d1f2      	bne.n	800187e <parse+0x22>
  if((i==0) || (*buf==0)) {
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d047      	beq.n	800192e <parse+0xd2>
       __FUNCTION__);
#endif
    return -1;
  }
	
  p = strtok(buf,SEPS);
 800189e:	4929      	ldr	r1, [pc, #164]	; (8001944 <parse+0xe8>)
 80018a0:	f003 fc8e 	bl	80051c0 <strtok>
  if(p==NULL) {
 80018a4:	4606      	mov	r6, r0
 80018a6:	b910      	cbnz	r0, 80018ae <parse+0x52>
    /* No token found */
    printf("Unable to find a command in the buffer in %s()\n",__FUNCTION__);
 80018a8:	4827      	ldr	r0, [pc, #156]	; (8001948 <parse+0xec>)
 80018aa:	4928      	ldr	r1, [pc, #160]	; (800194c <parse+0xf0>)
 80018ac:	e037      	b.n	800191e <parse+0xc2>
    return -1;
  }

  arg = CMD_INTERACTIVE;  /* Default to calling action part of function */
  /* Check to see if the user is asking for help */
  if(strcasecmp(p,"help") == 0) {
 80018ae:	4928      	ldr	r1, [pc, #160]	; (8001950 <parse+0xf4>)
 80018b0:	f003 fbd8 	bl	8005064 <strcasecmp>
 80018b4:	4604      	mov	r4, r0
 80018b6:	b9a0      	cbnz	r0, 80018e2 <parse+0x86>
    /* Check to see if the user is asking for more help */
    p = strtok(NULL,SEPS);
 80018b8:	4922      	ldr	r1, [pc, #136]	; (8001944 <parse+0xe8>)
 80018ba:	f003 fc81 	bl	80051c0 <strtok>
    if(p == NULL) {
 80018be:	4606      	mov	r6, r0
 80018c0:	b990      	cbnz	r0, 80018e8 <parse+0x8c>
 80018c2:	350c      	adds	r5, #12
      /* If we don't get any more tokens the user is asking for short
       * help */
      /* Loop over the commands defined and print help for them */
      for(t=table; t->cmdname!=NULL; t++) {
 80018c4:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 80018c8:	b389      	cbz	r1, 800192e <parse+0xd2>
	if(t->help != NULL) {
 80018ca:	f855 2c04 	ldr.w	r2, [r5, #-4]
 80018ce:	b11a      	cbz	r2, 80018d8 <parse+0x7c>
	  printf("%12s -- %s\n",t->cmdname,t->help);
 80018d0:	4820      	ldr	r0, [pc, #128]	; (8001954 <parse+0xf8>)
 80018d2:	f003 faf7 	bl	8004ec4 <printf>
 80018d6:	e7f4      	b.n	80018c2 <parse+0x66>
	} else {
	  t->func(CMD_SHORT_HELP);  /* Call the function for short help */
 80018d8:	f855 3c08 	ldr.w	r3, [r5, #-8]
 80018dc:	2001      	movs	r0, #1
 80018de:	4798      	blx	r3
 80018e0:	e7ef      	b.n	80018c2 <parse+0x66>
    /* No token found */
    printf("Unable to find a command in the buffer in %s()\n",__FUNCTION__);
    return -1;
  }

  arg = CMD_INTERACTIVE;  /* Default to calling action part of function */
 80018e2:	f04f 0800 	mov.w	r8, #0
 80018e6:	e009      	b.n	80018fc <parse+0xa0>
      }
      return 0;
    } else {
      /* The user has asked for long help, call the function
       * for help */
      arg = CMD_LONG_HELP;
 80018e8:	f04f 0802 	mov.w	r8, #2
    }
  }

  /* Now search for token in the table */
  for(t=table; t->cmdname!=NULL; t++) {
 80018ec:	e006      	b.n	80018fc <parse+0xa0>
    if(strcasecmp(p,t->cmdname) == 0) {
 80018ee:	4630      	mov	r0, r6
 80018f0:	4639      	mov	r1, r7
 80018f2:	f003 fbb7 	bl	8005064 <strcasecmp>
 80018f6:	4604      	mov	r4, r0
 80018f8:	b120      	cbz	r0, 8001904 <parse+0xa8>
      arg = CMD_LONG_HELP;
    }
  }

  /* Now search for token in the table */
  for(t=table; t->cmdname!=NULL; t++) {
 80018fa:	350c      	adds	r5, #12
 80018fc:	682f      	ldr	r7, [r5, #0]
 80018fe:	2f00      	cmp	r7, #0
 8001900:	d1f5      	bne.n	80018ee <parse+0x92>
 8001902:	e00a      	b.n	800191a <parse+0xbe>
    if(strcasecmp(p,t->cmdname) == 0) {
      /* Got a match, call the function */
      if(arg == CMD_LONG_HELP) {	
 8001904:	f1b8 0f00 	cmp.w	r8, #0
 8001908:	d003      	beq.n	8001912 <parse+0xb6>
	printf("%s:\n",t->cmdname);
 800190a:	4813      	ldr	r0, [pc, #76]	; (8001958 <parse+0xfc>)
 800190c:	4639      	mov	r1, r7
 800190e:	f003 fad9 	bl	8004ec4 <printf>
      }
      t->func(arg);
 8001912:	686b      	ldr	r3, [r5, #4]
 8001914:	4640      	mov	r0, r8
 8001916:	4798      	blx	r3
      return 0;
 8001918:	e009      	b.n	800192e <parse+0xd2>
    }
  }

  printf("Command `%s' not found. Type `help' for online help\n",p);
 800191a:	4810      	ldr	r0, [pc, #64]	; (800195c <parse+0x100>)
 800191c:	4631      	mov	r1, r6
 800191e:	f003 fad1 	bl	8004ec4 <printf>
  if((i==0) || (*buf==0)) {
#if 0
    printf("End of buffer reached while discarding whitespace in %s()\n",
       __FUNCTION__);
#endif
    return -1;
 8001922:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001926:	e002      	b.n	800192e <parse+0xd2>


  /* Find the first word, by skiping over whitespace */
  i = len;
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
  if((i==0) || (*buf==0)) {
 8001928:	2900      	cmp	r1, #0
 800192a:	d1b8      	bne.n	800189e <parse+0x42>
 800192c:	e7f9      	b.n	8001922 <parse+0xc6>
    }
  }

  printf("Command `%s' not found. Type `help' for online help\n",p);
  return -1;
}
 800192e:	4620      	mov	r0, r4
 8001930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001934:	08009fe3 	.word	0x08009fe3
 8001938:	0800a004 	.word	0x0800a004
 800193c:	2000019c 	.word	0x2000019c
 8001940:	0800a014 	.word	0x0800a014
 8001944:	0800a037 	.word	0x0800a037
 8001948:	0800a03e 	.word	0x0800a03e
 800194c:	0800a0c4 	.word	0x0800a0c4
 8001950:	0800a06e 	.word	0x0800a06e
 8001954:	0800a073 	.word	0x0800a073
 8001958:	0800a07f 	.word	0x0800a07f
 800195c:	0800a084 	.word	0x0800a084

08001960 <TaskInput>:
char input[BUFFER_LEN];
char input_b[BUFFER_LEN];

/* Task to handle input */
void TaskInput(void)
{
 8001960:	b573      	push	{r0, r1, r4, r5, r6, lr}
  static unsigned int saved = 0;
  static char *buf = input;
  static uint32_t printPrompt = 1;

  /* Do we have to print the prompt? */
  if(printPrompt) {
 8001962:	4d3f      	ldr	r5, [pc, #252]	; (8001a60 <TaskInput+0x100>)
 8001964:	682b      	ldr	r3, [r5, #0]
 8001966:	b123      	cbz	r3, 8001972 <TaskInput+0x12>
    printf("ARMON>");
 8001968:	483e      	ldr	r0, [pc, #248]	; (8001a64 <TaskInput+0x104>)
 800196a:	f003 faab 	bl	8004ec4 <printf>
    printPrompt = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	602b      	str	r3, [r5, #0]
  }

  /* Get the next character */
  rc = TerminalReadAnyNonBlock(&c);
 8001972:	f10d 0007 	add.w	r0, sp, #7
 8001976:	f000 fa32 	bl	8001dde <TerminalReadAnyNonBlock>
  if(rc) {
 800197a:	2800      	cmp	r0, #0
 800197c:	d16e      	bne.n	8001a5c <TaskInput+0xfc>
  }

  /* We have a character to process */
  /* printf("Got:'%c' %d\n",c,c); */
  /* Check for simple line control characters */
  if(((c == 010) || (c == 0x7f)) && count) {
 800197e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001982:	2b08      	cmp	r3, #8
 8001984:	d001      	beq.n	800198a <TaskInput+0x2a>
 8001986:	2b7f      	cmp	r3, #127	; 0x7f
 8001988:	d10d      	bne.n	80019a6 <TaskInput+0x46>
 800198a:	4c37      	ldr	r4, [pc, #220]	; (8001a68 <TaskInput+0x108>)
 800198c:	6822      	ldr	r2, [r4, #0]
 800198e:	b152      	cbz	r2, 80019a6 <TaskInput+0x46>
    /* User pressed backspace */
    printf("\010 \010"); /* Obliterate character */
 8001990:	4836      	ldr	r0, [pc, #216]	; (8001a6c <TaskInput+0x10c>)
 8001992:	f003 fa97 	bl	8004ec4 <printf>
    buf--;     /* Then remove it from the buffer */
 8001996:	4a36      	ldr	r2, [pc, #216]	; (8001a70 <TaskInput+0x110>)
 8001998:	6813      	ldr	r3, [r2, #0]
 800199a:	3b01      	subs	r3, #1
 800199c:	6013      	str	r3, [r2, #0]
    count--;   /* Then keep track of how many are left */
 800199e:	6823      	ldr	r3, [r4, #0]
 80019a0:	3b01      	subs	r3, #1
 80019a2:	6023      	str	r3, [r4, #0]
 80019a4:	e05a      	b.n	8001a5c <TaskInput+0xfc>
  } else if(c == '!') { /* '!' repeats the last command */
 80019a6:	2b21      	cmp	r3, #33	; 0x21
 80019a8:	d115      	bne.n	80019d6 <TaskInput+0x76>
    if(saved) {  /* But only if we have something saved */
 80019aa:	4b32      	ldr	r3, [pc, #200]	; (8001a74 <TaskInput+0x114>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d054      	beq.n	8001a5c <TaskInput+0xfc>
      strcpy(input,input_b);  /* Restore the command */
 80019b2:	4c31      	ldr	r4, [pc, #196]	; (8001a78 <TaskInput+0x118>)
 80019b4:	4931      	ldr	r1, [pc, #196]	; (8001a7c <TaskInput+0x11c>)
 80019b6:	4620      	mov	r0, r4
 80019b8:	f003 fb76 	bl	80050a8 <strcpy>
      printf("%s",input);
 80019bc:	4621      	mov	r1, r4
 80019be:	4830      	ldr	r0, [pc, #192]	; (8001a80 <TaskInput+0x120>)
 80019c0:	f003 fa80 	bl	8004ec4 <printf>
      count = strlen(input);
 80019c4:	4620      	mov	r0, r4
 80019c6:	f003 fbcd 	bl	8005164 <strlen>
 80019ca:	4b27      	ldr	r3, [pc, #156]	; (8001a68 <TaskInput+0x108>)
 80019cc:	6018      	str	r0, [r3, #0]
      buf = input+count;
 80019ce:	4b28      	ldr	r3, [pc, #160]	; (8001a70 <TaskInput+0x110>)
 80019d0:	4404      	add	r4, r0
 80019d2:	601c      	str	r4, [r3, #0]
      goto parseme;
 80019d4:	e025      	b.n	8001a22 <TaskInput+0xc2>
    }
  } else if(isprint((unsigned int)c)) {
 80019d6:	4a2b      	ldr	r2, [pc, #172]	; (8001a84 <TaskInput+0x124>)
 80019d8:	6812      	ldr	r2, [r2, #0]
 80019da:	441a      	add	r2, r3
 80019dc:	7852      	ldrb	r2, [r2, #1]
 80019de:	f012 0297 	ands.w	r2, r2, #151	; 0x97
 80019e2:	d012      	beq.n	8001a0a <TaskInput+0xaa>
    /* We are only going to save printable characters */
    if(count >= sizeof(input)) {
 80019e4:	4920      	ldr	r1, [pc, #128]	; (8001a68 <TaskInput+0x108>)
 80019e6:	680a      	ldr	r2, [r1, #0]
 80019e8:	2a4f      	cmp	r2, #79	; 0x4f
      /* We are out of space */
      printf("\x07"); /* Beep */
      return;
    } else {
      *buf++ = c;
 80019ea:	bf9f      	itttt	ls
 80019ec:	4c20      	ldrls	r4, [pc, #128]	; (8001a70 <TaskInput+0x110>)
 80019ee:	6820      	ldrls	r0, [r4, #0]
 80019f0:	7003      	strbls	r3, [r0, #0]
 80019f2:	1c45      	addls	r5, r0, #1
      count++;
 80019f4:	bf97      	itett	ls
 80019f6:	3201      	addls	r2, #1
    }
  } else if(isprint((unsigned int)c)) {
    /* We are only going to save printable characters */
    if(count >= sizeof(input)) {
      /* We are out of space */
      printf("\x07"); /* Beep */
 80019f8:	2007      	movhi	r0, #7
      return;
    } else {
      *buf++ = c;
      count++;
      /* Echo it back to the user */
      printf("%c",c);
 80019fa:	f89d 0007 	ldrbls.w	r0, [sp, #7]
    if(count >= sizeof(input)) {
      /* We are out of space */
      printf("\x07"); /* Beep */
      return;
    } else {
      *buf++ = c;
 80019fe:	6025      	strls	r5, [r4, #0]
      count++;
 8001a00:	bf98      	it	ls
 8001a02:	600a      	strls	r2, [r1, #0]
      /* Echo it back to the user */
      printf("%c",c);
 8001a04:	f003 fa72 	bl	8004eec <putchar>
 8001a08:	e028      	b.n	8001a5c <TaskInput+0xfc>
    }
  } else if(c == '\r') {
 8001a0a:	2b0d      	cmp	r3, #13
 8001a0c:	d126      	bne.n	8001a5c <TaskInput+0xfc>
    /* NULL Terminate anything we have received */
    *buf = '\0';
 8001a0e:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <TaskInput+0x110>)
    /* save current buffer in case we want to re do the command */
    strcpy(input_b,input);
 8001a10:	481a      	ldr	r0, [pc, #104]	; (8001a7c <TaskInput+0x11c>)
      /* Echo it back to the user */
      printf("%c",c);
    }
  } else if(c == '\r') {
    /* NULL Terminate anything we have received */
    *buf = '\0';
 8001a12:	681b      	ldr	r3, [r3, #0]
    /* save current buffer in case we want to re do the command */
    strcpy(input_b,input);
 8001a14:	4918      	ldr	r1, [pc, #96]	; (8001a78 <TaskInput+0x118>)
      /* Echo it back to the user */
      printf("%c",c);
    }
  } else if(c == '\r') {
    /* NULL Terminate anything we have received */
    *buf = '\0';
 8001a16:	701a      	strb	r2, [r3, #0]
    /* save current buffer in case we want to re do the command */
    strcpy(input_b,input);
 8001a18:	f003 fb46 	bl	80050a8 <strcpy>
    saved = 1;
 8001a1c:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <TaskInput+0x114>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	601a      	str	r2, [r3, #0]
  parseme:
    /* The user pressed enter, parse the command */
    printf("\n");
 8001a22:	200a      	movs	r0, #10
 8001a24:	4c12      	ldr	r4, [pc, #72]	; (8001a70 <TaskInput+0x110>)
 8001a26:	f003 fa61 	bl	8004eec <putchar>
    /* Fill the rest of the buffer wil NUL */
    for(i=count; i<BUFFER_LEN; i++) *buf++ = '\0';
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <TaskInput+0x108>)
 8001a2c:	6820      	ldr	r0, [r4, #0]
 8001a2e:	681e      	ldr	r6, [r3, #0]
 8001a30:	4602      	mov	r2, r0
 8001a32:	1a31      	subs	r1, r6, r0
 8001a34:	4411      	add	r1, r2
 8001a36:	294f      	cmp	r1, #79	; 0x4f
 8001a38:	f04f 0100 	mov.w	r1, #0
 8001a3c:	d802      	bhi.n	8001a44 <TaskInput+0xe4>
 8001a3e:	f802 1b01 	strb.w	r1, [r2], #1
 8001a42:	e7f6      	b.n	8001a32 <TaskInput+0xd2>
    count = 0;
 8001a44:	6019      	str	r1, [r3, #0]
    parse(input, sizeof(input), Commands);
 8001a46:	4e0c      	ldr	r6, [pc, #48]	; (8001a78 <TaskInput+0x118>)
 8001a48:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <TaskInput+0x128>)
 8001a4a:	6022      	str	r2, [r4, #0]
 8001a4c:	4630      	mov	r0, r6
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	2150      	movs	r1, #80	; 0x50
 8001a52:	f7ff ff03 	bl	800185c <parse>
    buf = input;
    printPrompt = 1;
 8001a56:	2301      	movs	r3, #1
    printf("\n");
    /* Fill the rest of the buffer wil NUL */
    for(i=count; i<BUFFER_LEN; i++) *buf++ = '\0';
    count = 0;
    parse(input, sizeof(input), Commands);
    buf = input;
 8001a58:	6026      	str	r6, [r4, #0]
    printPrompt = 1;
 8001a5a:	602b      	str	r3, [r5, #0]
  }
}
 8001a5c:	b002      	add	sp, #8
 8001a5e:	bd70      	pop	{r4, r5, r6, pc}
 8001a60:	20000004 	.word	0x20000004
 8001a64:	0800a0b9 	.word	0x0800a0b9
 8001a68:	20000a58 	.word	0x20000a58
 8001a6c:	0800a0c0 	.word	0x0800a0c0
 8001a70:	20000008 	.word	0x20000008
 8001a74:	20000a5c 	.word	0x20000a5c
 8001a78:	20000e68 	.word	0x20000e68
 8001a7c:	20000e18 	.word	0x20000e18
 8001a80:	0800a3b5 	.word	0x0800a3b5
 8001a84:	2000019c 	.word	0x2000019c
 8001a88:	2000000c 	.word	0x2000000c

08001a8c <fetch_uint32_arg>:
  return 0;
}     

/* Fetch an integer argument */
int fetch_uint32_arg(uint32_t *dest)
{
 8001a8c:	b510      	push	{r4, lr}
  char *p;
  p = strtok(NULL,SEPS);
 8001a8e:	4908      	ldr	r1, [pc, #32]	; (8001ab0 <fetch_uint32_arg+0x24>)
  return 0;
}     

/* Fetch an integer argument */
int fetch_uint32_arg(uint32_t *dest)
{
 8001a90:	4604      	mov	r4, r0
  char *p;
  p = strtok(NULL,SEPS);
 8001a92:	2000      	movs	r0, #0
 8001a94:	f003 fb94 	bl	80051c0 <strtok>
  if(p == NULL) {
 8001a98:	b130      	cbz	r0, 8001aa8 <fetch_uint32_arg+0x1c>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = (uint32_t)strtoul(p,NULL,0);
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	460a      	mov	r2, r1
 8001a9e:	f003 fc5d 	bl	800535c <strtoul>
 8001aa2:	6020      	str	r0, [r4, #0]
  return 0;
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	bd10      	pop	{r4, pc}
{
  char *p;
  p = strtok(NULL,SEPS);
  if(p == NULL) {
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
 8001aa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
  
  *dest = (uint32_t)strtoul(p,NULL,0);
  return 0;
}     
 8001aac:	bd10      	pop	{r4, pc}
 8001aae:	bf00      	nop
 8001ab0:	0800a037 	.word	0x0800a037

08001ab4 <fetch_string_arg>:

/* Fetch a string argument */
int fetch_string_arg(char **dest)
{
 8001ab4:	b510      	push	{r4, lr}
  char *p;
  p = strtok(NULL,SEPS);
 8001ab6:	4906      	ldr	r1, [pc, #24]	; (8001ad0 <fetch_string_arg+0x1c>)
  return 0;
}     

/* Fetch a string argument */
int fetch_string_arg(char **dest)
{
 8001ab8:	4604      	mov	r4, r0
  char *p;
  p = strtok(NULL,SEPS);
 8001aba:	2000      	movs	r0, #0
 8001abc:	f003 fb80 	bl	80051c0 <strtok>
  if(p == NULL) {
 8001ac0:	b110      	cbz	r0, 8001ac8 <fetch_string_arg+0x14>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = p;
 8001ac2:	6020      	str	r0, [r4, #0]
  return 0;
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	bd10      	pop	{r4, pc}
{
  char *p;
  p = strtok(NULL,SEPS);
  if(p == NULL) {
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
 8001ac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
  
  *dest = p;
  return 0;
}
 8001acc:	bd10      	pop	{r4, pc}
 8001ace:	bf00      	nop
 8001ad0:	0800a037 	.word	0x0800a037

08001ad4 <DumpBuffer>:

#define BYTES_PER_LINE 16

/* Dump a buffer in HEX with the address as given */
void DumpBuffer(uint8_t *buffer, uint32_t count, uint32_t address)
{
 8001ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ad8:	4680      	mov	r8, r0
 8001ada:	b089      	sub	sp, #36	; 0x24
 8001adc:	4692      	mov	sl, r2
  uint32_t i;
  uint8_t buf[BYTES_PER_LINE+1],*bufp;   /* Buffer to assemble printed chars */
  uint8_t *p,c;

  if(count == 0) return;
 8001ade:	460d      	mov	r5, r1
 8001ae0:	2900      	cmp	r1, #0
 8001ae2:	d044      	beq.n	8001b6e <DumpBuffer+0x9a>
 8001ae4:	ac03      	add	r4, sp, #12
 8001ae6:	eb00 0901 	add.w	r9, r0, r1
 8001aea:	4606      	mov	r6, r0
 8001aec:	4627      	mov	r7, r4
 8001aee:	ebc8 010a 	rsb	r1, r8, sl

  p = buffer;
  bufp = buf;
  /* dump the requested number of bytes in hex. */
  for(i=0; i<count; i++) {
 8001af2:	454e      	cmp	r6, r9
 8001af4:	4431      	add	r1, r6
 8001af6:	ebc8 0306 	rsb	r3, r8, r6
 8001afa:	d025      	beq.n	8001b48 <DumpBuffer+0x74>
    if((i% BYTES_PER_LINE) == 0) {
 8001afc:	f013 0b0f 	ands.w	fp, r3, #15
 8001b00:	d103      	bne.n	8001b0a <DumpBuffer+0x36>
      printf("%08x:",(unsigned int)address);
 8001b02:	481c      	ldr	r0, [pc, #112]	; (8001b74 <DumpBuffer+0xa0>)
 8001b04:	f003 f9de 	bl	8004ec4 <printf>
      bufp = buf;
 8001b08:	463c      	mov	r4, r7
    /* Read the value to print */
    c = *p++;
    address++;

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
 8001b0a:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <DumpBuffer+0xa4>)
    if((i% BYTES_PER_LINE) == 0) {
      printf("%08x:",(unsigned int)address);
      bufp = buf;
    }
    /* Read the value to print */
    c = *p++;
 8001b0c:	f816 1b01 	ldrb.w	r1, [r6], #1
    address++;

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
 8001b10:	681b      	ldr	r3, [r3, #0]
      *bufp++ = c; /* Stick in the character */
    } else {
      *bufp++ = '.';
    }

    printf(" %02x",((unsigned int)c) & 0xff);
 8001b12:	481a      	ldr	r0, [pc, #104]	; (8001b7c <DumpBuffer+0xa8>)
    /* Read the value to print */
    c = *p++;
    address++;

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
 8001b14:	440b      	add	r3, r1
 8001b16:	785b      	ldrb	r3, [r3, #1]
 8001b18:	f013 0f97 	tst.w	r3, #151	; 0x97
      *bufp++ = c; /* Stick in the character */
    } else {
      *bufp++ = '.';
 8001b1c:	bf08      	it	eq
 8001b1e:	222e      	moveq	r2, #46	; 0x2e
 8001b20:	f104 0301 	add.w	r3, r4, #1
    c = *p++;
    address++;

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
      *bufp++ = c; /* Stick in the character */
 8001b24:	bf14      	ite	ne
 8001b26:	7021      	strbne	r1, [r4, #0]
    } else {
      *bufp++ = '.';
 8001b28:	7022      	strbeq	r2, [r4, #0]
 8001b2a:	9301      	str	r3, [sp, #4]
 8001b2c:	461c      	mov	r4, r3
    }

    printf(" %02x",((unsigned int)c) & 0xff);
 8001b2e:	f003 f9c9 	bl	8004ec4 <printf>
    
    /* At end of line ? */
    if((i % BYTES_PER_LINE) == (BYTES_PER_LINE-1)) {
 8001b32:	f1bb 0f0f 	cmp.w	fp, #15
 8001b36:	9b01      	ldr	r3, [sp, #4]
 8001b38:	d1d9      	bne.n	8001aee <DumpBuffer+0x1a>
      *bufp = '\0';  /* NULL terminate buffer */
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	701a      	strb	r2, [r3, #0]

      /* Yes, print buffer */
      printf("  %s\n",buf);
 8001b3e:	4639      	mov	r1, r7
 8001b40:	480f      	ldr	r0, [pc, #60]	; (8001b80 <DumpBuffer+0xac>)
 8001b42:	f003 f9bf 	bl	8004ec4 <printf>
 8001b46:	e7d2      	b.n	8001aee <DumpBuffer+0x1a>
    }

  }

  /* dump out to EOL */
  *bufp='\0';
 8001b48:	2300      	movs	r3, #0
  if(count % BYTES_PER_LINE) {
 8001b4a:	f015 050f 	ands.w	r5, r5, #15
    }

  }

  /* dump out to EOL */
  *bufp='\0';
 8001b4e:	7023      	strb	r3, [r4, #0]
  if(count % BYTES_PER_LINE) {
 8001b50:	d00d      	beq.n	8001b6e <DumpBuffer+0x9a>
 8001b52:	461c      	mov	r4, r3
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 8001b54:	f1c5 0310 	rsb	r3, r5, #16
 8001b58:	429c      	cmp	r4, r3
 8001b5a:	d204      	bcs.n	8001b66 <DumpBuffer+0x92>
      printf("   ");
 8001b5c:	4809      	ldr	r0, [pc, #36]	; (8001b84 <DumpBuffer+0xb0>)
 8001b5e:	f003 f9b1 	bl	8004ec4 <printf>
  }

  /* dump out to EOL */
  *bufp='\0';
  if(count % BYTES_PER_LINE) {
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 8001b62:	3401      	adds	r4, #1
 8001b64:	e7f6      	b.n	8001b54 <DumpBuffer+0x80>
      printf("   ");
    }
    /* Yes, print buffer */
    printf("  %s\n",buf);
 8001b66:	4806      	ldr	r0, [pc, #24]	; (8001b80 <DumpBuffer+0xac>)
 8001b68:	4639      	mov	r1, r7
 8001b6a:	f003 f9ab 	bl	8004ec4 <printf>
  }



}
 8001b6e:	b009      	add	sp, #36	; 0x24
 8001b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b74:	0800a0ca 	.word	0x0800a0ca
 8001b78:	2000019c 	.word	0x2000019c
 8001b7c:	0800a0d0 	.word	0x0800a0d0
 8001b80:	0800a0d6 	.word	0x0800a0d6
 8001b84:	0800a0dc 	.word	0x0800a0dc

08001b88 <CmdDump>:
void CmdDump(int action)
{
  int rc;
  static uint32_t address=0, count=0x100;

  if(action==CMD_SHORT_HELP) return;
 8001b88:	2801      	cmp	r0, #1


}

void CmdDump(int action)
{
 8001b8a:	b538      	push	{r3, r4, r5, lr}
  int rc;
  static uint32_t address=0, count=0x100;

  if(action==CMD_SHORT_HELP) return;
 8001b8c:	d01d      	beq.n	8001bca <CmdDump+0x42>
  if(action==CMD_LONG_HELP) {
 8001b8e:	2802      	cmp	r0, #2
 8001b90:	4c0e      	ldr	r4, [pc, #56]	; (8001bcc <CmdDump+0x44>)
 8001b92:	4d0f      	ldr	r5, [pc, #60]	; (8001bd0 <CmdDump+0x48>)
 8001b94:	d109      	bne.n	8001baa <CmdDump+0x22>
    printf("dump {<address> {<count>}}\n\n"
 8001b96:	480f      	ldr	r0, [pc, #60]	; (8001bd4 <CmdDump+0x4c>)
 8001b98:	f003 f9e0 	bl	8004f5c <puts>
	   "\n"
	   "<count> is the number of bytes to dump to the terminal.\n"
	   "If the count is unspecified uses last count. The default\n"
	   "count is 0x100 bytes.\n\n");

    printf("Current address is 0x%08x, current count is 0x%x\n",
 8001b9c:	6821      	ldr	r1, [r4, #0]
 8001b9e:	682a      	ldr	r2, [r5, #0]
 8001ba0:	480d      	ldr	r0, [pc, #52]	; (8001bd8 <CmdDump+0x50>)
  }

  DumpBuffer((uint8_t *)address, count, address);
  /* Update parameters for next time */
  address = address+count;
}
 8001ba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	   "\n"
	   "<count> is the number of bytes to dump to the terminal.\n"
	   "If the count is unspecified uses last count. The default\n"
	   "count is 0x100 bytes.\n\n");

    printf("Current address is 0x%08x, current count is 0x%x\n",
 8001ba6:	f003 b98d 	b.w	8004ec4 <printf>
	   (unsigned int)address, (unsigned int)count);
    return;
  }

  /* Fetch address, defaut to last address if missing */
  rc = fetch_uint32_arg(&address);
 8001baa:	4620      	mov	r0, r4
 8001bac:	f7ff ff6e 	bl	8001a8c <fetch_uint32_arg>
  if(rc == 0) {
 8001bb0:	b910      	cbnz	r0, 8001bb8 <CmdDump+0x30>
    /* Fetch count, default to last count if missing */
    fetch_uint32_arg(&count);
 8001bb2:	4628      	mov	r0, r5
 8001bb4:	f7ff ff6a 	bl	8001a8c <fetch_uint32_arg>
  }

  DumpBuffer((uint8_t *)address, count, address);
 8001bb8:	6820      	ldr	r0, [r4, #0]
 8001bba:	6829      	ldr	r1, [r5, #0]
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	f7ff ff89 	bl	8001ad4 <DumpBuffer>
  /* Update parameters for next time */
  address = address+count;
 8001bc2:	6823      	ldr	r3, [r4, #0]
 8001bc4:	682a      	ldr	r2, [r5, #0]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	6023      	str	r3, [r4, #0]
 8001bca:	bd38      	pop	{r3, r4, r5, pc}
 8001bcc:	20000a60 	.word	0x20000a60
 8001bd0:	20000010 	.word	0x20000010
 8001bd4:	0800a0e0 	.word	0x0800a0e0
 8001bd8:	0800a278 	.word	0x0800a278

08001bdc <_sbrk_r>:
#include <reent.h>

register char *stack_ptr asm("sp");

void *_sbrk_r(struct _reent *ptr, int incr)
{
 8001bdc:	b508      	push	{r3, lr}
        extern char end asm("end");
        static char *heap_end;
        char *prev_heap_end;

        if (heap_end == 0)
 8001bde:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <_sbrk_r+0x2c>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	b90a      	cbnz	r2, 8001be8 <_sbrk_r+0xc>
                heap_end = &end;
 8001be4:	4a09      	ldr	r2, [pc, #36]	; (8001c0c <_sbrk_r+0x30>)
 8001be6:	601a      	str	r2, [r3, #0]

        prev_heap_end = heap_end;
 8001be8:	6818      	ldr	r0, [r3, #0]
        if (heap_end + incr > stack_ptr)
 8001bea:	466b      	mov	r3, sp
 8001bec:	4401      	add	r1, r0
 8001bee:	4299      	cmp	r1, r3
 8001bf0:	d906      	bls.n	8001c00 <_sbrk_r+0x24>
        {
//              write(1, "Heap and stack collision\n", 25);
//              abort();
                errno = ENOMEM;
 8001bf2:	f003 f8eb 	bl	8004dcc <__errno>
 8001bf6:	230c      	movs	r3, #12
 8001bf8:	6003      	str	r3, [r0, #0]
                return (caddr_t) -1;
 8001bfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bfe:	bd08      	pop	{r3, pc}
        }

        heap_end += incr;
 8001c00:	4b01      	ldr	r3, [pc, #4]	; (8001c08 <_sbrk_r+0x2c>)
 8001c02:	6019      	str	r1, [r3, #0]

        return (caddr_t) prev_heap_end;
}
 8001c04:	bd08      	pop	{r3, pc}
 8001c06:	bf00      	nop
 8001c08:	20000a64 	.word	0x20000a64
 8001c0c:	20001c04 	.word	0x20001c04

08001c10 <_close_r>:

int _close_r(struct _reent *ptr, int file)
{
        return -1;
}
 8001c10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c14:	4770      	bx	lr

08001c16 <_fstat_r>:

int _fstat_r(struct _reent *ptr, int file, struct stat *st)
{
        st->st_mode = S_IFCHR;
 8001c16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c1a:	6053      	str	r3, [r2, #4]
        return 0;
}
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	4770      	bx	lr

08001c20 <_isatty_r>:
int _isatty_r(struct _reent *ptr, int file)
{
        return 1;
}
 8001c20:	2001      	movs	r0, #1
 8001c22:	4770      	bx	lr

08001c24 <_lseek_r>:
_off_t _lseek_r(struct _reent *ptr, int i, off_t j, int p)
{
        return 0;
}
 8001c24:	2000      	movs	r0, #0
 8001c26:	4770      	bx	lr

08001c28 <USBD_CDC_DataIn>:
{
  uint8_t rc;
  uint32_t index=INDEX_USB, tail, count;

  /* Call the original function */
  rc = (*USBDDataIn)(pdev,epnum);
 8001c28:	4b1c      	ldr	r3, [pc, #112]	; (8001c9c <USBD_CDC_DataIn+0x74>)
#endif

#ifdef USE_USB
/* USB IN endpoint Transmission complete Callback */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8001c2a:	b570      	push	{r4, r5, r6, lr}
  uint8_t rc;
  uint32_t index=INDEX_USB, tail, count;

  /* Call the original function */
  rc = (*USBDDataIn)(pdev,epnum);
 8001c2c:	681b      	ldr	r3, [r3, #0]
#endif

#ifdef USE_USB
/* USB IN endpoint Transmission complete Callback */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8001c2e:	4604      	mov	r4, r0
  uint8_t rc;
  uint32_t index=INDEX_USB, tail, count;

  /* Call the original function */
  rc = (*USBDDataIn)(pdev,epnum);
 8001c30:	4798      	blx	r3

  if(pdev == &hUSBDDevice) {
 8001c32:	4b1b      	ldr	r3, [pc, #108]	; (8001ca0 <USBD_CDC_DataIn+0x78>)
 8001c34:	429c      	cmp	r4, r3
{
  uint8_t rc;
  uint32_t index=INDEX_USB, tail, count;

  /* Call the original function */
  rc = (*USBDDataIn)(pdev,epnum);
 8001c36:	4606      	mov	r6, r0

  if(pdev == &hUSBDDevice) {
 8001c38:	d12d      	bne.n	8001c96 <USBD_CDC_DataIn+0x6e>
    /* Update head and tail pointers, we just sent outSending bytes */
    tail = TerminalState[index].outTail;
 8001c3a:	4b1a      	ldr	r3, [pc, #104]	; (8001ca4 <USBD_CDC_DataIn+0x7c>)
 8001c3c:	f8b3 1108 	ldrh.w	r1, [r3, #264]	; 0x108
    count = TerminalState[index].outSending;
 8001c40:	f8b3 210c 	ldrh.w	r2, [r3, #268]	; 0x10c
 8001c44:	b292      	uxth	r2, r2
    TerminalState[index].outTail = TERMINALINCRBY(tail,count);
 8001c46:	fa12 f181 	uxtah	r1, r2, r1
 8001c4a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8001c4e:	f8a3 1108 	strh.w	r1, [r3, #264]	; 0x108
    TerminalState[index].outCount -= count;
 8001c52:	f8b3 110a 	ldrh.w	r1, [r3, #266]	; 0x10a
 8001c56:	1a8a      	subs	r2, r1, r2
 8001c58:	b292      	uxth	r2, r2
 8001c5a:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
    TerminalState[index].outSending = 0;
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c

    /* Re - Trigger output from this buffer */
    tail = TerminalState[index].outTail;
 8001c64:	f8b3 1108 	ldrh.w	r1, [r3, #264]	; 0x108
    count = TerminalState[index].outCount;
 8001c68:	f8b3 210a 	ldrh.w	r2, [r3, #266]	; 0x10a
 8001c6c:	b292      	uxth	r2, r2
    TerminalState[index].outTail = TERMINALINCRBY(tail,count);
    TerminalState[index].outCount -= count;
    TerminalState[index].outSending = 0;

    /* Re - Trigger output from this buffer */
    tail = TerminalState[index].outTail;
 8001c6e:	b289      	uxth	r1, r1
 8001c70:	461c      	mov	r4, r3
    count = TerminalState[index].outCount;
    if(count != 0) {
 8001c72:	b182      	cbz	r2, 8001c96 <USBD_CDC_DataIn+0x6e>
      /* Only allow a transfer to the end of the buffer */
      if((count + tail) >= TERMINALBUFFERSIZE) {
 8001c74:	188b      	adds	r3, r1, r2
 8001c76:	2b7f      	cmp	r3, #127	; 0x7f
	count = TERMINALBUFFERSIZE - tail;
 8001c78:	bf88      	it	hi
 8001c7a:	f1c1 0280 	rsbhi	r2, r1, #128	; 0x80
      }
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8001c7e:	b295      	uxth	r5, r2
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
 8001c80:	4421      	add	r1, r4
    if(count != 0) {
      /* Only allow a transfer to the end of the buffer */
      if((count + tail) >= TERMINALBUFFERSIZE) {
	count = TERMINALBUFFERSIZE - tail;
      }
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8001c82:	3186      	adds	r1, #134	; 0x86
 8001c84:	462a      	mov	r2, r5
 8001c86:	4806      	ldr	r0, [pc, #24]	; (8001ca0 <USBD_CDC_DataIn+0x78>)
 8001c88:	f002 fdb7 	bl	80047fa <USBD_CDC_SetTxBuffer>
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
			   count);
      USBD_CDC_TransmitPacket(&hUSBDDevice);
 8001c8c:	4804      	ldr	r0, [pc, #16]	; (8001ca0 <USBD_CDC_DataIn+0x78>)
 8001c8e:	f002 fdc2 	bl	8004816 <USBD_CDC_TransmitPacket>
      TerminalState[index].outSending = count;
 8001c92:	f8a4 510c 	strh.w	r5, [r4, #268]	; 0x10c
    }
  }
    
  return rc;
}
 8001c96:	4630      	mov	r0, r6
 8001c98:	bd70      	pop	{r4, r5, r6, pc}
 8001c9a:	bf00      	nop
 8001c9c:	200010dc 	.word	0x200010dc
 8001ca0:	20000eb8 	.word	0x20000eb8
 8001ca4:	20000a68 	.word	0x20000a68

08001ca8 <CmdStats>:

#endif

/* Dump the terminal statistics */
void CmdStats(int mode)
{
 8001ca8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t i;
  TerminalStats_t s[INDEX_MAX];

  if(mode != CMD_INTERACTIVE) return;
 8001cac:	4604      	mov	r4, r0

#endif

/* Dump the terminal statistics */
void CmdStats(int mode)
{
 8001cae:	b085      	sub	sp, #20
  uint32_t i;
  TerminalStats_t s[INDEX_MAX];

  if(mode != CMD_INTERACTIVE) return;
 8001cb0:	b9e8      	cbnz	r0, 8001cee <CmdStats+0x46>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cb2:	b672      	cpsid	i

  /* Copy terminal stats to local storage, and reset counters atomincally */
  __disable_irq();
  for(i=0; i<INDEX_MAX; i++) {
    s[i] = TerminalState[i].stats;
 8001cb4:	480f      	ldr	r0, [pc, #60]	; (8001cf4 <CmdStats+0x4c>)
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 8001cb6:	4621      	mov	r1, r4
  if(mode != CMD_INTERACTIVE) return;

  /* Copy terminal stats to local storage, and reset counters atomincally */
  __disable_irq();
  for(i=0; i<INDEX_MAX; i++) {
    s[i] = TerminalState[i].stats;
 8001cb8:	f8d0 6110 	ldr.w	r6, [r0, #272]	; 0x110
 8001cbc:	f8d0 5114 	ldr.w	r5, [r0, #276]	; 0x114
 8001cc0:	f8d0 9118 	ldr.w	r9, [r0, #280]	; 0x118
 8001cc4:	f8d0 811c 	ldr.w	r8, [r0, #284]	; 0x11c
 8001cc8:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 8001ccc:	2214      	movs	r2, #20
 8001cce:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8001cd2:	f003 f8a9 	bl	8004e28 <memset>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001cd6:	b662      	cpsie	i
  }
  __enable_irq();

  /* Display stats for the user */
  for(i=0; i<INDEX_MAX; i++) {
    printf("Terminal #%u:\n"
 8001cd8:	4807      	ldr	r0, [pc, #28]	; (8001cf8 <CmdStats+0x50>)
 8001cda:	f8cd 9000 	str.w	r9, [sp]
 8001cde:	f8cd 8004 	str.w	r8, [sp, #4]
 8001ce2:	9702      	str	r7, [sp, #8]
 8001ce4:	4621      	mov	r1, r4
 8001ce6:	4632      	mov	r2, r6
 8001ce8:	462b      	mov	r3, r5
 8001cea:	f003 f8eb 	bl	8004ec4 <printf>
	   (unsigned int)(s[i].written),
	   (unsigned int)(s[i].receiveTooBig),
	   (unsigned int)(s[i].received));
  }

}
 8001cee:	b005      	add	sp, #20
 8001cf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001cf4:	20000a68 	.word	0x20000a68
 8001cf8:	0800a2c6 	.word	0x0800a2c6

08001cfc <TerminalInit>:
/* Private functions */
uint32_t TerminalOutputBufferWrite(uint32_t index, char *p, uint32_t len);
uint32_t TerminalInputBufferWrite(uint32_t index, char *p, uint32_t len);

void TerminalInit(void)
{
 8001cfc:	b510      	push	{r4, lr}
#ifdef USE_UART
  GPIO_InitTypeDef  GPIO_InitStruct;
#endif

  /* Set all stream I/O to non-buffered */
  setvbuf(stdin, NULL, _IONBF, 0);
 8001cfe:	4c17      	ldr	r4, [pc, #92]	; (8001d5c <TerminalInit+0x60>)
 8001d00:	6823      	ldr	r3, [r4, #0]
 8001d02:	2100      	movs	r1, #0
 8001d04:	6858      	ldr	r0, [r3, #4]
 8001d06:	2202      	movs	r2, #2
 8001d08:	460b      	mov	r3, r1
 8001d0a:	f003 f92f 	bl	8004f6c <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 8001d0e:	6823      	ldr	r3, [r4, #0]
 8001d10:	2100      	movs	r1, #0
 8001d12:	6898      	ldr	r0, [r3, #8]
 8001d14:	2202      	movs	r2, #2
 8001d16:	460b      	mov	r3, r1
 8001d18:	f003 f928 	bl	8004f6c <setvbuf>
  setvbuf(stderr, NULL, _IONBF, 0);
 8001d1c:	6823      	ldr	r3, [r4, #0]
#endif

#ifdef USE_USB
  /* Initialize USB interface */
  /* Init Device Library */
  USBD_Init(&hUSBDDevice, &VCP_Desc, 0);
 8001d1e:	4c10      	ldr	r4, [pc, #64]	; (8001d60 <TerminalInit+0x64>)
#endif

  /* Set all stream I/O to non-buffered */
  setvbuf(stdin, NULL, _IONBF, 0);
  setvbuf(stdout, NULL, _IONBF, 0);
  setvbuf(stderr, NULL, _IONBF, 0);
 8001d20:	68d8      	ldr	r0, [r3, #12]
 8001d22:	2100      	movs	r1, #0
 8001d24:	460b      	mov	r3, r1
 8001d26:	2202      	movs	r2, #2
 8001d28:	f003 f920 	bl	8004f6c <setvbuf>
#endif

#ifdef USE_USB
  /* Initialize USB interface */
  /* Init Device Library */
  USBD_Init(&hUSBDDevice, &VCP_Desc, 0);
 8001d2c:	4620      	mov	r0, r4
 8001d2e:	490d      	ldr	r1, [pc, #52]	; (8001d64 <TerminalInit+0x68>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	f002 f97f 	bl	8004034 <USBD_Init>
  
  /* Add Supported Class */
  /* Save, and replace DataIn callback with our own...*/
  USBDDataIn = USBD_CDC.DataIn;
 8001d36:	490c      	ldr	r1, [pc, #48]	; (8001d68 <TerminalInit+0x6c>)
 8001d38:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <TerminalInit+0x70>)
 8001d3a:	694a      	ldr	r2, [r1, #20]
 8001d3c:	601a      	str	r2, [r3, #0]
  USBD_CDC.DataIn = USBD_CDC_DataIn;
  USBD_RegisterClass(&hUSBDDevice, &USBD_CDC);
 8001d3e:	4620      	mov	r0, r4
  USBD_Init(&hUSBDDevice, &VCP_Desc, 0);
  
  /* Add Supported Class */
  /* Save, and replace DataIn callback with our own...*/
  USBDDataIn = USBD_CDC.DataIn;
  USBD_CDC.DataIn = USBD_CDC_DataIn;
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <TerminalInit+0x74>)
 8001d42:	614b      	str	r3, [r1, #20]
  USBD_RegisterClass(&hUSBDDevice, &USBD_CDC);
 8001d44:	f002 f98b 	bl	800405e <USBD_RegisterClass>
  
  /* Add CDC Interface Class */
  USBD_CDC_RegisterInterface(&hUSBDDevice, &USBD_CDC_fops);
 8001d48:	4620      	mov	r0, r4
 8001d4a:	490a      	ldr	r1, [pc, #40]	; (8001d74 <TerminalInit+0x78>)
 8001d4c:	f002 fd4e 	bl	80047ec <USBD_CDC_RegisterInterface>
  
  /* Start Device Process */
  USBD_Start(&hUSBDDevice);
 8001d50:	4620      	mov	r0, r4
#endif

}
 8001d52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  
  /* Add CDC Interface Class */
  USBD_CDC_RegisterInterface(&hUSBDDevice, &USBD_CDC_fops);
  
  /* Start Device Process */
  USBD_Start(&hUSBDDevice);
 8001d56:	f002 b989 	b.w	800406c <USBD_Start>
 8001d5a:	bf00      	nop
 8001d5c:	200005c8 	.word	0x200005c8
 8001d60:	20000eb8 	.word	0x20000eb8
 8001d64:	20000128 	.word	0x20000128
 8001d68:	2000005c 	.word	0x2000005c
 8001d6c:	200010dc 	.word	0x200010dc
 8001d70:	08001c29 	.word	0x08001c29
 8001d74:	20000168 	.word	0x20000168

08001d78 <TerminalRead>:

/* Attempt to read a block of data from the Terminal buffer
 * return the actual number of bytes read.
 */
uint32_t TerminalRead(uint32_t index, uint8_t *ptr, uint32_t len)
{
 8001d78:	b5f0      	push	{r4, r5, r6, r7, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d7a:	b672      	cpsid	i
 8001d7c:	440a      	add	r2, r1
  /* try to read len characters from the input buffer */

  /* Crticial section begin */
  __disable_irq();
  count = 0;
  while(TerminalState[index].inCount && (count < len)) {
 8001d7e:	460e      	mov	r6, r1
 8001d80:	4f0f      	ldr	r7, [pc, #60]	; (8001dc0 <TerminalRead+0x48>)
 8001d82:	f44f 7592 	mov.w	r5, #292	; 0x124
 8001d86:	4345      	muls	r5, r0
 8001d88:	197c      	adds	r4, r7, r5
 8001d8a:	3480      	adds	r4, #128	; 0x80
 8001d8c:	88a3      	ldrh	r3, [r4, #4]
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	ebc1 0e06 	rsb	lr, r1, r6
 8001d94:	b183      	cbz	r3, 8001db8 <TerminalRead+0x40>
 8001d96:	4296      	cmp	r6, r2
 8001d98:	d00e      	beq.n	8001db8 <TerminalRead+0x40>
    tail   = TerminalState[index].inTail;
 8001d9a:	8863      	ldrh	r3, [r4, #2]
 8001d9c:	b29b      	uxth	r3, r3
    *ptr++ = TerminalState[index].inBuffer[tail];
 8001d9e:	441d      	add	r5, r3
    TerminalState[index].inTail = TERMINALINCR(tail);
 8001da0:	3301      	adds	r3, #1
  /* Crticial section begin */
  __disable_irq();
  count = 0;
  while(TerminalState[index].inCount && (count < len)) {
    tail   = TerminalState[index].inTail;
    *ptr++ = TerminalState[index].inBuffer[tail];
 8001da2:	5d7d      	ldrb	r5, [r7, r5]
 8001da4:	f806 5b01 	strb.w	r5, [r6], #1
    TerminalState[index].inTail = TERMINALINCR(tail);
 8001da8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dac:	8063      	strh	r3, [r4, #2]
    TerminalState[index].inCount--;
 8001dae:	88a3      	ldrh	r3, [r4, #4]
 8001db0:	3b01      	subs	r3, #1
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	80a3      	strh	r3, [r4, #4]
 8001db6:	e7e3      	b.n	8001d80 <TerminalRead+0x8>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001db8:	b662      	cpsie	i
  /* Critical section end */
  __enable_irq();

  return count;

}
 8001dba:	4670      	mov	r0, lr
 8001dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000a68 	.word	0x20000a68

08001dc4 <_read_r>:
}

int _read_r( void *r, int fd, char *ptr, int len )
{
  uint32_t count;
  count = TerminalRead(0, (uint8_t *)ptr, len);
 8001dc4:	4611      	mov	r1, r2
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	461a      	mov	r2, r3
 8001dca:	f7ff bfd5 	b.w	8001d78 <TerminalRead>

08001dce <TerminalReadNonBlock>:

/* Attempt to read a single character from the Terminal buffer(s), return 1
 * if none are available. Return 0 if there is a character available.
 */
int TerminalReadNonBlock(uint32_t index, char *c)
{
 8001dce:	b508      	push	{r3, lr}
  /* Check for a character to be ready */
  if(TerminalRead(index,(uint8_t*)c,1) == 0) {
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f7ff ffd1 	bl	8001d78 <TerminalRead>
    /* Nope, just return */
    return 1;
  }
  return 0;
}
 8001dd6:	fab0 f080 	clz	r0, r0
 8001dda:	0940      	lsrs	r0, r0, #5
 8001ddc:	bd08      	pop	{r3, pc}

08001dde <TerminalReadAnyNonBlock>:

/* Scan through all possible terminal input buffers and return if
 * there is a character available.
 */
int TerminalReadAnyNonBlock(char *c)
{
 8001dde:	4601      	mov	r1, r0
 8001de0:	b508      	push	{r3, lr}
  uint32_t i;
  int rc;

  for(i=0; i<INDEX_MAX; i++) {
    rc = TerminalReadNonBlock(i, c);
 8001de2:	2000      	movs	r0, #0
 8001de4:	f7ff fff3 	bl	8001dce <TerminalReadNonBlock>
    if(rc==0) {
      return rc;
    }
  }
  return 1;
}
 8001de8:	3000      	adds	r0, #0
 8001dea:	bf18      	it	ne
 8001dec:	2001      	movne	r0, #1
 8001dee:	bd08      	pop	{r3, pc}

08001df0 <TerminalOutputBufferWrite>:

/* Write a block to the given terminal buffer, assume interrupts can
 * be disabled.
 */
 uint32_t TerminalOutputBufferWrite(uint32_t index, char *p, uint32_t len)
{
 8001df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001df2:	4e37      	ldr	r6, [pc, #220]	; (8001ed0 <TerminalOutputBufferWrite+0xe0>)
 8001df4:	f44f 7392 	mov.w	r3, #292	; 0x124
#ifdef USE_USB
  uint8_t cdcRc;
#endif
  uint32_t head, tail, count;
  /* Check that our block will ever fit, if not, return fail */
  if(len >= TERMINALBUFFERSIZE) {
 8001df8:	2a7f      	cmp	r2, #127	; 0x7f
    /* Keep track of how many times this happens */
    TerminalState[index].stats.writeTooBig++;
 8001dfa:	fb03 6300 	mla	r3, r3, r0, r6
#ifdef USE_USB
  uint8_t cdcRc;
#endif
  uint32_t head, tail, count;
  /* Check that our block will ever fit, if not, return fail */
  if(len >= TERMINALBUFFERSIZE) {
 8001dfe:	d906      	bls.n	8001e0e <TerminalOutputBufferWrite+0x1e>
    /* Keep track of how many times this happens */
    TerminalState[index].stats.writeTooBig++;
 8001e00:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001e04:	3201      	adds	r2, #1
 8001e06:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    return 1;
 8001e0a:	2001      	movs	r0, #1
 8001e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }

  if((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {
 8001e0e:	f8b3 410a 	ldrh.w	r4, [r3, #266]	; 0x10a
 8001e12:	fa12 f484 	uxtah	r4, r2, r4
 8001e16:	2c7f      	cmp	r4, #127	; 0x7f
    /* Keep track of how many times we block */
    TerminalState[index].stats.writeBlocked++;
 8001e18:	bf82      	ittt	hi
 8001e1a:	f8d3 4114 	ldrhi.w	r4, [r3, #276]	; 0x114
 8001e1e:	3401      	addhi	r4, #1
 8001e20:	f8c3 4114 	strhi.w	r4, [r3, #276]	; 0x114
  }

  /* Block until there is room in the buffer */
  while((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {} 
 8001e24:	f44f 7392 	mov.w	r3, #292	; 0x124
 8001e28:	fb03 6300 	mla	r3, r3, r0, r6
 8001e2c:	f8b3 410a 	ldrh.w	r4, [r3, #266]	; 0x10a
 8001e30:	fa12 f484 	uxtah	r4, r2, r4
 8001e34:	2c7f      	cmp	r4, #127	; 0x7f
 8001e36:	d8f5      	bhi.n	8001e24 <TerminalOutputBufferWrite+0x34>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e38:	b672      	cpsid	i

  /* Critical section begin */
  __disable_irq();
  /* Copy characters into the buffer */
  TerminalState[index].stats.written += len;  /* gather statistics */
 8001e3a:	f8d3 4118 	ldr.w	r4, [r3, #280]	; 0x118
 8001e3e:	4414      	add	r4, r2
 8001e40:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
 8001e44:	440a      	add	r2, r1
  while((len != 0) 
 8001e46:	4291      	cmp	r1, r2
 8001e48:	d01c      	beq.n	8001e84 <TerminalOutputBufferWrite+0x94>
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 8001e4a:	f44f 7392 	mov.w	r3, #292	; 0x124
 8001e4e:	fb03 6300 	mla	r3, r3, r0, r6
 8001e52:	f503 7584 	add.w	r5, r3, #264	; 0x108
 8001e56:	886c      	ldrh	r4, [r5, #2]
 8001e58:	b2a4      	uxth	r4, r4
 8001e5a:	2c7f      	cmp	r4, #127	; 0x7f
 8001e5c:	d812      	bhi.n	8001e84 <TerminalOutputBufferWrite+0x94>
    head = TerminalState[index].outHead;
 8001e5e:	f8b3 4106 	ldrh.w	r4, [r3, #262]	; 0x106
    TerminalState[index].outBuffer[head] = *p++;
 8001e62:	f811 eb01 	ldrb.w	lr, [r1], #1
  __disable_irq();
  /* Copy characters into the buffer */
  TerminalState[index].stats.written += len;  /* gather statistics */
  while((len != 0) 
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
    head = TerminalState[index].outHead;
 8001e66:	b2a4      	uxth	r4, r4
 8001e68:	f503 7780 	add.w	r7, r3, #256	; 0x100
    TerminalState[index].outBuffer[head] = *p++;
 8001e6c:	4423      	add	r3, r4
    TerminalState[index].outHead = TERMINALINCR(head);
 8001e6e:	3401      	adds	r4, #1
 8001e70:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8001e74:	80fc      	strh	r4, [r7, #6]
  /* Copy characters into the buffer */
  TerminalState[index].stats.written += len;  /* gather statistics */
  while((len != 0) 
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
    head = TerminalState[index].outHead;
    TerminalState[index].outBuffer[head] = *p++;
 8001e76:	f883 e086 	strb.w	lr, [r3, #134]	; 0x86
    TerminalState[index].outHead = TERMINALINCR(head);
    TerminalState[index].outCount++;
 8001e7a:	886b      	ldrh	r3, [r5, #2]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	806b      	strh	r3, [r5, #2]
 8001e82:	e7e0      	b.n	8001e46 <TerminalOutputBufferWrite+0x56>
    len--;
  }
  
  /* Trigger output from this buffer */
  tail = TerminalState[index].outTail;
 8001e84:	f44f 7392 	mov.w	r3, #292	; 0x124
 8001e88:	fb03 6300 	mla	r3, r3, r0, r6
 8001e8c:	f8b3 2108 	ldrh.w	r2, [r3, #264]	; 0x108
 8001e90:	b295      	uxth	r5, r2
  count = TerminalState[index].outCount;
 8001e92:	f8b3 210a 	ldrh.w	r2, [r3, #266]	; 0x10a
 8001e96:	b292      	uxth	r2, r2
  /* Only allow a transfer to the end of the buffer */
  if((count + tail) >= TERMINALBUFFERSIZE) {
 8001e98:	1953      	adds	r3, r2, r5
 8001e9a:	2b7f      	cmp	r3, #127	; 0x7f
    count = TERMINALBUFFERSIZE - tail;
 8001e9c:	bf88      	it	hi
 8001e9e:	f1c5 0280 	rsbhi	r2, r5, #128	; 0x80
  }
  switch(index) {
 8001ea2:	b990      	cbnz	r0, 8001eca <TerminalOutputBufferWrite+0xda>
    }
    break;
#endif
#ifdef USE_USB
  case INDEX_USB: /* USB */
    if(hUSBDDevice.dev_state == USBD_STATE_CONFIGURED) {
 8001ea4:	4f0b      	ldr	r7, [pc, #44]	; (8001ed4 <TerminalOutputBufferWrite+0xe4>)
 8001ea6:	f897 31fc 	ldrb.w	r3, [r7, #508]	; 0x1fc
 8001eaa:	2b03      	cmp	r3, #3
 8001eac:	d10d      	bne.n	8001eca <TerminalOutputBufferWrite+0xda>
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8001eae:	b294      	uxth	r4, r2
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
 8001eb0:	1971      	adds	r1, r6, r5
    break;
#endif
#ifdef USE_USB
  case INDEX_USB: /* USB */
    if(hUSBDDevice.dev_state == USBD_STATE_CONFIGURED) {
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8001eb2:	4638      	mov	r0, r7
 8001eb4:	3186      	adds	r1, #134	; 0x86
 8001eb6:	4622      	mov	r2, r4
 8001eb8:	f002 fc9f 	bl	80047fa <USBD_CDC_SetTxBuffer>
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
			   count);
      cdcRc = USBD_CDC_TransmitPacket(&hUSBDDevice);
 8001ebc:	4638      	mov	r0, r7
 8001ebe:	f002 fcaa 	bl	8004816 <USBD_CDC_TransmitPacket>
      if(cdcRc == USBD_OK) {
 8001ec2:	b910      	cbnz	r0, 8001eca <TerminalOutputBufferWrite+0xda>
	/* CDC was not busy, and we are now sending */
	TerminalState[index].outSending = count;
 8001ec4:	4b02      	ldr	r3, [pc, #8]	; (8001ed0 <TerminalOutputBufferWrite+0xe0>)
 8001ec6:	f8a3 410c 	strh.w	r4, [r3, #268]	; 0x10c
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001eca:	b662      	cpsie	i
 8001ecc:	2000      	movs	r0, #0
    

  /* Critical section end */
  __enable_irq();
  return 0;
}
 8001ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ed0:	20000a68 	.word	0x20000a68
 8001ed4:	20000eb8 	.word	0x20000eb8

08001ed8 <_write_r>:
#endif

}

int _write_r(void *reent, int fd, char *ptr, size_t len)
{
 8001ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eda:	461d      	mov	r5, r3
 8001edc:	4614      	mov	r4, r2
 8001ede:	18d7      	adds	r7, r2, r3
  uint32_t count;
  /* Frob buffer to add appropriate carriage returns and newlines */
  count = len;
  while(count != 0) {
 8001ee0:	42bc      	cmp	r4, r7
 8001ee2:	4626      	mov	r6, r4
 8001ee4:	d00f      	beq.n	8001f06 <_write_r+0x2e>
    if(*ptr == '\n') {
 8001ee6:	7833      	ldrb	r3, [r6, #0]
 8001ee8:	2b0a      	cmp	r3, #10
 8001eea:	f104 0401 	add.w	r4, r4, #1
 8001eee:	d104      	bne.n	8001efa <_write_r+0x22>
      /* XXX handle buffer overflow */
#ifdef USE_UART
      TerminalOutputBufferWrite(INDEX_UART,"\r",1);
#endif
#ifdef USE_USB
      TerminalOutputBufferWrite(INDEX_USB,"\r",1);
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	4906      	ldr	r1, [pc, #24]	; (8001f0c <_write_r+0x34>)
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f7ff ff7b 	bl	8001df0 <TerminalOutputBufferWrite>
    }
#ifdef USE_UART
    TerminalOutputBufferWrite(INDEX_UART,ptr,1);
#endif
#ifdef USE_USB
    TerminalOutputBufferWrite(INDEX_USB,ptr,1);
 8001efa:	4631      	mov	r1, r6
 8001efc:	2201      	movs	r2, #1
 8001efe:	2000      	movs	r0, #0
 8001f00:	f7ff ff76 	bl	8001df0 <TerminalOutputBufferWrite>
 8001f04:	e7ec      	b.n	8001ee0 <_write_r+0x8>
    /* Transfer error in transmission process */
    Error_Handler();
  }
#endif
  return len;
}
 8001f06:	4628      	mov	r0, r5
 8001f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	0800a03c 	.word	0x0800a03c

08001f10 <TerminalInputBufferWrite>:
  __enable_irq();
  return 0;
}

uint32_t TerminalInputBufferWrite(uint32_t index, char *p, uint32_t len)
{
 8001f10:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t head;

  /* Critical Section begin */
  //__disable_irq();
  /* Check that our block will fit, if not, return fail */
  if((TerminalState[index].inCount + len) >= TERMINALBUFFERSIZE) {
 8001f12:	4d1a      	ldr	r5, [pc, #104]	; (8001f7c <TerminalInputBufferWrite+0x6c>)
 8001f14:	f44f 7392 	mov.w	r3, #292	; 0x124
 8001f18:	fb03 5300 	mla	r3, r3, r0, r5
 8001f1c:	f8b3 4084 	ldrh.w	r4, [r3, #132]	; 0x84
 8001f20:	fa12 f484 	uxtah	r4, r2, r4
 8001f24:	2c7f      	cmp	r4, #127	; 0x7f
 8001f26:	d906      	bls.n	8001f36 <TerminalInputBufferWrite+0x26>
    //__enable_irq();
    TerminalState[index].stats.receiveTooBig++;
 8001f28:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8001f2c:	3201      	adds	r2, #1
 8001f2e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    return 1;
 8001f32:	2001      	movs	r0, #1
 8001f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
  /* Copy characters into the buffer */
  TerminalState[index].stats.received += len;
 8001f36:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8001f3a:	4414      	add	r4, r2
 8001f3c:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
 8001f40:	440a      	add	r2, r1
  while(len != 0) {
 8001f42:	4291      	cmp	r1, r2
 8001f44:	d017      	beq.n	8001f76 <TerminalInputBufferWrite+0x66>
    head = TerminalState[index].inHead;
 8001f46:	f44f 7492 	mov.w	r4, #292	; 0x124
 8001f4a:	4344      	muls	r4, r0
 8001f4c:	192f      	adds	r7, r5, r4
    TerminalState[index].inBuffer[head] = *p++;
 8001f4e:	f811 eb01 	ldrb.w	lr, [r1], #1
    return 1;
  }
  /* Copy characters into the buffer */
  TerminalState[index].stats.received += len;
  while(len != 0) {
    head = TerminalState[index].inHead;
 8001f52:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8001f56:	b29b      	uxth	r3, r3
    TerminalState[index].inBuffer[head] = *p++;
 8001f58:	441c      	add	r4, r3
    TerminalState[index].inHead = TERMINALINCR(head);
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f60:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
    TerminalState[index].inCount++;
 8001f64:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
  }
  /* Copy characters into the buffer */
  TerminalState[index].stats.received += len;
  while(len != 0) {
    head = TerminalState[index].inHead;
    TerminalState[index].inBuffer[head] = *p++;
 8001f68:	f805 e004 	strb.w	lr, [r5, r4]
    TerminalState[index].inHead = TERMINALINCR(head);
    TerminalState[index].inCount++;
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8001f74:	e7e5      	b.n	8001f42 <TerminalInputBufferWrite+0x32>
    len--;
  }
  
  /* Critical section end */
  //__enable_irq();
  return 0;
 8001f76:	2000      	movs	r0, #0
}
 8001f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000a68 	.word	0x20000a68

08001f80 <USB_LP_CAN_RX0_IRQHandler>:
void USB_LP_CAN_RX0_IRQHandler(void)
#elif defined (USE_USB_INTERRUPT_REMAPPED)
void USB_LP_IRQHandler(void)
#endif
{
  HAL_PCD_IRQHandler(&hpcd);
 8001f80:	4801      	ldr	r0, [pc, #4]	; (8001f88 <USB_LP_CAN_RX0_IRQHandler+0x8>)
 8001f82:	f001 bd0c 	b.w	800399e <HAL_PCD_IRQHandler>
 8001f86:	bf00      	nop
 8001f88:	200010e0 	.word	0x200010e0

08001f8c <Uncompress>:

/* Uncompress a name, and return a pointer to a static buffer
   containging the name.
*/
static const char *Uncompress(char *str)
{
 8001f8c:	b570      	push	{r4, r5, r6, lr}
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 8001f8e:	4b1b      	ldr	r3, [pc, #108]	; (8001ffc <Uncompress+0x70>)

/* Uncompress a name, and return a pointer to a static buffer
   containging the name.
*/
static const char *Uncompress(char *str)
{
 8001f90:	b08a      	sub	sp, #40	; 0x28
 8001f92:	4605      	mov	r5, r0
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 8001f94:	466a      	mov	r2, sp
 8001f96:	f103 0620 	add.w	r6, r3, #32
 8001f9a:	6818      	ldr	r0, [r3, #0]
 8001f9c:	6859      	ldr	r1, [r3, #4]
 8001f9e:	4614      	mov	r4, r2
 8001fa0:	c403      	stmia	r4!, {r0, r1}
 8001fa2:	3308      	adds	r3, #8
 8001fa4:	42b3      	cmp	r3, r6
 8001fa6:	4622      	mov	r2, r4
 8001fa8:	d1f7      	bne.n	8001f9a <Uncompress+0xe>
 8001faa:	6818      	ldr	r0, [r3, #0]
 8001fac:	889b      	ldrh	r3, [r3, #4]
 8001fae:	6020      	str	r0, [r4, #0]
  uint32_t i,bits;
  uint32_t data;
  char c;

  /* Prime the data pump */
  data = (uint8_t)(*str++);
 8001fb0:	4629      	mov	r1, r5
/* Uncompress a name, and return a pointer to a static buffer
   containging the name.
*/
static const char *Uncompress(char *str)
{
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 8001fb2:	80a3      	strh	r3, [r4, #4]
  uint32_t i,bits;
  uint32_t data;
  char c;

  /* Prime the data pump */
  data = (uint8_t)(*str++);
 8001fb4:	f811 2b02 	ldrb.w	r2, [r1], #2
  data <<= 8;
  data |= (uint8_t)(*str++);
 8001fb8:	786b      	ldrb	r3, [r5, #1]
 8001fba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  bits = 0;
  i = 0;
  //printf("bits: %u, data: %06x\n",(unsigned)bits, (unsigned)data);
  while((data & (0x3f << 10)) != 0) {
 8001fbe:	2200      	movs	r2, #0

  /* Prime the data pump */
  data = (uint8_t)(*str++);
  data <<= 8;
  data |= (uint8_t)(*str++);
  bits = 0;
 8001fc0:	4614      	mov	r4, r2
  i = 0;
  //printf("bits: %u, data: %06x\n",(unsigned)bits, (unsigned)data);
  while((data & (0x3f << 10)) != 0) {
 8001fc2:	f413 457c 	ands.w	r5, r3, #64512	; 0xfc00
 8001fc6:	480e      	ldr	r0, [pc, #56]	; (8002000 <Uncompress+0x74>)
 8001fc8:	d014      	beq.n	8001ff4 <Uncompress+0x68>
    data <<= 6;
 8001fca:	019b      	lsls	r3, r3, #6
    data &= 0x3fffff;
 8001fcc:	f3c3 0315 	ubfx	r3, r3, #0, #22
    c = decoderRing[(data>>16)-1];
 8001fd0:	ad0a      	add	r5, sp, #40	; 0x28
 8001fd2:	eb05 4513 	add.w	r5, r5, r3, lsr #16
    buf[i++] = c;
 8001fd6:	f815 5c29 	ldrb.w	r5, [r5, #-41]
 8001fda:	5485      	strb	r5, [r0, r2]
    /* keep track of how many bits we have used */
    bits += 6;
 8001fdc:	1da0      	adds	r0, r4, #6
    //printf("bits: %u, data: %06x\n",(unsigned)bits, (unsigned)data);
    /* Once we have consumed at least 8 bits, fill in the bottom */
    if(bits >= 8) {
 8001fde:	2807      	cmp	r0, #7
      bits -= 8;
 8001fe0:	bf81      	itttt	hi
 8001fe2:	1ea0      	subhi	r0, r4, #2
      data |= ((uint32_t)(*str++)) << bits; 
 8001fe4:	780c      	ldrbhi	r4, [r1, #0]
 8001fe6:	4084      	lslhi	r4, r0
 8001fe8:	4323      	orrhi	r3, r4
 8001fea:	bf88      	it	hi
 8001fec:	3101      	addhi	r1, #1
 8001fee:	3201      	adds	r2, #1
 8001ff0:	4604      	mov	r4, r0
 8001ff2:	e7e6      	b.n	8001fc2 <Uncompress+0x36>
    }
  }
  buf[i]='\0';
 8001ff4:	5485      	strb	r5, [r0, r2]
  return buf;
}
 8001ff6:	b00a      	add	sp, #40	; 0x28
 8001ff8:	bd70      	pop	{r4, r5, r6, pc}
 8001ffa:	bf00      	nop
 8001ffc:	0800a370 	.word	0x0800a370
 8002000:	20000b8c 	.word	0x20000b8c

08002004 <DecodeReadRegister>:


/* Read a specific register from memory */
uint32_t DecodeReadRegister(const Peripheral_t *p, const Register_t *r)
{
 8002004:	b538      	push	{r3, r4, r5, lr}
  uint32_t address, val;

  if(p == NULL) return 0;
 8002006:	4604      	mov	r4, r0
 8002008:	b300      	cbz	r0, 800204c <DecodeReadRegister+0x48>
  if(r == NULL) return 0;
 800200a:	b301      	cbz	r1, 800204e <DecodeReadRegister+0x4a>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 800200c:	798d      	ldrb	r5, [r1, #6]

  if(p == NULL) return 0;
  if(r == NULL) return 0;
  
  /* Calculate effective address */
  address = p->base + r->offset;
 800200e:	888a      	ldrh	r2, [r1, #4]
 8002010:	6843      	ldr	r3, [r0, #4]

  /* read register according to size */
  switch(r->size) {
 8002012:	2d10      	cmp	r5, #16
 8002014:	d005      	beq.n	8002022 <DecodeReadRegister+0x1e>
 8002016:	2d20      	cmp	r5, #32
 8002018:	d005      	beq.n	8002026 <DecodeReadRegister+0x22>
 800201a:	2d08      	cmp	r5, #8
 800201c:	d105      	bne.n	800202a <DecodeReadRegister+0x26>
  case 8:
    val = *(uint8_t *)address;
 800201e:	5cd0      	ldrb	r0, [r2, r3]
    break;
 8002020:	bd38      	pop	{r3, r4, r5, pc}
  case 16:
    val = *(uint16_t *)address;
 8002022:	5ad0      	ldrh	r0, [r2, r3]
    break;  
 8002024:	bd38      	pop	{r3, r4, r5, pc}
  case 32:
    val = *(uint32_t *)address;
 8002026:	58d0      	ldr	r0, [r2, r3]
    break;
 8002028:	bd38      	pop	{r3, r4, r5, pc}
  default:
    printf("Invalid size 0x%x for register %s",
 800202a:	6808      	ldr	r0, [r1, #0]
 800202c:	f7ff ffae 	bl	8001f8c <Uncompress>
 8002030:	4629      	mov	r1, r5
 8002032:	4602      	mov	r2, r0
 8002034:	4807      	ldr	r0, [pc, #28]	; (8002054 <DecodeReadRegister+0x50>)
 8002036:	f002 ff45 	bl	8004ec4 <printf>
	   (unsigned int)r->size,
	   Uncompress(r->name));
    printf(" in periphral %s!\n",
 800203a:	6820      	ldr	r0, [r4, #0]
 800203c:	f7ff ffa6 	bl	8001f8c <Uncompress>
 8002040:	4601      	mov	r1, r0
 8002042:	4805      	ldr	r0, [pc, #20]	; (8002058 <DecodeReadRegister+0x54>)
 8002044:	f002 ff3e 	bl	8004ec4 <printf>
	   Uncompress(p->name));
    return 0;
 8002048:	2000      	movs	r0, #0
 800204a:	bd38      	pop	{r3, r4, r5, pc}
 800204c:	bd38      	pop	{r3, r4, r5, pc}
/* Read a specific register from memory */
uint32_t DecodeReadRegister(const Peripheral_t *p, const Register_t *r)
{
  uint32_t address, val;

  if(p == NULL) return 0;
 800204e:	4608      	mov	r0, r1
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 0;
  }
  return val;
}
 8002050:	bd38      	pop	{r3, r4, r5, pc}
 8002052:	bf00      	nop
 8002054:	0800a396 	.word	0x0800a396
 8002058:	0800a3b8 	.word	0x0800a3b8

0800205c <DecodeWriteRegister>:

/* Read a specific register from memory */
uint32_t DecodeWriteRegister(const Peripheral_t *p, const Register_t *r,
			     uint32_t val)
{
 800205c:	b538      	push	{r3, r4, r5, lr}
  uint32_t address;

  if(p == NULL) return 1;
 800205e:	4605      	mov	r5, r0
 8002060:	b1f8      	cbz	r0, 80020a2 <DecodeWriteRegister+0x46>
  if(r == NULL) return 1;
 8002062:	b1f1      	cbz	r1, 80020a2 <DecodeWriteRegister+0x46>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 8002064:	798c      	ldrb	r4, [r1, #6]

  if(p == NULL) return 1;
  if(r == NULL) return 1;
  
  /* Calculate effective address */
  address = p->base + r->offset;
 8002066:	8888      	ldrh	r0, [r1, #4]
 8002068:	686b      	ldr	r3, [r5, #4]

  /* read register according to size */
  switch(r->size) {
 800206a:	2c10      	cmp	r4, #16
 800206c:	d005      	beq.n	800207a <DecodeWriteRegister+0x1e>
 800206e:	2c20      	cmp	r4, #32
 8002070:	d005      	beq.n	800207e <DecodeWriteRegister+0x22>
 8002072:	2c08      	cmp	r4, #8
 8002074:	d106      	bne.n	8002084 <DecodeWriteRegister+0x28>
  case 8:
    *(uint8_t *)address = val;
 8002076:	54c2      	strb	r2, [r0, r3]
 8002078:	e002      	b.n	8002080 <DecodeWriteRegister+0x24>
    break;
  case 16:
    *(uint16_t *)address = val;
 800207a:	52c2      	strh	r2, [r0, r3]
 800207c:	e000      	b.n	8002080 <DecodeWriteRegister+0x24>
    break;  
  case 32:
    *(uint32_t *)address = val;
 800207e:	50c2      	str	r2, [r0, r3]
	   Uncompress(r->name));
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 1;
  }
  return 0;
 8002080:	2000      	movs	r0, #0
  case 16:
    *(uint16_t *)address = val;
    break;  
  case 32:
    *(uint32_t *)address = val;
    break;
 8002082:	bd38      	pop	{r3, r4, r5, pc}
  default:
    printf("Invalid size 0x%x for register %s",
 8002084:	6808      	ldr	r0, [r1, #0]
 8002086:	f7ff ff81 	bl	8001f8c <Uncompress>
 800208a:	4621      	mov	r1, r4
 800208c:	4602      	mov	r2, r0
 800208e:	4806      	ldr	r0, [pc, #24]	; (80020a8 <DecodeWriteRegister+0x4c>)
 8002090:	f002 ff18 	bl	8004ec4 <printf>
	   (unsigned int)r->size,
	   Uncompress(r->name));
    printf(" in periphral %s!\n",
 8002094:	6828      	ldr	r0, [r5, #0]
 8002096:	f7ff ff79 	bl	8001f8c <Uncompress>
 800209a:	4601      	mov	r1, r0
 800209c:	4803      	ldr	r0, [pc, #12]	; (80020ac <DecodeWriteRegister+0x50>)
 800209e:	f002 ff11 	bl	8004ec4 <printf>
uint32_t DecodeWriteRegister(const Peripheral_t *p, const Register_t *r,
			     uint32_t val)
{
  uint32_t address;

  if(p == NULL) return 1;
 80020a2:	2001      	movs	r0, #1
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 1;
  }
  return 0;
}
 80020a4:	bd38      	pop	{r3, r4, r5, pc}
 80020a6:	bf00      	nop
 80020a8:	0800a396 	.word	0x0800a396
 80020ac:	0800a3b8 	.word	0x0800a3b8

080020b0 <DecodeField>:

/* Decode a field */
void DecodeField(const Field_t *f, uint32_t val)
{
 80020b0:	b530      	push	{r4, r5, lr}
  uint32_t v;
  if(f == NULL) return;
 80020b2:	4604      	mov	r4, r0
  return 0;
}

/* Decode a field */
void DecodeField(const Field_t *f, uint32_t val)
{
 80020b4:	b085      	sub	sp, #20
  uint32_t v;
  if(f == NULL) return;
 80020b6:	b1c8      	cbz	r0, 80020ec <DecodeField+0x3c>

  v = (val >> (f->offset)) & ((1<<f->width)-1);
 80020b8:	7943      	ldrb	r3, [r0, #5]
 80020ba:	2501      	movs	r5, #1
 80020bc:	409d      	lsls	r5, r3
 80020be:	7903      	ldrb	r3, [r0, #4]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 80020c0:	6800      	ldr	r0, [r0, #0]
void DecodeField(const Field_t *f, uint32_t val)
{
  uint32_t v;
  if(f == NULL) return;

  v = (val >> (f->offset)) & ((1<<f->width)-1);
 80020c2:	40d9      	lsrs	r1, r3
 80020c4:	3d01      	subs	r5, #1
 80020c6:	400d      	ands	r5, r1
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 80020c8:	f7ff ff60 	bl	8001f8c <Uncompress>
	 Uncompress(f->name),  
	 (unsigned int)v,
	 (unsigned int)v,
	 (unsigned int)(f->width),
 80020cc:	7962      	ldrb	r2, [r4, #5]
{
  uint32_t v;
  if(f == NULL) return;

  v = (val >> (f->offset)) & ((1<<f->width)-1);
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 80020ce:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <DecodeField+0x40>)
 80020d0:	4601      	mov	r1, r0
 80020d2:	4808      	ldr	r0, [pc, #32]	; (80020f4 <DecodeField+0x44>)
 80020d4:	2a01      	cmp	r2, #1
 80020d6:	bf98      	it	ls
 80020d8:	4603      	movls	r3, r0
 80020da:	e88d 000c 	stmia.w	sp, {r2, r3}
 80020de:	7923      	ldrb	r3, [r4, #4]
 80020e0:	9302      	str	r3, [sp, #8]
 80020e2:	4805      	ldr	r0, [pc, #20]	; (80020f8 <DecodeField+0x48>)
 80020e4:	462a      	mov	r2, r5
 80020e6:	462b      	mov	r3, r5
 80020e8:	f002 feec 	bl	8004ec4 <printf>
	 (unsigned int)v,
	 (unsigned int)v,
	 (unsigned int)(f->width),
	 (f->width > 1 ) ? "bits," : "bit, ",
	 (unsigned int)(f->offset));
}
 80020ec:	b005      	add	sp, #20
 80020ee:	bd30      	pop	{r4, r5, pc}
 80020f0:	0800a3cb 	.word	0x0800a3cb
 80020f4:	0800a3d1 	.word	0x0800a3d1
 80020f8:	0800a3d7 	.word	0x0800a3d7

080020fc <DecodeRegister>:

/* Decode a register */
void DecodeRegister(const Register_t *r, uint32_t base, uint32_t val,
		    uint32_t decodeFields)
{
 80020fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80020fe:	460f      	mov	r7, r1
 8002100:	4616      	mov	r6, r2
 8002102:	461d      	mov	r5, r3
  Field_t const *f;
  uint32_t i;
  
  if(r == NULL) return;
 8002104:	4604      	mov	r4, r0
 8002106:	b310      	cbz	r0, 800214e <DecodeRegister+0x52>

  //  printf("\tRegister :\n");
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 8002108:	6800      	ldr	r0, [r0, #0]
 800210a:	f7ff ff3f 	bl	8001f8c <Uncompress>
 800210e:	79a3      	ldrb	r3, [r4, #6]
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	88a3      	ldrh	r3, [r4, #4]
	 Uncompress(r->name),
	 (unsigned int)val,
	 (unsigned int)val,
	 (unsigned int)r->size,
	 (unsigned int)(base + r->offset)
 8002114:	443b      	add	r3, r7
  uint32_t i;
  
  if(r == NULL) return;

  //  printf("\tRegister :\n");
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 8002116:	4601      	mov	r1, r0
 8002118:	9301      	str	r3, [sp, #4]
 800211a:	480e      	ldr	r0, [pc, #56]	; (8002154 <DecodeRegister+0x58>)
 800211c:	4632      	mov	r2, r6
 800211e:	4633      	mov	r3, r6
 8002120:	f002 fed0 	bl	8004ec4 <printf>
	 (unsigned int)r->size,
	 (unsigned int)(base + r->offset)
	 );

  /* Dump out fields */
  if(r->fields != NULL && decodeFields) {
 8002124:	68a7      	ldr	r7, [r4, #8]
 8002126:	b15f      	cbz	r7, 8002140 <DecodeRegister+0x44>
 8002128:	b18d      	cbz	r5, 800214e <DecodeRegister+0x52>
 800212a:	2500      	movs	r5, #0
    f = r->fields;
    for(i=0; i<r->numFields; i++) {
 800212c:	89a3      	ldrh	r3, [r4, #12]
 800212e:	429d      	cmp	r5, r3
 8002130:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8002134:	d205      	bcs.n	8002142 <DecodeRegister+0x46>
      DecodeField(f,val);
 8002136:	4631      	mov	r1, r6
 8002138:	f7ff ffba 	bl	80020b0 <DecodeField>
	 );

  /* Dump out fields */
  if(r->fields != NULL && decodeFields) {
    f = r->fields;
    for(i=0; i<r->numFields; i++) {
 800213c:	3501      	adds	r5, #1
 800213e:	e7f5      	b.n	800212c <DecodeRegister+0x30>
      DecodeField(f,val);
      f++;
    }
  }
  if(decodeFields) {
 8002140:	b12d      	cbz	r5, 800214e <DecodeRegister+0x52>
    printf("\n");
 8002142:	200a      	movs	r0, #10
  }

}
 8002144:	b003      	add	sp, #12
 8002146:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      DecodeField(f,val);
      f++;
    }
  }
  if(decodeFields) {
    printf("\n");
 800214a:	f002 becf 	b.w	8004eec <putchar>
  }

}
 800214e:	b003      	add	sp, #12
 8002150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002152:	bf00      	nop
 8002154:	0800a400 	.word	0x0800a400

08002158 <DecodePeripheral>:

/* Decode a peripheral */
void DecodePeripheral(const Peripheral_t *p, uint32_t decodeFields)
{
 8002158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800215c:	4688      	mov	r8, r1
  Register_t const *r;
  uint32_t val;
  uint32_t i;

  if(p == NULL) return;
 800215e:	4604      	mov	r4, r0
 8002160:	b1e8      	cbz	r0, 800219e <DecodePeripheral+0x46>
  
  printf("Peripheral %-13s: Base address: 0x%08x\n",
 8002162:	6800      	ldr	r0, [r0, #0]
 8002164:	f7ff ff12 	bl	8001f8c <Uncompress>
 8002168:	6862      	ldr	r2, [r4, #4]
 800216a:	4601      	mov	r1, r0
 800216c:	480d      	ldr	r0, [pc, #52]	; (80021a4 <DecodePeripheral+0x4c>)
 800216e:	f002 fea9 	bl	8004ec4 <printf>
	 Uncompress(p->name),  (unsigned int)p->base);

  /* Dump out registers */
  if(p->registers != NULL) {
 8002172:	68a7      	ldr	r7, [r4, #8]
 8002174:	b90f      	cbnz	r7, 800217a <DecodePeripheral+0x22>
 8002176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800217a:	2500      	movs	r5, #0
    r = p->registers;
    for(i=0; i<p->numRegisters; i++) {
 800217c:	89a3      	ldrh	r3, [r4, #12]
 800217e:	429d      	cmp	r5, r3
 8002180:	eb07 1605 	add.w	r6, r7, r5, lsl #4
 8002184:	d20b      	bcs.n	800219e <DecodePeripheral+0x46>
      /* Read value */
      val = DecodeReadRegister(p,r);
 8002186:	4631      	mov	r1, r6
 8002188:	4620      	mov	r0, r4
 800218a:	f7ff ff3b 	bl	8002004 <DecodeReadRegister>
      /* Decode Register, but don't dump fields */
      DecodeRegister(r, p->base, val, decodeFields);
 800218e:	6861      	ldr	r1, [r4, #4]
  /* Dump out registers */
  if(p->registers != NULL) {
    r = p->registers;
    for(i=0; i<p->numRegisters; i++) {
      /* Read value */
      val = DecodeReadRegister(p,r);
 8002190:	4602      	mov	r2, r0
      /* Decode Register, but don't dump fields */
      DecodeRegister(r, p->base, val, decodeFields);
 8002192:	4643      	mov	r3, r8
 8002194:	4630      	mov	r0, r6
 8002196:	f7ff ffb1 	bl	80020fc <DecodeRegister>
	 Uncompress(p->name),  (unsigned int)p->base);

  /* Dump out registers */
  if(p->registers != NULL) {
    r = p->registers;
    for(i=0; i<p->numRegisters; i++) {
 800219a:	3501      	adds	r5, #1
 800219c:	e7ee      	b.n	800217c <DecodePeripheral+0x24>
 800219e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021a2:	bf00      	nop
 80021a4:	0800a43b 	.word	0x0800a43b

080021a8 <DecodePrintPeripherals>:
  }
}

/* Pretty print the names of all the peripherals */
void DecodePrintPeripherals(const Peripheral_t *p)
{
 80021a8:	b538      	push	{r3, r4, r5, lr}
 80021aa:	4605      	mov	r5, r0
  uint32_t col;
  col = 8;
  printf("\t");
 80021ac:	2009      	movs	r0, #9
 80021ae:	f002 fe9d 	bl	8004eec <putchar>

/* Pretty print the names of all the peripherals */
void DecodePrintPeripherals(const Peripheral_t *p)
{
  uint32_t col;
  col = 8;
 80021b2:	2408      	movs	r4, #8
  printf("\t");
  for(; p->name != NULL; p++) {
 80021b4:	6828      	ldr	r0, [r5, #0]
 80021b6:	b1a0      	cbz	r0, 80021e2 <DecodePrintPeripherals+0x3a>
    col += printf("%s",Uncompress(p->name));
 80021b8:	f7ff fee8 	bl	8001f8c <Uncompress>
 80021bc:	4601      	mov	r1, r0
 80021be:	4809      	ldr	r0, [pc, #36]	; (80021e4 <DecodePrintPeripherals+0x3c>)
 80021c0:	f002 fe80 	bl	8004ec4 <printf>
    if((p+1)->name != NULL) {
 80021c4:	692b      	ldr	r3, [r5, #16]
{
  uint32_t col;
  col = 8;
  printf("\t");
  for(; p->name != NULL; p++) {
    col += printf("%s",Uncompress(p->name));
 80021c6:	4404      	add	r4, r0
    if((p+1)->name != NULL) {
 80021c8:	b14b      	cbz	r3, 80021de <DecodePrintPeripherals+0x36>
      col += printf(", ");
 80021ca:	4807      	ldr	r0, [pc, #28]	; (80021e8 <DecodePrintPeripherals+0x40>)
 80021cc:	f002 fe7a 	bl	8004ec4 <printf>
 80021d0:	4404      	add	r4, r0
      if(col > 70) {
 80021d2:	2c46      	cmp	r4, #70	; 0x46
 80021d4:	d903      	bls.n	80021de <DecodePrintPeripherals+0x36>
	col = 8;
	printf("\n\t");
 80021d6:	4805      	ldr	r0, [pc, #20]	; (80021ec <DecodePrintPeripherals+0x44>)
 80021d8:	f002 fe74 	bl	8004ec4 <printf>
  for(; p->name != NULL; p++) {
    col += printf("%s",Uncompress(p->name));
    if((p+1)->name != NULL) {
      col += printf(", ");
      if(col > 70) {
	col = 8;
 80021dc:	2408      	movs	r4, #8
void DecodePrintPeripherals(const Peripheral_t *p)
{
  uint32_t col;
  col = 8;
  printf("\t");
  for(; p->name != NULL; p++) {
 80021de:	3510      	adds	r5, #16
 80021e0:	e7e8      	b.n	80021b4 <DecodePrintPeripherals+0xc>
	col = 8;
	printf("\n\t");
      }
    }
  }
}
 80021e2:	bd38      	pop	{r3, r4, r5, pc}
 80021e4:	0800a3b5 	.word	0x0800a3b5
 80021e8:	0800a3d4 	.word	0x0800a3d4
 80021ec:	0800a463 	.word	0x0800a463

080021f0 <DecodePrintRegisters>:

void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 80021f0:	b570      	push	{r4, r5, r6, lr}
 80021f2:	4606      	mov	r6, r0
  uint8_t col;
  col = 8;
  printf("\t");
 80021f4:	2009      	movs	r0, #9
      }
    }
  }
}

void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 80021f6:	460d      	mov	r5, r1
  uint8_t col;
  col = 8;
  printf("\t");
 80021f8:	f002 fe78 	bl	8004eec <putchar>
 80021fc:	3d01      	subs	r5, #1
 80021fe:	3610      	adds	r6, #16
  }
}

void DecodePrintRegisters(const Register_t *r,uint32_t count) {
  uint8_t col;
  col = 8;
 8002200:	2408      	movs	r4, #8
  printf("\t");
  while(count--) {
 8002202:	1c6b      	adds	r3, r5, #1
 8002204:	d018      	beq.n	8002238 <DecodePrintRegisters+0x48>
    col += printf("%s",Uncompress(r->name));
 8002206:	f856 0c10 	ldr.w	r0, [r6, #-16]
 800220a:	f7ff febf 	bl	8001f8c <Uncompress>
 800220e:	4601      	mov	r1, r0
 8002210:	480a      	ldr	r0, [pc, #40]	; (800223c <DecodePrintRegisters+0x4c>)
 8002212:	f002 fe57 	bl	8004ec4 <printf>
 8002216:	4420      	add	r0, r4
 8002218:	b2c4      	uxtb	r4, r0
    if(count) {
 800221a:	b155      	cbz	r5, 8002232 <DecodePrintRegisters+0x42>
      col += printf(", ");
 800221c:	4808      	ldr	r0, [pc, #32]	; (8002240 <DecodePrintRegisters+0x50>)
 800221e:	f002 fe51 	bl	8004ec4 <printf>
 8002222:	4420      	add	r0, r4
 8002224:	b2c4      	uxtb	r4, r0
      if(col > 70) {
 8002226:	2c46      	cmp	r4, #70	; 0x46
 8002228:	d903      	bls.n	8002232 <DecodePrintRegisters+0x42>
	col = 8;
	printf("\n\t");
 800222a:	4806      	ldr	r0, [pc, #24]	; (8002244 <DecodePrintRegisters+0x54>)
 800222c:	f002 fe4a 	bl	8004ec4 <printf>
  while(count--) {
    col += printf("%s",Uncompress(r->name));
    if(count) {
      col += printf(", ");
      if(col > 70) {
	col = 8;
 8002230:	2408      	movs	r4, #8
 8002232:	3d01      	subs	r5, #1
 8002234:	3610      	adds	r6, #16
 8002236:	e7e4      	b.n	8002202 <DecodePrintRegisters+0x12>
	printf("\n\t");
      }
    }
    r++;
  }
}
 8002238:	bd70      	pop	{r4, r5, r6, pc}
 800223a:	bf00      	nop
 800223c:	0800a3b5 	.word	0x0800a3b5
 8002240:	0800a3d4 	.word	0x0800a3d4
 8002244:	0800a463 	.word	0x0800a463

08002248 <CmdDecode>:

void CmdDecode(int mode)
{
 8002248:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t val,oval,t,m,i;
  Peripheral_t const *p;
  Register_t const *r;
  Field_t const *f;

  if(mode == CMD_LONG_HELP) {
 800224a:	2802      	cmp	r0, #2
    r++;
  }
}

void CmdDecode(int mode)
{
 800224c:	b085      	sub	sp, #20
  uint32_t val,oval,t,m,i;
  Peripheral_t const *p;
  Register_t const *r;
  Field_t const *f;

  if(mode == CMD_LONG_HELP) {
 800224e:	d131      	bne.n	80022b4 <CmdDecode+0x6c>
    /* Try to fetch a peripheral name, then just give general help */
    rc = fetch_string_arg(&n);
 8002250:	a803      	add	r0, sp, #12
 8002252:	f7ff fc2f 	bl	8001ab4 <fetch_string_arg>
    if(rc) {
 8002256:	b138      	cbz	r0, 8002268 <CmdDecode+0x20>
      /* nothing to fetch, general help */
      printf("decode {<periph> {<reg>}|full}\n"
 8002258:	4888      	ldr	r0, [pc, #544]	; (800247c <CmdDecode+0x234>)
 800225a:	f002 fe7f 	bl	8004f5c <puts>
	     "The forms with <val> on the end allow you to set the\n"
	     "selected register/field value\n"
	     "\n"
	     "Valid peripherals are:\n"
	     "\n");
      DecodePrintPeripherals(Peripherals);
 800225e:	4888      	ldr	r0, [pc, #544]	; (8002480 <CmdDecode+0x238>)
 8002260:	f7ff ffa2 	bl	80021a8 <DecodePrintPeripherals>
      printf("\n\n"
 8002264:	4887      	ldr	r0, [pc, #540]	; (8002484 <CmdDecode+0x23c>)
 8002266:	e022      	b.n	80022ae <CmdDecode+0x66>
 8002268:	4c85      	ldr	r4, [pc, #532]	; (8002480 <CmdDecode+0x238>)
    } else {
      /* User is requesting a list of registers for a peripheral */
      
      /* Locate the peripheral name */
      p = Peripherals;
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 800226a:	6820      	ldr	r0, [r4, #0]
 800226c:	b948      	cbnz	r0, 8002282 <CmdDecode+0x3a>
	p++;
      }

      if(p->name == NULL) {
 800226e:	6820      	ldr	r0, [r4, #0]
 8002270:	b990      	cbnz	r0, 8002298 <CmdDecode+0x50>
	/* No valid peripheral name found */
	printf("%s is not a valid peripheral name\n"
 8002272:	9903      	ldr	r1, [sp, #12]
 8002274:	4884      	ldr	r0, [pc, #528]	; (8002488 <CmdDecode+0x240>)
 8002276:	f002 fe25 	bl	8004ec4 <printf>
	       "Valid peripherals are:\n"
	       "\n",
	       n);
	DecodePrintPeripherals(Peripherals);
 800227a:	4881      	ldr	r0, [pc, #516]	; (8002480 <CmdDecode+0x238>)
 800227c:	f7ff ff94 	bl	80021a8 <DecodePrintPeripherals>
	return;
 8002280:	e0f9      	b.n	8002476 <CmdDecode+0x22e>
    } else {
      /* User is requesting a list of registers for a peripheral */
      
      /* Locate the peripheral name */
      p = Peripherals;
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 8002282:	9d03      	ldr	r5, [sp, #12]
 8002284:	f7ff fe82 	bl	8001f8c <Uncompress>
 8002288:	4601      	mov	r1, r0
 800228a:	4628      	mov	r0, r5
 800228c:	f002 feea 	bl	8005064 <strcasecmp>
 8002290:	2800      	cmp	r0, #0
 8002292:	d0ec      	beq.n	800226e <CmdDecode+0x26>
	p++;
 8002294:	3410      	adds	r4, #16
 8002296:	e7e8      	b.n	800226a <CmdDecode+0x22>
	       "\n",
	       n);
	DecodePrintPeripherals(Peripherals);
	return;
      }
      printf("Valid registers for peripheral %s:\n"
 8002298:	f7ff fe78 	bl	8001f8c <Uncompress>
 800229c:	4601      	mov	r1, r0
 800229e:	487b      	ldr	r0, [pc, #492]	; (800248c <CmdDecode+0x244>)
 80022a0:	f002 fe10 	bl	8004ec4 <printf>
	     "\n",
	     Uncompress(p->name));
      DecodePrintRegisters(p->registers,p->numRegisters);
 80022a4:	68a0      	ldr	r0, [r4, #8]
 80022a6:	89a1      	ldrh	r1, [r4, #12]
 80022a8:	f7ff ffa2 	bl	80021f0 <DecodePrintRegisters>
      printf("\n\n");
 80022ac:	4878      	ldr	r0, [pc, #480]	; (8002490 <CmdDecode+0x248>)
 80022ae:	f002 fe55 	bl	8004f5c <puts>
 80022b2:	e0e0      	b.n	8002476 <CmdDecode+0x22e>
    }
    
    return;
  }
  /* User is requesting to decode something */
  rc = fetch_string_arg(&pname);
 80022b4:	4668      	mov	r0, sp
 80022b6:	f7ff fbfd 	bl	8001ab4 <fetch_string_arg>
  if(rc) {
 80022ba:	b118      	cbz	r0, 80022c4 <CmdDecode+0x7c>
    /* User did not specify a peripheral name */
    printf("Missing peripheral name, please chose one of:\n\n");
 80022bc:	4875      	ldr	r0, [pc, #468]	; (8002494 <CmdDecode+0x24c>)
 80022be:	f002 fe4d 	bl	8004f5c <puts>
 80022c2:	e014      	b.n	80022ee <CmdDecode+0xa6>
 80022c4:	4c6e      	ldr	r4, [pc, #440]	; (8002480 <CmdDecode+0x238>)
    return;
  }

  /* Attempt to locate the periperhal */
  p = Peripherals;
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 80022c6:	6820      	ldr	r0, [r4, #0]
 80022c8:	b930      	cbnz	r0, 80022d8 <CmdDecode+0x90>
    p++;
  }

  if(p->name == NULL) {
 80022ca:	6823      	ldr	r3, [r4, #0]
 80022cc:	b99b      	cbnz	r3, 80022f6 <CmdDecode+0xae>
    /* No valid peripheral name found */
    printf("'%s' is not a valid peripheral name, valid names for are:\n\n",
 80022ce:	9900      	ldr	r1, [sp, #0]
 80022d0:	4871      	ldr	r0, [pc, #452]	; (8002498 <CmdDecode+0x250>)
 80022d2:	f002 fdf7 	bl	8004ec4 <printf>
 80022d6:	e00a      	b.n	80022ee <CmdDecode+0xa6>
    return;
  }

  /* Attempt to locate the periperhal */
  p = Peripherals;
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 80022d8:	9d00      	ldr	r5, [sp, #0]
 80022da:	f7ff fe57 	bl	8001f8c <Uncompress>
 80022de:	4601      	mov	r1, r0
 80022e0:	4628      	mov	r0, r5
 80022e2:	f002 febf 	bl	8005064 <strcasecmp>
 80022e6:	2800      	cmp	r0, #0
 80022e8:	d0ef      	beq.n	80022ca <CmdDecode+0x82>
    p++;
 80022ea:	3410      	adds	r4, #16
 80022ec:	e7eb      	b.n	80022c6 <CmdDecode+0x7e>

  if(p->name == NULL) {
    /* No valid peripheral name found */
    printf("'%s' is not a valid peripheral name, valid names for are:\n\n",
	   pname);
    DecodePrintPeripherals(Peripherals);
 80022ee:	4864      	ldr	r0, [pc, #400]	; (8002480 <CmdDecode+0x238>)
 80022f0:	f7ff ff5a 	bl	80021a8 <DecodePrintPeripherals>
 80022f4:	e7da      	b.n	80022ac <CmdDecode+0x64>
    printf("\n\n");
    return;
  }
  
  /* See if the user is specifying a register */
  rc = fetch_string_arg(&rname);
 80022f6:	a801      	add	r0, sp, #4
 80022f8:	f7ff fbdc 	bl	8001ab4 <fetch_string_arg>
  if(rc) {
 80022fc:	b110      	cbz	r0, 8002304 <CmdDecode+0xbc>
    /* No register name specified, dump whole peripheral */
    DecodePeripheral(p,0);
 80022fe:	4620      	mov	r0, r4
 8002300:	2100      	movs	r1, #0
 8002302:	e017      	b.n	8002334 <CmdDecode+0xec>
    return;
  }

  /* See if we can find the register in the list. */
  r = p->registers;
 8002304:	68a5      	ldr	r5, [r4, #8]
  i = p->numRegisters;
 8002306:	89a7      	ldrh	r7, [r4, #12]
 8002308:	9e01      	ldr	r6, [sp, #4]
  while((i--) && strcasecmp(rname,Uncompress(r->name))) {
 800230a:	b157      	cbz	r7, 8002322 <CmdDecode+0xda>
 800230c:	6828      	ldr	r0, [r5, #0]
 800230e:	f7ff fe3d 	bl	8001f8c <Uncompress>
 8002312:	4601      	mov	r1, r0
 8002314:	4630      	mov	r0, r6
 8002316:	f002 fea5 	bl	8005064 <strcasecmp>
 800231a:	3f01      	subs	r7, #1
 800231c:	b168      	cbz	r0, 800233a <CmdDecode+0xf2>
    r++;
 800231e:	3510      	adds	r5, #16
 8002320:	e7f2      	b.n	8002308 <CmdDecode+0xc0>
  }

  if(i == -1) {
    /* if the user says 'full' do a full decode */
    if(strcasecmp(rname,"full") == 0) {
 8002322:	4630      	mov	r0, r6
 8002324:	495d      	ldr	r1, [pc, #372]	; (800249c <CmdDecode+0x254>)
 8002326:	f002 fe9d 	bl	8005064 <strcasecmp>
 800232a:	2800      	cmp	r0, #0
 800232c:	f040 809a 	bne.w	8002464 <CmdDecode+0x21c>
      DecodePeripheral(p,1);
 8002330:	4620      	mov	r0, r4
 8002332:	2101      	movs	r1, #1
 8002334:	f7ff ff10 	bl	8002158 <DecodePeripheral>
      return;
 8002338:	e09d      	b.n	8002476 <CmdDecode+0x22e>
    printf("\n\n");
    return;
  }    

  /* Check to see if there is a field name, or integer value to program */
  rc = fetch_string_arg(&fname);
 800233a:	a802      	add	r0, sp, #8
 800233c:	f7ff fbba 	bl	8001ab4 <fetch_string_arg>
  if(rc == 0) {
 8002340:	2800      	cmp	r0, #0
 8002342:	f040 8083 	bne.w	800244c <CmdDecode+0x204>
    /* if the user says 'val', decode the value given, as if it came
     * from the named register.
     */
    if(strcasecmp(fname,"val") == 0) {
 8002346:	9802      	ldr	r0, [sp, #8]
 8002348:	4955      	ldr	r1, [pc, #340]	; (80024a0 <CmdDecode+0x258>)
 800234a:	f002 fe8b 	bl	8005064 <strcasecmp>
 800234e:	b948      	cbnz	r0, 8002364 <CmdDecode+0x11c>
      rc = fetch_uint32_arg(&val);
 8002350:	a803      	add	r0, sp, #12
 8002352:	f7ff fb9b 	bl	8001a8c <fetch_uint32_arg>
      if(rc) {
 8002356:	b108      	cbz	r0, 800235c <CmdDecode+0x114>
	printf("Missing value to use in decode\n");
 8002358:	4852      	ldr	r0, [pc, #328]	; (80024a4 <CmdDecode+0x25c>)
 800235a:	e7a8      	b.n	80022ae <CmdDecode+0x66>
	return;
      }
      DecodeRegister(r,p->base,val,1);
 800235c:	4628      	mov	r0, r5
 800235e:	6861      	ldr	r1, [r4, #4]
 8002360:	9a03      	ldr	r2, [sp, #12]
 8002362:	e07b      	b.n	800245c <CmdDecode+0x214>
      return;
    }

    /* There was something... see if it matches a field name */
    f = r->fields;
 8002364:	68ae      	ldr	r6, [r5, #8]
    while((f->name != NULL) && strcasecmp(fname,Uncompress(f->name))) {
 8002366:	6830      	ldr	r0, [r6, #0]
 8002368:	b910      	cbnz	r0, 8002370 <CmdDecode+0x128>
      f++;
    }
    if(f->name != NULL) {
 800236a:	6837      	ldr	r7, [r6, #0]
 800236c:	b95f      	cbnz	r7, 8002386 <CmdDecode+0x13e>
 800236e:	e046      	b.n	80023fe <CmdDecode+0x1b6>
      return;
    }

    /* There was something... see if it matches a field name */
    f = r->fields;
    while((f->name != NULL) && strcasecmp(fname,Uncompress(f->name))) {
 8002370:	9f02      	ldr	r7, [sp, #8]
 8002372:	f7ff fe0b 	bl	8001f8c <Uncompress>
 8002376:	4601      	mov	r1, r0
 8002378:	4638      	mov	r0, r7
 800237a:	f002 fe73 	bl	8005064 <strcasecmp>
 800237e:	2800      	cmp	r0, #0
 8002380:	d0f3      	beq.n	800236a <CmdDecode+0x122>
      f++;
 8002382:	3608      	adds	r6, #8
 8002384:	e7ef      	b.n	8002366 <CmdDecode+0x11e>
    }
    if(f->name != NULL) {
      /* Matched a field name, look for the value */
      rc = fetch_uint32_arg(&val);
 8002386:	a803      	add	r0, sp, #12
 8002388:	f7ff fb80 	bl	8001a8c <fetch_uint32_arg>
      if(rc) {
 800238c:	b128      	cbz	r0, 800239a <CmdDecode+0x152>
	/* Unable to locate a value */
	printf("Missing Value to program into register %s\n",
 800238e:	6828      	ldr	r0, [r5, #0]
 8002390:	f7ff fdfc 	bl	8001f8c <Uncompress>
 8002394:	4601      	mov	r1, r0
 8002396:	4844      	ldr	r0, [pc, #272]	; (80024a8 <CmdDecode+0x260>)
 8002398:	e040      	b.n	800241c <CmdDecode+0x1d4>
	       Uncompress(r->name));
	return;
      }
    
      /* Update the register field */
      t = DecodeReadRegister(p,r);
 800239a:	4629      	mov	r1, r5
 800239c:	4620      	mov	r0, r4
 800239e:	f7ff fe31 	bl	8002004 <DecodeReadRegister>
      /* Create mask */
      m = (1<<f->width)-1;
 80023a2:	7972      	ldrb	r2, [r6, #5]

      oval = (t >> f->offset) & m; /* Save old value */
 80023a4:	f896 e004 	ldrb.w	lr, [r6, #4]

      t &= ~(m << f->offset);
      t |= (val & m) << f->offset;
 80023a8:	9903      	ldr	r1, [sp, #12]
      }
    
      /* Update the register field */
      t = DecodeReadRegister(p,r);
      /* Create mask */
      m = (1<<f->width)-1;
 80023aa:	2301      	movs	r3, #1
 80023ac:	4093      	lsls	r3, r2

      oval = (t >> f->offset) & m; /* Save old value */
 80023ae:	fa20 f70e 	lsr.w	r7, r0, lr
      }
    
      /* Update the register field */
      t = DecodeReadRegister(p,r);
      /* Create mask */
      m = (1<<f->width)-1;
 80023b2:	3b01      	subs	r3, #1

      oval = (t >> f->offset) & m; /* Save old value */

      t &= ~(m << f->offset);
 80023b4:	fa03 f20e 	lsl.w	r2, r3, lr
      /* Update the register field */
      t = DecodeReadRegister(p,r);
      /* Create mask */
      m = (1<<f->width)-1;

      oval = (t >> f->offset) & m; /* Save old value */
 80023b8:	401f      	ands	r7, r3

      t &= ~(m << f->offset);
      t |= (val & m) << f->offset;
 80023ba:	400b      	ands	r3, r1
 80023bc:	fa03 f30e 	lsl.w	r3, r3, lr
      /* Create mask */
      m = (1<<f->width)-1;

      oval = (t >> f->offset) & m; /* Save old value */

      t &= ~(m << f->offset);
 80023c0:	ea20 0202 	bic.w	r2, r0, r2
      t |= (val & m) << f->offset;
      DecodeWriteRegister(p,r,t);
 80023c4:	431a      	orrs	r2, r3
 80023c6:	4629      	mov	r1, r5
 80023c8:	4620      	mov	r0, r4
 80023ca:	f7ff fe47 	bl	800205c <DecodeWriteRegister>
      printf("%s.",
 80023ce:	6820      	ldr	r0, [r4, #0]
 80023d0:	f7ff fddc 	bl	8001f8c <Uncompress>
 80023d4:	4601      	mov	r1, r0
 80023d6:	4835      	ldr	r0, [pc, #212]	; (80024ac <CmdDecode+0x264>)
 80023d8:	f002 fd74 	bl	8004ec4 <printf>
	     Uncompress(p->name));
      printf("%s.",
 80023dc:	6828      	ldr	r0, [r5, #0]
 80023de:	f7ff fdd5 	bl	8001f8c <Uncompress>
 80023e2:	4601      	mov	r1, r0
 80023e4:	4831      	ldr	r0, [pc, #196]	; (80024ac <CmdDecode+0x264>)
 80023e6:	f002 fd6d 	bl	8004ec4 <printf>
	     Uncompress(r->name));
      printf("%s (%d) -> (%d)\n",
 80023ea:	6830      	ldr	r0, [r6, #0]
 80023ec:	f7ff fdce 	bl	8001f8c <Uncompress>
 80023f0:	463a      	mov	r2, r7
 80023f2:	4601      	mov	r1, r0
 80023f4:	9b03      	ldr	r3, [sp, #12]
 80023f6:	482e      	ldr	r0, [pc, #184]	; (80024b0 <CmdDecode+0x268>)
 80023f8:	f002 fd64 	bl	8004ec4 <printf>
	     Uncompress(f->name),
	     (unsigned)oval, (unsigned)val);
      return;
 80023fc:	e03b      	b.n	8002476 <CmdDecode+0x22e>

    }
    
    /* No matching register name, check if this is an integer */
    errno = 0;
 80023fe:	f002 fce5 	bl	8004dcc <__errno>
    val = strtoul(fname,NULL,0);
 8002402:	4639      	mov	r1, r7
      return;

    }
    
    /* No matching register name, check if this is an integer */
    errno = 0;
 8002404:	6007      	str	r7, [r0, #0]
    val = strtoul(fname,NULL,0);
 8002406:	463a      	mov	r2, r7
 8002408:	9802      	ldr	r0, [sp, #8]
 800240a:	f002 ffa7 	bl	800535c <strtoul>
 800240e:	9003      	str	r0, [sp, #12]
    if(errno != 0) {
 8002410:	f002 fcdc 	bl	8004dcc <__errno>
 8002414:	6803      	ldr	r3, [r0, #0]
 8002416:	b123      	cbz	r3, 8002422 <CmdDecode+0x1da>
      /* Unable to do conversion */
      printf("Invalid number '%s' entered.\n",
 8002418:	4826      	ldr	r0, [pc, #152]	; (80024b4 <CmdDecode+0x26c>)
 800241a:	9902      	ldr	r1, [sp, #8]
 800241c:	f002 fd52 	bl	8004ec4 <printf>
	     fname);
      return;
 8002420:	e029      	b.n	8002476 <CmdDecode+0x22e>
    }
    /* Write to register */
    DecodeWriteRegister(p,r,val);
 8002422:	9a03      	ldr	r2, [sp, #12]
 8002424:	4629      	mov	r1, r5
 8002426:	4620      	mov	r0, r4
 8002428:	f7ff fe18 	bl	800205c <DecodeWriteRegister>
    printf("%s.",
 800242c:	6820      	ldr	r0, [r4, #0]
 800242e:	f7ff fdad 	bl	8001f8c <Uncompress>
 8002432:	4601      	mov	r1, r0
 8002434:	481d      	ldr	r0, [pc, #116]	; (80024ac <CmdDecode+0x264>)
 8002436:	f002 fd45 	bl	8004ec4 <printf>
	   Uncompress(p->name));
    printf("%s = 0x%08x\n",
 800243a:	6828      	ldr	r0, [r5, #0]
 800243c:	f7ff fda6 	bl	8001f8c <Uncompress>
 8002440:	9a03      	ldr	r2, [sp, #12]
 8002442:	4601      	mov	r1, r0
 8002444:	481c      	ldr	r0, [pc, #112]	; (80024b8 <CmdDecode+0x270>)
 8002446:	f002 fd3d 	bl	8004ec4 <printf>
	   Uncompress(r->name),
	   (unsigned)val);
    return;
 800244a:	e014      	b.n	8002476 <CmdDecode+0x22e>

  }
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
 800244c:	4629      	mov	r1, r5
 800244e:	4620      	mov	r0, r4
 8002450:	f7ff fdd8 	bl	8002004 <DecodeReadRegister>
  DecodeRegister(r,p->base, val,1);
 8002454:	6861      	ldr	r1, [r4, #4]
	   (unsigned)val);
    return;

  }
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
 8002456:	9003      	str	r0, [sp, #12]
 8002458:	4602      	mov	r2, r0
  DecodeRegister(r,p->base, val,1);
 800245a:	4628      	mov	r0, r5
 800245c:	2301      	movs	r3, #1
 800245e:	f7ff fe4d 	bl	80020fc <DecodeRegister>

  return;
 8002462:	e008      	b.n	8002476 <CmdDecode+0x22e>
      DecodePeripheral(p,1);
      return;
    }

    /* No valid register name found */
    printf("'%s' is not a valid register name, valid names for %s are:\n\n",
 8002464:	6820      	ldr	r0, [r4, #0]
 8002466:	f7ff fd91 	bl	8001f8c <Uncompress>
 800246a:	4631      	mov	r1, r6
 800246c:	4602      	mov	r2, r0
 800246e:	4813      	ldr	r0, [pc, #76]	; (80024bc <CmdDecode+0x274>)
 8002470:	f002 fd28 	bl	8004ec4 <printf>
 8002474:	e716      	b.n	80022a4 <CmdDecode+0x5c>
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
  DecodeRegister(r,p->base, val,1);

  return;
}
 8002476:	b005      	add	sp, #20
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247a:	bf00      	nop
 800247c:	0800a466 	.word	0x0800a466
 8002480:	08013ffc 	.word	0x08013ffc
 8002484:	0800a679 	.word	0x0800a679
 8002488:	0800a6ce 	.word	0x0800a6ce
 800248c:	0800a709 	.word	0x0800a709
 8002490:	0800a797 	.word	0x0800a797
 8002494:	0800a72e 	.word	0x0800a72e
 8002498:	0800a75d 	.word	0x0800a75d
 800249c:	0800a864 	.word	0x0800a864
 80024a0:	0800a7d6 	.word	0x0800a7d6
 80024a4:	0800a7da 	.word	0x0800a7da
 80024a8:	0800a7f9 	.word	0x0800a7f9
 80024ac:	0800a824 	.word	0x0800a824
 80024b0:	0800a828 	.word	0x0800a828
 80024b4:	0800a839 	.word	0x0800a839
 80024b8:	0800a857 	.word	0x0800a857
 80024bc:	0800a799 	.word	0x0800a799

080024c0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024c0:	4915      	ldr	r1, [pc, #84]	; (8002518 <SystemInit+0x58>)
 80024c2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80024c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80024ce:	4b13      	ldr	r3, [pc, #76]	; (800251c <SystemInit+0x5c>)
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	f042 0201 	orr.w	r2, r2, #1
 80024d6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 80024d8:	6858      	ldr	r0, [r3, #4]
 80024da:	4a11      	ldr	r2, [pc, #68]	; (8002520 <SystemInit+0x60>)
 80024dc:	4002      	ands	r2, r0
 80024de:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80024e6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80024ea:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80024f2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80024fa:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80024fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024fe:	f022 020f 	bic.w	r2, r2, #15
 8002502:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8002504:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002506:	4a07      	ldr	r2, [pc, #28]	; (8002524 <SystemInit+0x64>)
 8002508:	4002      	ands	r2, r0
 800250a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800250c:	2200      	movs	r2, #0
 800250e:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002510:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002514:	608b      	str	r3, [r1, #8]
 8002516:	4770      	bx	lr
 8002518:	e000ed00 	.word	0xe000ed00
 800251c:	40021000 	.word	0x40021000
 8002520:	f87fc00c 	.word	0xf87fc00c
 8002524:	ff00fccc 	.word	0xff00fccc

08002528 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800252a:	6803      	ldr	r3, [r0, #0]
 800252c:	07db      	lsls	r3, r3, #31
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800252e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002530:	d404      	bmi.n	800253c <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002532:	6823      	ldr	r3, [r4, #0]
 8002534:	079f      	lsls	r7, r3, #30
 8002536:	f100 80c6 	bmi.w	80026c6 <HAL_RCC_OscConfig+0x19e>
 800253a:	e157      	b.n	80027ec <HAL_RCC_OscConfig+0x2c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800253c:	4dc1      	ldr	r5, [pc, #772]	; (8002844 <HAL_RCC_OscConfig+0x31c>)
 800253e:	686b      	ldr	r3, [r5, #4]
 8002540:	f003 030c 	and.w	r3, r3, #12
 8002544:	2b04      	cmp	r3, #4
 8002546:	d007      	beq.n	8002558 <HAL_RCC_OscConfig+0x30>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002548:	686b      	ldr	r3, [r5, #4]
 800254a:	f003 030c 	and.w	r3, r3, #12
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800254e:	2b08      	cmp	r3, #8
 8002550:	d127      	bne.n	80025a2 <HAL_RCC_OscConfig+0x7a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002552:	686b      	ldr	r3, [r5, #4]
 8002554:	03de      	lsls	r6, r3, #15
 8002556:	d524      	bpl.n	80025a2 <HAL_RCC_OscConfig+0x7a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002558:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800255c:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002560:	fab3 f383 	clz	r3, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
 8002564:	f043 0320 	orr.w	r3, r3, #32
 8002568:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800256c:	2b01      	cmp	r3, #1
 800256e:	d101      	bne.n	8002574 <HAL_RCC_OscConfig+0x4c>
 8002570:	6829      	ldr	r1, [r5, #0]
 8002572:	e004      	b.n	800257e <HAL_RCC_OscConfig+0x56>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002574:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002578:	fab2 f282 	clz	r2, r2
 800257c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002582:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002586:	fab3 f383 	clz	r3, r3
 800258a:	2201      	movs	r2, #1
 800258c:	f003 031f 	and.w	r3, r3, #31
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	420b      	tst	r3, r1
 8002596:	d0cc      	beq.n	8002532 <HAL_RCC_OscConfig+0xa>
 8002598:	6863      	ldr	r3, [r4, #4]
 800259a:	4293      	cmp	r3, r2
 800259c:	d0c9      	beq.n	8002532 <HAL_RCC_OscConfig+0xa>
      {
        return HAL_ERROR;
 800259e:	2001      	movs	r0, #1
 80025a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 80025a2:	4ea9      	ldr	r6, [pc, #676]	; (8002848 <HAL_RCC_OscConfig+0x320>)
 80025a4:	2300      	movs	r3, #0
 80025a6:	7033      	strb	r3, [r6, #0]
      
      /* Get timeout */
      tickstart = HAL_GetTick();
 80025a8:	f000 fc8e 	bl	8002ec8 <HAL_GetTick>
 80025ac:	4607      	mov	r7, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025b2:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80025b6:	fab3 f383 	clz	r3, r3
      
      /* Wait till HSE is bypassed or disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ba:	f043 0320 	orr.w	r3, r3, #32
 80025be:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d101      	bne.n	80025ca <HAL_RCC_OscConfig+0xa2>
 80025c6:	6829      	ldr	r1, [r5, #0]
 80025c8:	e004      	b.n	80025d4 <HAL_RCC_OscConfig+0xac>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ca:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80025ce:	fab2 f282 	clz	r2, r2
 80025d2:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025d8:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80025dc:	fab3 f383 	clz	r3, r3
 80025e0:	2201      	movs	r2, #1
 80025e2:	f003 031f 	and.w	r3, r3, #31
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	420b      	tst	r3, r1
 80025ec:	d008      	beq.n	8002600 <HAL_RCC_OscConfig+0xd8>
      {
        if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 80025ee:	f000 fc6b 	bl	8002ec8 <HAL_GetTick>
 80025f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80025f6:	1bc0      	subs	r0, r0, r7
 80025f8:	4298      	cmp	r0, r3
 80025fa:	d9d8      	bls.n	80025ae <HAL_RCC_OscConfig+0x86>
        {
          return HAL_TIMEOUT;
 80025fc:	2003      	movs	r0, #3
 80025fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }
      }

      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002600:	7923      	ldrb	r3, [r4, #4]
 8002602:	7033      	strb	r3, [r6, #0]

      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002604:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002606:	f023 020f 	bic.w	r2, r3, #15
 800260a:	68a3      	ldr	r3, [r4, #8]
 800260c:	4313      	orrs	r3, r2
 800260e:	62eb      	str	r3, [r5, #44]	; 0x2c

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState == RCC_HSE_ON)
 8002610:	6863      	ldr	r3, [r4, #4]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d12b      	bne.n	800266e <HAL_RCC_OscConfig+0x146>
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
 8002616:	f000 fc57 	bl	8002ec8 <HAL_GetTick>
 800261a:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002620:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002624:	fab3 f383 	clz	r3, r3

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002628:	f043 0320 	orr.w	r3, r3, #32
 800262c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002630:	2b01      	cmp	r3, #1
 8002632:	d101      	bne.n	8002638 <HAL_RCC_OscConfig+0x110>
 8002634:	6829      	ldr	r1, [r5, #0]
 8002636:	e004      	b.n	8002642 <HAL_RCC_OscConfig+0x11a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002638:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800263c:	fab2 f282 	clz	r2, r2
 8002640:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002642:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002646:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800264a:	fab3 f383 	clz	r3, r3
 800264e:	2201      	movs	r2, #1
 8002650:	f003 031f 	and.w	r3, r3, #31
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	420b      	tst	r3, r1
 800265a:	f47f af6a 	bne.w	8002532 <HAL_RCC_OscConfig+0xa>
        {
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 800265e:	f000 fc33 	bl	8002ec8 <HAL_GetTick>
 8002662:	f241 3388 	movw	r3, #5000	; 0x1388
 8002666:	1b80      	subs	r0, r0, r6
 8002668:	4298      	cmp	r0, r3
 800266a:	d9d7      	bls.n	800261c <HAL_RCC_OscConfig+0xf4>
 800266c:	e7c6      	b.n	80025fc <HAL_RCC_OscConfig+0xd4>
        }
      }
      else
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
 800266e:	f000 fc2b 	bl	8002ec8 <HAL_GetTick>
 8002672:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002674:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002678:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800267c:	fab3 f383 	clz	r3, r3

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002680:	f043 0320 	orr.w	r3, r3, #32
 8002684:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002688:	2b01      	cmp	r3, #1
 800268a:	d101      	bne.n	8002690 <HAL_RCC_OscConfig+0x168>
 800268c:	6829      	ldr	r1, [r5, #0]
 800268e:	e004      	b.n	800269a <HAL_RCC_OscConfig+0x172>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002690:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002694:	fab2 f282 	clz	r2, r2
 8002698:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800269e:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	fab3 f383 	clz	r3, r3
 80026a6:	2201      	movs	r2, #1
 80026a8:	f003 031f 	and.w	r3, r3, #31
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	420b      	tst	r3, r1
 80026b2:	f43f af3e 	beq.w	8002532 <HAL_RCC_OscConfig+0xa>
        {
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 80026b6:	f000 fc07 	bl	8002ec8 <HAL_GetTick>
 80026ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80026be:	1b80      	subs	r0, r0, r6
 80026c0:	4298      	cmp	r0, r3
 80026c2:	d9d7      	bls.n	8002674 <HAL_RCC_OscConfig+0x14c>
 80026c4:	e79a      	b.n	80025fc <HAL_RCC_OscConfig+0xd4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */    
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80026c6:	4d5f      	ldr	r5, [pc, #380]	; (8002844 <HAL_RCC_OscConfig+0x31c>)
 80026c8:	686b      	ldr	r3, [r5, #4]
 80026ca:	f013 0f0c 	tst.w	r3, #12
 80026ce:	d007      	beq.n	80026e0 <HAL_RCC_OscConfig+0x1b8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80026d0:	686b      	ldr	r3, [r5, #4]
 80026d2:	f003 030c 	and.w	r3, r3, #12
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */    
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80026d6:	2b08      	cmp	r3, #8
 80026d8:	d125      	bne.n	8002726 <HAL_RCC_OscConfig+0x1fe>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80026da:	686b      	ldr	r3, [r5, #4]
 80026dc:	03d8      	lsls	r0, r3, #15
 80026de:	d422      	bmi.n	8002726 <HAL_RCC_OscConfig+0x1fe>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e0:	2202      	movs	r2, #2
 80026e2:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80026e6:	fab3 f383 	clz	r3, r3
    {
      /* When the HSI is used as system clock it is not allowed to be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ea:	f043 0320 	orr.w	r3, r3, #32
 80026ee:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d101      	bne.n	80026fa <HAL_RCC_OscConfig+0x1d2>
 80026f6:	6829      	ldr	r1, [r5, #0]
 80026f8:	e004      	b.n	8002704 <HAL_RCC_OscConfig+0x1dc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fa:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80026fe:	fab2 f282 	clz	r2, r2
 8002702:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002704:	2302      	movs	r3, #2
 8002706:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800270a:	fab3 f383 	clz	r3, r3
 800270e:	2201      	movs	r2, #1
 8002710:	f003 031f 	and.w	r3, r3, #31
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	420b      	tst	r3, r1
 800271a:	d030      	beq.n	800277e <HAL_RCC_OscConfig+0x256>
 800271c:	6923      	ldr	r3, [r4, #16]
 800271e:	4293      	cmp	r3, r2
 8002720:	f47f af3d 	bne.w	800259e <HAL_RCC_OscConfig+0x76>
 8002724:	e02b      	b.n	800277e <HAL_RCC_OscConfig+0x256>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002726:	6922      	ldr	r2, [r4, #16]
 8002728:	4b48      	ldr	r3, [pc, #288]	; (800284c <HAL_RCC_OscConfig+0x324>)
 800272a:	b3ba      	cbz	r2, 800279c <HAL_RCC_OscConfig+0x274>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800272c:	2201      	movs	r2, #1
 800272e:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002730:	f000 fbca 	bl	8002ec8 <HAL_GetTick>
 8002734:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002736:	2202      	movs	r2, #2
 8002738:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800273c:	fab3 f383 	clz	r3, r3

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002740:	f043 0320 	orr.w	r3, r3, #32
 8002744:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002748:	2b01      	cmp	r3, #1
 800274a:	d101      	bne.n	8002750 <HAL_RCC_OscConfig+0x228>
 800274c:	6829      	ldr	r1, [r5, #0]
 800274e:	e004      	b.n	800275a <HAL_RCC_OscConfig+0x232>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002750:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002754:	fab2 f282 	clz	r2, r2
 8002758:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275a:	2302      	movs	r3, #2
 800275c:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002760:	fab3 f383 	clz	r3, r3
 8002764:	2201      	movs	r2, #1
 8002766:	f003 031f 	and.w	r3, r3, #31
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	420b      	tst	r3, r1
 8002770:	d105      	bne.n	800277e <HAL_RCC_OscConfig+0x256>
        {
          if((HAL_GetTick()-tickstart) > HSI_TIMEOUT_VALUE)
 8002772:	f000 fba9 	bl	8002ec8 <HAL_GetTick>
 8002776:	1b80      	subs	r0, r0, r6
 8002778:	2864      	cmp	r0, #100	; 0x64
 800277a:	d9dc      	bls.n	8002736 <HAL_RCC_OscConfig+0x20e>
 800277c:	e73e      	b.n	80025fc <HAL_RCC_OscConfig+0xd4>
            return HAL_TIMEOUT;
          }      
        } 

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800277e:	682a      	ldr	r2, [r5, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002780:	23f8      	movs	r3, #248	; 0xf8
 8002782:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002786:	fab3 f383 	clz	r3, r3
 800278a:	6961      	ldr	r1, [r4, #20]
 800278c:	b2db      	uxtb	r3, r3
 800278e:	4099      	lsls	r1, r3
 8002790:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002794:	ea41 0302 	orr.w	r3, r1, r2
 8002798:	602b      	str	r3, [r5, #0]
 800279a:	e027      	b.n	80027ec <HAL_RCC_OscConfig+0x2c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800279c:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800279e:	f000 fb93 	bl	8002ec8 <HAL_GetTick>
 80027a2:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a4:	2202      	movs	r2, #2
 80027a6:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80027aa:	fab3 f383 	clz	r3, r3
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ae:	f043 0320 	orr.w	r3, r3, #32
 80027b2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d101      	bne.n	80027be <HAL_RCC_OscConfig+0x296>
 80027ba:	6829      	ldr	r1, [r5, #0]
 80027bc:	e004      	b.n	80027c8 <HAL_RCC_OscConfig+0x2a0>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027be:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	fab2 f282 	clz	r2, r2
 80027c6:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c8:	2302      	movs	r3, #2
 80027ca:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80027ce:	fab3 f383 	clz	r3, r3
 80027d2:	2201      	movs	r2, #1
 80027d4:	f003 031f 	and.w	r3, r3, #31
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	420b      	tst	r3, r1
 80027de:	d005      	beq.n	80027ec <HAL_RCC_OscConfig+0x2c4>
        {
          if((HAL_GetTick()-tickstart) > HSI_TIMEOUT_VALUE)
 80027e0:	f000 fb72 	bl	8002ec8 <HAL_GetTick>
 80027e4:	1b80      	subs	r0, r0, r6
 80027e6:	2864      	cmp	r0, #100	; 0x64
 80027e8:	d9dc      	bls.n	80027a4 <HAL_RCC_OscConfig+0x27c>
 80027ea:	e707      	b.n	80025fc <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ec:	6823      	ldr	r3, [r4, #0]
 80027ee:	0719      	lsls	r1, r3, #28
 80027f0:	d404      	bmi.n	80027fc <HAL_RCC_OscConfig+0x2d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027f2:	6823      	ldr	r3, [r4, #0]
 80027f4:	075a      	lsls	r2, r3, #29
 80027f6:	f140 80a7 	bpl.w	8002948 <HAL_RCC_OscConfig+0x420>
 80027fa:	e04a      	b.n	8002892 <HAL_RCC_OscConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027fc:	69a2      	ldr	r2, [r4, #24]
 80027fe:	4d11      	ldr	r5, [pc, #68]	; (8002844 <HAL_RCC_OscConfig+0x31c>)
 8002800:	4b13      	ldr	r3, [pc, #76]	; (8002850 <HAL_RCC_OscConfig+0x328>)
 8002802:	b33a      	cbz	r2, 8002854 <HAL_RCC_OscConfig+0x32c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002804:	2201      	movs	r2, #1
 8002806:	601a      	str	r2, [r3, #0]
      
      /* Get timeout */
      tickstart = HAL_GetTick();
 8002808:	f000 fb5e 	bl	8002ec8 <HAL_GetTick>
 800280c:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280e:	2302      	movs	r3, #2
 8002810:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002814:	fab2 f282 	clz	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002818:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800281c:	fab2 f282 	clz	r2, r2
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002820:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002822:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002826:	fab3 f383 	clz	r3, r3
 800282a:	2201      	movs	r2, #1
 800282c:	f003 031f 	and.w	r3, r3, #31
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	420b      	tst	r3, r1
 8002836:	d1dc      	bne.n	80027f2 <HAL_RCC_OscConfig+0x2ca>
      {
        if((HAL_GetTick()-tickstart) > LSI_TIMEOUT_VALUE)
 8002838:	f000 fb46 	bl	8002ec8 <HAL_GetTick>
 800283c:	1b80      	subs	r0, r0, r6
 800283e:	2864      	cmp	r0, #100	; 0x64
 8002840:	d9e5      	bls.n	800280e <HAL_RCC_OscConfig+0x2e6>
 8002842:	e6db      	b.n	80025fc <HAL_RCC_OscConfig+0xd4>
 8002844:	40021000 	.word	0x40021000
 8002848:	40021002 	.word	0x40021002
 800284c:	42420000 	.word	0x42420000
 8002850:	42420480 	.word	0x42420480
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002854:	601a      	str	r2, [r3, #0]
      
      /* Get timeout */
      tickstart = HAL_GetTick();
 8002856:	f000 fb37 	bl	8002ec8 <HAL_GetTick>
 800285a:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285c:	2302      	movs	r3, #2
 800285e:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002862:	fab2 f282 	clz	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002866:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800286a:	fab2 f282 	clz	r2, r2
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800286e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002870:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002874:	fab3 f383 	clz	r3, r3
 8002878:	2201      	movs	r2, #1
 800287a:	f003 031f 	and.w	r3, r3, #31
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	420b      	tst	r3, r1
 8002884:	d0b5      	beq.n	80027f2 <HAL_RCC_OscConfig+0x2ca>
      {
        if((HAL_GetTick()-tickstart) > LSI_TIMEOUT_VALUE)
 8002886:	f000 fb1f 	bl	8002ec8 <HAL_GetTick>
 800288a:	1b80      	subs	r0, r0, r6
 800288c:	2864      	cmp	r0, #100	; 0x64
 800288e:	d9e5      	bls.n	800285c <HAL_RCC_OscConfig+0x334>
 8002890:	e6b4      	b.n	80025fc <HAL_RCC_OscConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock */
    __PWR_CLK_ENABLE();
 8002892:	4d97      	ldr	r5, [pc, #604]	; (8002af0 <HAL_RCC_OscConfig+0x5c8>)

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8002894:	4a97      	ldr	r2, [pc, #604]	; (8002af4 <HAL_RCC_OscConfig+0x5cc>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock */
    __PWR_CLK_ENABLE();
 8002896:	69eb      	ldr	r3, [r5, #28]
 8002898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800289c:	61eb      	str	r3, [r5, #28]

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 800289e:	6813      	ldr	r3, [r2, #0]
 80028a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028a6:	f000 fb0f 	bl	8002ec8 <HAL_GetTick>
 80028aa:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80028ac:	4b91      	ldr	r3, [pc, #580]	; (8002af4 <HAL_RCC_OscConfig+0x5cc>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	05db      	lsls	r3, r3, #23
 80028b2:	d54d      	bpl.n	8002950 <HAL_RCC_OscConfig+0x428>
        return HAL_TIMEOUT;
      }      
    }

    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 80028b4:	6a2b      	ldr	r3, [r5, #32]
 80028b6:	f023 0305 	bic.w	r3, r3, #5
 80028ba:	622b      	str	r3, [r5, #32]
    
    /* Get timeout */
    tickstart = HAL_GetTick();
 80028bc:	f000 fb04 	bl	8002ec8 <HAL_GetTick>
 80028c0:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c2:	2302      	movs	r3, #2
 80028c4:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80028c8:	fab2 f282 	clz	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028cc:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80028d0:	fab2 f282 	clz	r2, r2
      
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028d8:	f3c2 1242 	ubfx	r2, r2, #5, #3
 80028dc:	429a      	cmp	r2, r3
 80028de:	bf0c      	ite	eq
 80028e0:	6a29      	ldreq	r1, [r5, #32]
 80028e2:	6a69      	ldrne	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e4:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80028e8:	fab3 f383 	clz	r3, r3
 80028ec:	2201      	movs	r2, #1
 80028ee:	f003 031f 	and.w	r3, r3, #31
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	420b      	tst	r3, r1
 80028f8:	d130      	bne.n	800295c <HAL_RCC_OscConfig+0x434>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028fa:	6a2b      	ldr	r3, [r5, #32]
 80028fc:	68e2      	ldr	r2, [r4, #12]
 80028fe:	f023 0305 	bic.w	r3, r3, #5
 8002902:	4313      	orrs	r3, r2
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002904:	2a01      	cmp	r2, #1
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002906:	622b      	str	r3, [r5, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002908:	d138      	bne.n	800297c <HAL_RCC_OscConfig+0x454>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800290a:	f000 fadd 	bl	8002ec8 <HAL_GetTick>
 800290e:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002910:	2302      	movs	r3, #2
 8002912:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002916:	fab2 f282 	clz	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291a:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800291e:	fab2 f282 	clz	r2, r2
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002922:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002926:	f3c2 1242 	ubfx	r2, r2, #5, #3
 800292a:	429a      	cmp	r2, r3
 800292c:	bf0c      	ite	eq
 800292e:	6a29      	ldreq	r1, [r5, #32]
 8002930:	6a69      	ldrne	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002932:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002936:	fab3 f383 	clz	r3, r3
 800293a:	2201      	movs	r2, #1
 800293c:	f003 031f 	and.w	r3, r3, #31
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	420b      	tst	r3, r1
 8002946:	d011      	beq.n	800296c <HAL_RCC_OscConfig+0x444>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002948:	69e2      	ldr	r2, [r4, #28]
 800294a:	2a00      	cmp	r2, #0
 800294c:	d13d      	bne.n	80029ca <HAL_RCC_OscConfig+0x4a2>
 800294e:	e08b      	b.n	8002a68 <HAL_RCC_OscConfig+0x540>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick()-tickstart) > DBP_TIMEOUT_VALUE)
 8002950:	f000 faba 	bl	8002ec8 <HAL_GetTick>
 8002954:	1b80      	subs	r0, r0, r6
 8002956:	2864      	cmp	r0, #100	; 0x64
 8002958:	d9a8      	bls.n	80028ac <HAL_RCC_OscConfig+0x384>
 800295a:	e64f      	b.n	80025fc <HAL_RCC_OscConfig+0xd4>
    tickstart = HAL_GetTick();
      
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    {
      if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 800295c:	f000 fab4 	bl	8002ec8 <HAL_GetTick>
 8002960:	f241 3388 	movw	r3, #5000	; 0x1388
 8002964:	1b80      	subs	r0, r0, r6
 8002966:	4298      	cmp	r0, r3
 8002968:	d9ab      	bls.n	80028c2 <HAL_RCC_OscConfig+0x39a>
 800296a:	e647      	b.n	80025fc <HAL_RCC_OscConfig+0xd4>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 800296c:	f000 faac 	bl	8002ec8 <HAL_GetTick>
 8002970:	f241 3388 	movw	r3, #5000	; 0x1388
 8002974:	1b80      	subs	r0, r0, r6
 8002976:	4298      	cmp	r0, r3
 8002978:	d9ca      	bls.n	8002910 <HAL_RCC_OscConfig+0x3e8>
 800297a:	e63f      	b.n	80025fc <HAL_RCC_OscConfig+0xd4>
      }
    }
    else
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800297c:	f000 faa4 	bl	8002ec8 <HAL_GetTick>
 8002980:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002982:	2302      	movs	r3, #2
 8002984:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002988:	fab2 f282 	clz	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298c:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002990:	fab2 f282 	clz	r2, r2
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002994:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002998:	f3c2 1242 	ubfx	r2, r2, #5, #3
 800299c:	429a      	cmp	r2, r3
 800299e:	bf0c      	ite	eq
 80029a0:	6a29      	ldreq	r1, [r5, #32]
 80029a2:	6a69      	ldrne	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a4:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80029a8:	fab3 f383 	clz	r3, r3
 80029ac:	2201      	movs	r2, #1
 80029ae:	f003 031f 	and.w	r3, r3, #31
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	420b      	tst	r3, r1
 80029b8:	d0c6      	beq.n	8002948 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 80029ba:	f000 fa85 	bl	8002ec8 <HAL_GetTick>
 80029be:	f241 3388 	movw	r3, #5000	; 0x1388
 80029c2:	1b80      	subs	r0, r0, r6
 80029c4:	4298      	cmp	r0, r3
 80029c6:	d9dc      	bls.n	8002982 <HAL_RCC_OscConfig+0x45a>
 80029c8:	e618      	b.n	80025fc <HAL_RCC_OscConfig+0xd4>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029ca:	4d49      	ldr	r5, [pc, #292]	; (8002af0 <HAL_RCC_OscConfig+0x5c8>)
 80029cc:	686b      	ldr	r3, [r5, #4]
 80029ce:	f003 030c 	and.w	r3, r3, #12
 80029d2:	2b08      	cmp	r3, #8
 80029d4:	f43f ade3 	beq.w	800259e <HAL_RCC_OscConfig+0x76>
 80029d8:	4e47      	ldr	r6, [pc, #284]	; (8002af8 <HAL_RCC_OscConfig+0x5d0>)
 80029da:	2300      	movs	r3, #0
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029dc:	2a02      	cmp	r2, #2
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029de:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029e0:	d15c      	bne.n	8002a9c <HAL_RCC_OscConfig+0x574>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029e2:	f000 fa71 	bl	8002ec8 <HAL_GetTick>
 80029e6:	4607      	mov	r7, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029ec:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80029f0:	fab3 f383 	clz	r3, r3
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029f4:	f043 0320 	orr.w	r3, r3, #32
 80029f8:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d135      	bne.n	8002a6c <HAL_RCC_OscConfig+0x544>
 8002a00:	682a      	ldr	r2, [r5, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a06:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002a0a:	fab3 f383 	clz	r3, r3
 8002a0e:	2101      	movs	r1, #1
 8002a10:	f003 031f 	and.w	r3, r3, #31
 8002a14:	fa01 f303 	lsl.w	r3, r1, r3
 8002a18:	4213      	tst	r3, r2
 8002a1a:	d12d      	bne.n	8002a78 <HAL_RCC_OscConfig+0x550>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a1c:	6a20      	ldr	r0, [r4, #32]
 8002a1e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002a20:	686b      	ldr	r3, [r5, #4]
 8002a22:	4302      	orrs	r2, r0
 8002a24:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	606b      	str	r3, [r5, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a2c:	6031      	str	r1, [r6, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a2e:	f000 fa4b 	bl	8002ec8 <HAL_GetTick>
 8002a32:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a38:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002a3c:	fab3 f383 	clz	r3, r3
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a40:	f043 0320 	orr.w	r3, r3, #32
 8002a44:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d11b      	bne.n	8002a84 <HAL_RCC_OscConfig+0x55c>
 8002a4c:	6829      	ldr	r1, [r5, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a52:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002a56:	fab3 f383 	clz	r3, r3
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f003 031f 	and.w	r3, r3, #31
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	420b      	tst	r3, r1
 8002a66:	d013      	beq.n	8002a90 <HAL_RCC_OscConfig+0x568>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8002a68:	2000      	movs	r0, #0
 8002a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6c:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002a70:	fab2 f282 	clz	r2, r2

        /* Get timeout */
        tickstart = HAL_GetTick();
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a74:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8002a76:	e7c4      	b.n	8002a02 <HAL_RCC_OscConfig+0x4da>
        {
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 8002a78:	f000 fa26 	bl	8002ec8 <HAL_GetTick>
 8002a7c:	1bc0      	subs	r0, r0, r7
 8002a7e:	2864      	cmp	r0, #100	; 0x64
 8002a80:	d9b2      	bls.n	80029e8 <HAL_RCC_OscConfig+0x4c0>
 8002a82:	e5bb      	b.n	80025fc <HAL_RCC_OscConfig+0xd4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a84:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002a88:	fab2 f282 	clz	r2, r2

        /* Get timeout */
        tickstart = HAL_GetTick();
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a8c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002a8e:	e7de      	b.n	8002a4e <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 8002a90:	f000 fa1a 	bl	8002ec8 <HAL_GetTick>
 8002a94:	1b00      	subs	r0, r0, r4
 8002a96:	2864      	cmp	r0, #100	; 0x64
 8002a98:	d9cc      	bls.n	8002a34 <HAL_RCC_OscConfig+0x50c>
 8002a9a:	e5af      	b.n	80025fc <HAL_RCC_OscConfig+0xd4>
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a9c:	f000 fa14 	bl	8002ec8 <HAL_GetTick>
 8002aa0:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002aa6:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002aaa:	fab3 f383 	clz	r3, r3
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aae:	f043 0320 	orr.w	r3, r3, #32
 8002ab2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d101      	bne.n	8002abe <HAL_RCC_OscConfig+0x596>
 8002aba:	6829      	ldr	r1, [r5, #0]
 8002abc:	e004      	b.n	8002ac8 <HAL_RCC_OscConfig+0x5a0>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abe:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002ac2:	fab2 f282 	clz	r2, r2
 8002ac6:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002acc:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002ad0:	fab3 f383 	clz	r3, r3
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f003 031f 	and.w	r3, r3, #31
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	420b      	tst	r3, r1
 8002ae0:	d0c2      	beq.n	8002a68 <HAL_RCC_OscConfig+0x540>
        {
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 8002ae2:	f000 f9f1 	bl	8002ec8 <HAL_GetTick>
 8002ae6:	1b00      	subs	r0, r0, r4
 8002ae8:	2864      	cmp	r0, #100	; 0x64
 8002aea:	d9da      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x57a>
 8002aec:	e586      	b.n	80025fc <HAL_RCC_OscConfig+0xd4>
 8002aee:	bf00      	nop
 8002af0:	40021000 	.word	0x40021000
 8002af4:	40007000 	.word	0x40007000
 8002af8:	42420060 	.word	0x42420060

08002afc <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002afc:	4ab0      	ldr	r2, [pc, #704]	; (8002dc0 <HAL_RCC_ClockConfig+0x2c4>)
  *         If a clock source which is not yet ready is selected, the switch will
  *         occur when the clock source will be ready.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002afe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002b00:	6813      	ldr	r3, [r2, #0]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	4299      	cmp	r1, r3
  *         If a clock source which is not yet ready is selected, the switch will
  *         occur when the clock source will be ready.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b08:	4604      	mov	r4, r0
 8002b0a:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002b0c:	f240 80a9 	bls.w	8002c62 <HAL_RCC_ClockConfig+0x166>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b10:	6813      	ldr	r3, [r2, #0]
 8002b12:	f023 0307 	bic.w	r3, r3, #7
 8002b16:	430b      	orrs	r3, r1
 8002b18:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002b1a:	6813      	ldr	r3, [r2, #0]
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	428b      	cmp	r3, r1
 8002b22:	d001      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x2c>
    {
      return HAL_ERROR;
 8002b24:	2001      	movs	r0, #1
 8002b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    /*-------------------------- HCLK Configuration ----------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b28:	6801      	ldr	r1, [r0, #0]
 8002b2a:	078f      	lsls	r7, r1, #30
    {
      assert_param(IS_RCC_SYSCLK_DIV(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b2c:	bf41      	itttt	mi
 8002b2e:	48a5      	ldrmi	r0, [pc, #660]	; (8002dc4 <HAL_RCC_ClockConfig+0x2c8>)
 8002b30:	6843      	ldrmi	r3, [r0, #4]
 8002b32:	f023 02f0 	bicmi.w	r2, r3, #240	; 0xf0
 8002b36:	68a3      	ldrmi	r3, [r4, #8]
 8002b38:	bf44      	itt	mi
 8002b3a:	4313      	orrmi	r3, r2
 8002b3c:	6043      	strmi	r3, [r0, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b3e:	07ce      	lsls	r6, r1, #31
 8002b40:	d40b      	bmi.n	8002b5a <HAL_RCC_ClockConfig+0x5e>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b42:	6821      	ldr	r1, [r4, #0]
 8002b44:	074d      	lsls	r5, r1, #29
 8002b46:	f140 812b 	bpl.w	8002da0 <HAL_RCC_ClockConfig+0x2a4>
  {
    assert_param(IS_RCC_HCLK_DIV(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b4a:	489e      	ldr	r0, [pc, #632]	; (8002dc4 <HAL_RCC_ClockConfig+0x2c8>)
 8002b4c:	6843      	ldr	r3, [r0, #4]
 8002b4e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b52:	68e3      	ldr	r3, [r4, #12]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	6043      	str	r3, [r0, #4]
 8002b58:	e122      	b.n	8002da0 <HAL_RCC_ClockConfig+0x2a4>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b5a:	6862      	ldr	r2, [r4, #4]
 8002b5c:	4d99      	ldr	r5, [pc, #612]	; (8002dc4 <HAL_RCC_ClockConfig+0x2c8>)
 8002b5e:	2a01      	cmp	r2, #1
 8002b60:	d115      	bne.n	8002b8e <HAL_RCC_ClockConfig+0x92>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b62:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002b66:	fa91 f3a1 	rbit	r3, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002b6a:	fab3 f383 	clz	r3, r3
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6e:	f043 0320 	orr.w	r3, r3, #32
 8002b72:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d101      	bne.n	8002b7e <HAL_RCC_ClockConfig+0x82>
 8002b7a:	6828      	ldr	r0, [r5, #0]
 8002b7c:	e004      	b.n	8002b88 <HAL_RCC_ClockConfig+0x8c>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7e:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002b82:	fab1 f181 	clz	r1, r1
 8002b86:	6a68      	ldr	r0, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b8c:	e02a      	b.n	8002be4 <HAL_RCC_ClockConfig+0xe8>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b8e:	2a02      	cmp	r2, #2
 8002b90:	d115      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xc2>
 8002b92:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b96:	fa91 f3a1 	rbit	r3, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002b9a:	fab3 f383 	clz	r3, r3
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b9e:	f043 0320 	orr.w	r3, r3, #32
 8002ba2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d101      	bne.n	8002bae <HAL_RCC_ClockConfig+0xb2>
 8002baa:	6828      	ldr	r0, [r5, #0]
 8002bac:	e004      	b.n	8002bb8 <HAL_RCC_ClockConfig+0xbc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bae:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002bb2:	fab1 f181 	clz	r1, r1
 8002bb6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bbc:	e012      	b.n	8002be4 <HAL_RCC_ClockConfig+0xe8>
 8002bbe:	2102      	movs	r1, #2
 8002bc0:	fa91 f3a1 	rbit	r3, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002bc4:	fab3 f383 	clz	r3, r3
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc8:	f043 0320 	orr.w	r3, r3, #32
 8002bcc:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d101      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0xdc>
 8002bd4:	6828      	ldr	r0, [r5, #0]
 8002bd6:	e004      	b.n	8002be2 <HAL_RCC_ClockConfig+0xe6>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd8:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002bdc:	fab1 f181 	clz	r1, r1
 8002be0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be2:	2302      	movs	r3, #2
 8002be4:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002be8:	fab3 f383 	clz	r3, r3
 8002bec:	2101      	movs	r1, #1
 8002bee:	f003 031f 	and.w	r3, r3, #31
 8002bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf6:	4203      	tst	r3, r0
 8002bf8:	d094      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x28>
        {
          return HAL_ERROR;
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bfa:	686b      	ldr	r3, [r5, #4]
 8002bfc:	f023 0303 	bic.w	r3, r3, #3
 8002c00:	431a      	orrs	r2, r3
 8002c02:	606a      	str	r2, [r5, #4]

      /* Get timeout */
      tickstart = HAL_GetTick();
 8002c04:	f000 f960 	bl	8002ec8 <HAL_GetTick>
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c08:	6863      	ldr	r3, [r4, #4]
 8002c0a:	2b01      	cmp	r3, #1
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);

      /* Get timeout */
      tickstart = HAL_GetTick();
 8002c0c:	4606      	mov	r6, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c0e:	d10d      	bne.n	8002c2c <HAL_RCC_ClockConfig+0x130>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c10:	686b      	ldr	r3, [r5, #4]
 8002c12:	f003 030c 	and.w	r3, r3, #12
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d093      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x46>
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c1a:	f000 f955 	bl	8002ec8 <HAL_GetTick>
 8002c1e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002c22:	1b80      	subs	r0, r0, r6
 8002c24:	4298      	cmp	r0, r3
 8002c26:	d9f3      	bls.n	8002c10 <HAL_RCC_ClockConfig+0x114>
          {
            return HAL_TIMEOUT;
 8002c28:	2003      	movs	r0, #3
 8002c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d113      	bne.n	8002c58 <HAL_RCC_ClockConfig+0x15c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c30:	686b      	ldr	r3, [r5, #4]
 8002c32:	f003 030c 	and.w	r3, r3, #12
 8002c36:	2b08      	cmp	r3, #8
 8002c38:	d083      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x46>
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c3a:	f000 f945 	bl	8002ec8 <HAL_GetTick>
 8002c3e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002c42:	1b80      	subs	r0, r0, r6
 8002c44:	4298      	cmp	r0, r3
 8002c46:	d9f3      	bls.n	8002c30 <HAL_RCC_ClockConfig+0x134>
 8002c48:	e7ee      	b.n	8002c28 <HAL_RCC_ClockConfig+0x12c>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c4a:	f000 f93d 	bl	8002ec8 <HAL_GetTick>
 8002c4e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002c52:	1b80      	subs	r0, r0, r6
 8002c54:	4298      	cmp	r0, r3
 8002c56:	d8e7      	bhi.n	8002c28 <HAL_RCC_ClockConfig+0x12c>
          }
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c58:	686b      	ldr	r3, [r5, #4]
 8002c5a:	f013 0f0c 	tst.w	r3, #12
 8002c5e:	d1f4      	bne.n	8002c4a <HAL_RCC_ClockConfig+0x14e>
 8002c60:	e76f      	b.n	8002b42 <HAL_RCC_ClockConfig+0x46>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration ----------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c62:	6801      	ldr	r1, [r0, #0]
 8002c64:	0788      	lsls	r0, r1, #30
    {
      assert_param(IS_RCC_SYSCLK_DIV(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c66:	bf41      	itttt	mi
 8002c68:	4856      	ldrmi	r0, [pc, #344]	; (8002dc4 <HAL_RCC_ClockConfig+0x2c8>)
 8002c6a:	6843      	ldrmi	r3, [r0, #4]
 8002c6c:	f023 02f0 	bicmi.w	r2, r3, #240	; 0xf0
 8002c70:	68a3      	ldrmi	r3, [r4, #8]
 8002c72:	bf44      	itt	mi
 8002c74:	4313      	orrmi	r3, r2
 8002c76:	6043      	strmi	r3, [r0, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c78:	07ca      	lsls	r2, r1, #31
 8002c7a:	d40c      	bmi.n	8002c96 <HAL_RCC_ClockConfig+0x19a>
        }
      }
    }

    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7c:	4a50      	ldr	r2, [pc, #320]	; (8002dc0 <HAL_RCC_ClockConfig+0x2c4>)
 8002c7e:	6813      	ldr	r3, [r2, #0]
 8002c80:	f023 0307 	bic.w	r3, r3, #7
 8002c84:	4333      	orrs	r3, r6
 8002c86:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c88:	6813      	ldr	r3, [r2, #0]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	42b3      	cmp	r3, r6
 8002c90:	f47f af48 	bne.w	8002b24 <HAL_RCC_ClockConfig+0x28>
 8002c94:	e755      	b.n	8002b42 <HAL_RCC_ClockConfig+0x46>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c96:	6862      	ldr	r2, [r4, #4]
 8002c98:	4d4a      	ldr	r5, [pc, #296]	; (8002dc4 <HAL_RCC_ClockConfig+0x2c8>)
 8002c9a:	2a01      	cmp	r2, #1
 8002c9c:	d115      	bne.n	8002cca <HAL_RCC_ClockConfig+0x1ce>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002ca2:	fa91 f3a1 	rbit	r3, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002ca6:	fab3 f383 	clz	r3, r3
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002caa:	f043 0320 	orr.w	r3, r3, #32
 8002cae:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d101      	bne.n	8002cba <HAL_RCC_ClockConfig+0x1be>
 8002cb6:	6828      	ldr	r0, [r5, #0]
 8002cb8:	e004      	b.n	8002cc4 <HAL_RCC_ClockConfig+0x1c8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cba:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002cbe:	fab1 f181 	clz	r1, r1
 8002cc2:	6a68      	ldr	r0, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cc8:	e02a      	b.n	8002d20 <HAL_RCC_ClockConfig+0x224>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cca:	2a02      	cmp	r2, #2
 8002ccc:	d115      	bne.n	8002cfa <HAL_RCC_ClockConfig+0x1fe>
 8002cce:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002cd2:	fa91 f3a1 	rbit	r3, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002cd6:	fab3 f383 	clz	r3, r3
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cda:	f043 0320 	orr.w	r3, r3, #32
 8002cde:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d101      	bne.n	8002cea <HAL_RCC_ClockConfig+0x1ee>
 8002ce6:	6828      	ldr	r0, [r5, #0]
 8002ce8:	e004      	b.n	8002cf4 <HAL_RCC_ClockConfig+0x1f8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cea:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002cee:	fab1 f181 	clz	r1, r1
 8002cf2:	6a68      	ldr	r0, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cf8:	e012      	b.n	8002d20 <HAL_RCC_ClockConfig+0x224>
 8002cfa:	2102      	movs	r1, #2
 8002cfc:	fa91 f3a1 	rbit	r3, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002d00:	fab3 f383 	clz	r3, r3
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d04:	f043 0320 	orr.w	r3, r3, #32
 8002d08:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d101      	bne.n	8002d14 <HAL_RCC_ClockConfig+0x218>
 8002d10:	6828      	ldr	r0, [r5, #0]
 8002d12:	e004      	b.n	8002d1e <HAL_RCC_ClockConfig+0x222>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d14:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002d18:	fab1 f181 	clz	r1, r1
 8002d1c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1e:	2302      	movs	r3, #2
 8002d20:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002d24:	fab3 f383 	clz	r3, r3
 8002d28:	2101      	movs	r1, #1
 8002d2a:	f003 031f 	and.w	r3, r3, #31
 8002d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d32:	4203      	tst	r3, r0
 8002d34:	f43f aef6 	beq.w	8002b24 <HAL_RCC_ClockConfig+0x28>
        {
          return HAL_ERROR;
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d38:	686b      	ldr	r3, [r5, #4]
 8002d3a:	f023 0303 	bic.w	r3, r3, #3
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	606a      	str	r2, [r5, #4]

      /* Get timeout */
      tickstart = HAL_GetTick();
 8002d42:	f000 f8c1 	bl	8002ec8 <HAL_GetTick>

      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d46:	6863      	ldr	r3, [r4, #4]
 8002d48:	2b01      	cmp	r3, #1
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);

      /* Get timeout */
      tickstart = HAL_GetTick();
 8002d4a:	4607      	mov	r7, r0

      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d4c:	d10c      	bne.n	8002d68 <HAL_RCC_ClockConfig+0x26c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d4e:	686b      	ldr	r3, [r5, #4]
 8002d50:	f003 030c 	and.w	r3, r3, #12
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	d091      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x180>
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d58:	f000 f8b6 	bl	8002ec8 <HAL_GetTick>
 8002d5c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d60:	1bc0      	subs	r0, r0, r7
 8002d62:	4298      	cmp	r0, r3
 8002d64:	d9f3      	bls.n	8002d4e <HAL_RCC_ClockConfig+0x252>
 8002d66:	e75f      	b.n	8002c28 <HAL_RCC_ClockConfig+0x12c>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d114      	bne.n	8002d96 <HAL_RCC_ClockConfig+0x29a>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d6c:	686b      	ldr	r3, [r5, #4]
 8002d6e:	f003 030c 	and.w	r3, r3, #12
 8002d72:	2b08      	cmp	r3, #8
 8002d74:	d082      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x180>
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d76:	f000 f8a7 	bl	8002ec8 <HAL_GetTick>
 8002d7a:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d7e:	1bc0      	subs	r0, r0, r7
 8002d80:	4298      	cmp	r0, r3
 8002d82:	d9f3      	bls.n	8002d6c <HAL_RCC_ClockConfig+0x270>
 8002d84:	e750      	b.n	8002c28 <HAL_RCC_ClockConfig+0x12c>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d86:	f000 f89f 	bl	8002ec8 <HAL_GetTick>
 8002d8a:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d8e:	1bc0      	subs	r0, r0, r7
 8002d90:	4298      	cmp	r0, r3
 8002d92:	f63f af49 	bhi.w	8002c28 <HAL_RCC_ClockConfig+0x12c>
          }
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d96:	686b      	ldr	r3, [r5, #4]
 8002d98:	f013 0f0c 	tst.w	r3, #12
 8002d9c:	d1f3      	bne.n	8002d86 <HAL_RCC_ClockConfig+0x28a>
 8002d9e:	e76d      	b.n	8002c7c <HAL_RCC_ClockConfig+0x180>
    assert_param(IS_RCC_HCLK_DIV(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da0:	070b      	lsls	r3, r1, #28
  {
    assert_param(IS_RCC_HCLK_DIV(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002da2:	bf41      	itttt	mi
 8002da4:	4a07      	ldrmi	r2, [pc, #28]	; (8002dc4 <HAL_RCC_ClockConfig+0x2c8>)
 8002da6:	6921      	ldrmi	r1, [r4, #16]
 8002da8:	6853      	ldrmi	r3, [r2, #4]
 8002daa:	f423 5360 	bicmi.w	r3, r3, #14336	; 0x3800
 8002dae:	bf44      	itt	mi
 8002db0:	ea43 03c1 	orrmi.w	r3, r3, r1, lsl #3
 8002db4:	6053      	strmi	r3, [r2, #4]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002db6:	200f      	movs	r0, #15
 8002db8:	f000 f859 	bl	8002e6e <HAL_InitTick>

  return HAL_OK;
 8002dbc:	2000      	movs	r0, #0
}
 8002dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dc0:	40022000 	.word	0x40022000
 8002dc4:	40021000 	.word	0x40021000

08002dc8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0, prediv = 0, pllmul = 0, pllclk = 0;
  uint32_t sysclockfreq = 0;

  tmpreg = RCC->CFGR;
 8002dc8:	4915      	ldr	r1, [pc, #84]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x58>)
  *
  * @param  None
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dca:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0, prediv = 0, pllmul = 0, pllclk = 0;
  uint32_t sysclockfreq = 0;

  tmpreg = RCC->CFGR;
 8002dcc:	684c      	ldr	r4, [r1, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dce:	f004 030c 	and.w	r3, r4, #12
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	d121      	bne.n	8002e1a <HAL_RCC_GetSysClockFreq+0x52>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd6:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8002dda:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002dde:	fab3 f383 	clz	r3, r3
  case RCC_SYSCLKSOURCE_STATUS_HSE:    /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
    break;

  case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock  source */
    pllmul = PLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002de2:	f404 1270 	and.w	r2, r4, #3932160	; 0x3c0000
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dec:	4a0d      	ldr	r2, [pc, #52]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x5c>)
    prediv = PredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002dee:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  case RCC_SYSCLKSOURCE_STATUS_HSE:    /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
    break;

  case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock  source */
    pllmul = PLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002df0:	5cd2      	ldrb	r2, [r2, r3]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df2:	230f      	movs	r3, #15
 8002df4:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002df8:	fab3 f383 	clz	r3, r3
    prediv = PredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002dfc:	f001 010f 	and.w	r1, r1, #15
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	fa21 f303 	lsr.w	r3, r1, r3
 8002e06:	4908      	ldr	r1, [pc, #32]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x60>)
 8002e08:	5cc8      	ldrb	r0, [r1, r3]
    if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002e0a:	03e3      	lsls	r3, r4, #15
      pllclk = (HSE_VALUE/prediv) * pllmul;
    }
    else
    {
      /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
      pllclk = (HSI_VALUE >> 1) * pllmul;
 8002e0c:	bf52      	itee	pl
 8002e0e:	4807      	ldrpl	r0, [pc, #28]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x64>)
    pllmul = PLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
    prediv = PredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
    if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
    {
      /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
      pllclk = (HSE_VALUE/prediv) * pllmul;
 8002e10:	4b07      	ldrmi	r3, [pc, #28]	; (8002e30 <HAL_RCC_GetSysClockFreq+0x68>)
 8002e12:	fbb3 f0f0 	udivmi	r0, r3, r0
    }
    else
    {
      /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
      pllclk = (HSI_VALUE >> 1) * pllmul;
 8002e16:	4350      	muls	r0, r2
 8002e18:	bd10      	pop	{r4, pc}

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
  case RCC_SYSCLKSOURCE_STATUS_HSE:    /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002e1a:	4805      	ldr	r0, [pc, #20]	; (8002e30 <HAL_RCC_GetSysClockFreq+0x68>)
  default:
    sysclockfreq = HSI_VALUE;
    break;
  }
  return sysclockfreq;
}
 8002e1c:	bd10      	pop	{r4, pc}
 8002e1e:	bf00      	nop
 8002e20:	40021000 	.word	0x40021000
 8002e24:	08018e68 	.word	0x08018e68
 8002e28:	08018e58 	.word	0x08018e58
 8002e2c:	003d0900 	.word	0x003d0900
 8002e30:	007a1200 	.word	0x007a1200

08002e34 <HAL_RCC_GetHCLKFreq>:
  *                       
  * @param  None
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e34:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002e36:	f7ff ffc7 	bl	8002dc8 <HAL_RCC_GetSysClockFreq>
 8002e3a:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002e3c:	685a      	ldr	r2, [r3, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3e:	23f0      	movs	r3, #240	; 0xf0
 8002e40:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002e44:	fab3 f383 	clz	r3, r3
 8002e48:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e52:	4a04      	ldr	r2, [pc, #16]	; (8002e64 <HAL_RCC_GetHCLKFreq+0x30>)
 8002e54:	5cd3      	ldrb	r3, [r2, r3]
 8002e56:	40d8      	lsrs	r0, r3
 8002e58:	4b03      	ldr	r3, [pc, #12]	; (8002e68 <HAL_RCC_GetHCLKFreq+0x34>)
 8002e5a:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8002e5c:	bd08      	pop	{r3, pc}
 8002e5e:	bf00      	nop
 8002e60:	40021000 	.word	0x40021000
 8002e64:	08018e48 	.word	0x08018e48
 8002e68:	20000014 	.word	0x20000014

08002e6c <HAL_MspInit>:
  * @brief  Initializes the MSP.
  * @param  None
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8002e6c:	4770      	bx	lr

08002e6e <HAL_InitTick>:
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)

{
 8002e6e:	b510      	push	{r4, lr}
 8002e70:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002e72:	f7ff ffdf 	bl	8002e34 <HAL_RCC_GetHCLKFreq>
 8002e76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e7a:	fbb0 f0f3 	udiv	r0, r0, r3
 8002e7e:	f000 f885 	bl	8002f8c <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8002e82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e86:	4621      	mov	r1, r4
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f000 f843 	bl	8002f14 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8002e8e:	2000      	movs	r0, #0
 8002e90:	bd10      	pop	{r4, pc}
	...

08002e94 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e94:	4a07      	ldr	r2, [pc, #28]	; (8002eb4 <HAL_Init+0x20>)
  * @note                  
  * @param  None
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e96:	b508      	push	{r3, lr}
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e98:	6813      	ldr	r3, [r2, #0]
 8002e9a:	f043 0310 	orr.w	r3, r3, #16
 8002e9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ea0:	2003      	movs	r0, #3
 8002ea2:	f000 f825 	bl	8002ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ea6:	200f      	movs	r0, #15
 8002ea8:	f7ff ffe1 	bl	8002e6e <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002eac:	f7ff ffde 	bl	8002e6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	bd08      	pop	{r3, pc}
 8002eb4:	40022000 	.word	0x40022000

08002eb8 <HAL_IncTick>:
  * @param  None
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8002eb8:	4a02      	ldr	r2, [pc, #8]	; (8002ec4 <HAL_IncTick+0xc>)
 8002eba:	6813      	ldr	r3, [r2, #0]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	6013      	str	r3, [r2, #0]
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	20000ba0 	.word	0x20000ba0

08002ec8 <HAL_GetTick>:
  * @param  None
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8002ec8:	4b01      	ldr	r3, [pc, #4]	; (8002ed0 <HAL_GetTick+0x8>)
 8002eca:	6818      	ldr	r0, [r3, #0]
}
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	20000ba0 	.word	0x20000ba0

08002ed4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8002ed4:	b513      	push	{r0, r1, r4, lr}
 8002ed6:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ed8:	f7ff fff6 	bl	8002ec8 <HAL_GetTick>
 8002edc:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8002ede:	f7ff fff3 	bl	8002ec8 <HAL_GetTick>
 8002ee2:	9b01      	ldr	r3, [sp, #4]
 8002ee4:	1b00      	subs	r0, r0, r4
 8002ee6:	4298      	cmp	r0, r3
 8002ee8:	d3f9      	bcc.n	8002ede <HAL_Delay+0xa>
  {
  }
}
 8002eea:	b002      	add	sp, #8
 8002eec:	bd10      	pop	{r4, pc}
	...

08002ef0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ef0:	4a07      	ldr	r2, [pc, #28]	; (8002f10 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002ef2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8002ef4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002ef8:	041b      	lsls	r3, r3, #16
 8002efa:	0c1b      	lsrs	r3, r3, #16
 8002efc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 8002f04:	f000 0007 	and.w	r0, r0, #7

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 8002f08:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8002f0c:	60d3      	str	r3, [r2, #12]
 8002f0e:	4770      	bx	lr
 8002f10:	e000ed00 	.word	0xe000ed00

08002f14 <HAL_NVIC_SetPriority>:

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 8002f14:	4b15      	ldr	r3, [pc, #84]	; (8002f6c <HAL_NVIC_SetPriority+0x58>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f1c:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8002f1e:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8002f22:	1d1c      	adds	r4, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8002f24:	2d04      	cmp	r5, #4
 8002f26:	bf28      	it	cs
 8002f28:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8002f2a:	2c06      	cmp	r4, #6
 8002f2c:	bf8c      	ite	hi
 8002f2e:	3b03      	subhi	r3, #3
 8002f30:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8002f32:	2401      	movs	r4, #1
 8002f34:	fa04 f603 	lsl.w	r6, r4, r3

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8002f38:	40ac      	lsls	r4, r5
 8002f3a:	3c01      	subs	r4, #1
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8002f3c:	3e01      	subs	r6, #1

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8002f3e:	4021      	ands	r1, r4
 8002f40:	4099      	lsls	r1, r3
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8002f42:	4032      	ands	r2, r6
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
 8002f44:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
 8002f46:	ea42 0201 	orr.w	r2, r2, r1
 8002f4a:	ea4f 1202 	mov.w	r2, r2, lsl #4
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002f4e:	bfaf      	iteee	ge
 8002f50:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002f54:	f000 000f 	andlt.w	r0, r0, #15
 8002f58:	4b05      	ldrlt	r3, [pc, #20]	; (8002f70 <HAL_NVIC_SetPriority+0x5c>)
 8002f5a:	b2d2      	uxtblt	r2, r2
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002f5c:	bfa5      	ittet	ge
 8002f5e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8002f62:	b2d2      	uxtbge	r2, r2
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002f64:	541a      	strblt	r2, [r3, r0]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002f66:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8002f6a:	bd70      	pop	{r4, r5, r6, pc}
 8002f6c:	e000ed00 	.word	0xe000ed00
 8002f70:	e000ed14 	.word	0xe000ed14

08002f74 <HAL_NVIC_EnableIRQ>:
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8002f74:	0941      	lsrs	r1, r0, #5
 8002f76:	2301      	movs	r3, #1
 8002f78:	f000 001f 	and.w	r0, r0, #31
 8002f7c:	4a02      	ldr	r2, [pc, #8]	; (8002f88 <HAL_NVIC_EnableIRQ+0x14>)
 8002f7e:	4083      	lsls	r3, r0
 8002f80:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	e000e100 	.word	0xe000e100

08002f8c <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8002f8c:	3801      	subs	r0, #1
 8002f8e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8002f92:	bf3f      	itttt	cc
 8002f94:	4b06      	ldrcc	r3, [pc, #24]	; (8002fb0 <HAL_SYSTICK_Config+0x24>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002f96:	4a07      	ldrcc	r2, [pc, #28]	; (8002fb4 <HAL_SYSTICK_Config+0x28>)
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8002f98:	6058      	strcc	r0, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002f9a:	21f0      	movcc	r1, #240	; 0xf0
 8002f9c:	bf3f      	itttt	cc
 8002f9e:	f882 1023 	strbcc.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8002fa2:	2000      	movcc	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fa4:	2207      	movcc	r2, #7
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8002fa6:	6098      	strcc	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fa8:	bf34      	ite	cc
 8002faa:	601a      	strcc	r2, [r3, #0]
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8002fac:	2001      	movcs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002fae:	4770      	bx	lr
 8002fb0:	e000e010 	.word	0xe000e010
 8002fb4:	e000ed00 	.word	0xe000ed00

08002fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fbc:	680f      	ldr	r7, [r1, #0]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002fbe:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	409a      	lsls	r2, r3
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fc4:	ea02 0507 	and.w	r5, r2, r7
 
    if (iocurrent == ioposition)
 8002fc8:	4295      	cmp	r5, r2
 8002fca:	f040 80ac 	bne.w	8003126 <HAL_GPIO_Init+0x16e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/ 
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8002fce:	684c      	ldr	r4, [r1, #4]
 8002fd0:	f024 0c10 	bic.w	ip, r4, #16
 8002fd4:	f1bc 0f02 	cmp.w	ip, #2
 8002fd8:	d114      	bne.n	8003004 <HAL_GPIO_Init+0x4c>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8002fda:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8002fde:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002fe2:	f003 0607 	and.w	r6, r3, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8002fe6:	f8de 2020 	ldr.w	r2, [lr, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002fea:	00b6      	lsls	r6, r6, #2
 8002fec:	f04f 080f 	mov.w	r8, #15
 8002ff0:	fa08 f806 	lsl.w	r8, r8, r6
 8002ff4:	ea22 0808 	bic.w	r8, r2, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ff8:	690a      	ldr	r2, [r1, #16]
 8002ffa:	40b2      	lsls	r2, r6
 8002ffc:	ea48 0202 	orr.w	r2, r8, r2
        GPIOx->AFR[position >> 3] = temp;
 8003000:	f8ce 2020 	str.w	r2, [lr, #32]
 8003004:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003008:	2203      	movs	r2, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800300a:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800300c:	fa02 f20e 	lsl.w	r2, r2, lr
 8003010:	43d2      	mvns	r2, r2
 8003012:	ea02 0806 	and.w	r8, r2, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003016:	f004 0603 	and.w	r6, r4, #3
 800301a:	fa06 f60e 	lsl.w	r6, r6, lr
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800301e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003022:	ea48 0606 	orr.w	r6, r8, r6
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003026:	f1bc 0f01 	cmp.w	ip, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;
 800302a:	6006      	str	r6, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800302c:	d811      	bhi.n	8003052 <HAL_GPIO_Init+0x9a>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800302e:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003030:	ea02 0c06 	and.w	ip, r2, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8003034:	68ce      	ldr	r6, [r1, #12]
 8003036:	fa06 f60e 	lsl.w	r6, r6, lr
 800303a:	ea4c 0606 	orr.w	r6, ip, r6
        GPIOx->OSPEEDR = temp;
 800303e:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003040:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003042:	ea26 0c05 	bic.w	ip, r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003046:	f3c4 1600 	ubfx	r6, r4, #4, #1
 800304a:	409e      	lsls	r6, r3
 800304c:	ea4c 0606 	orr.w	r6, ip, r6
        GPIOx->OTYPER = temp;
 8003050:	6046      	str	r6, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003052:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003054:	ea02 0c06 	and.w	ip, r2, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003058:	688a      	ldr	r2, [r1, #8]
 800305a:	fa02 f60e 	lsl.w	r6, r2, lr
 800305e:	ea4c 0206 	orr.w	r2, ip, r6
      GPIOx->PUPDR = temp;
 8003062:	60c2      	str	r2, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8003064:	00e2      	lsls	r2, r4, #3
 8003066:	d55e      	bpl.n	8003126 <HAL_GPIO_Init+0x16e>
      {
        /* Enable SYSCFG Clock */
        __SYSCFG_CLK_ENABLE();
 8003068:	4e32      	ldr	r6, [pc, #200]	; (8003134 <HAL_GPIO_Init+0x17c>)
 800306a:	69b2      	ldr	r2, [r6, #24]
 800306c:	f042 0201 	orr.w	r2, r2, #1
 8003070:	61b2      	str	r2, [r6, #24]
 8003072:	f023 0603 	bic.w	r6, r3, #3
 8003076:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800307a:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
  
        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800307e:	f003 0c03 	and.w	ip, r3, #3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
 8003082:	f8d6 e008 	ldr.w	lr, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003086:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800308a:	220f      	movs	r2, #15
 800308c:	fa02 f20c 	lsl.w	r2, r2, ip
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
 8003090:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      {
        /* Enable SYSCFG Clock */
        __SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003094:	ea2e 0e02 	bic.w	lr, lr, r2
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
 8003098:	d015      	beq.n	80030c6 <HAL_GPIO_Init+0x10e>
 800309a:	4a27      	ldr	r2, [pc, #156]	; (8003138 <HAL_GPIO_Init+0x180>)
 800309c:	4290      	cmp	r0, r2
 800309e:	d014      	beq.n	80030ca <HAL_GPIO_Init+0x112>
 80030a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030a4:	4290      	cmp	r0, r2
 80030a6:	d012      	beq.n	80030ce <HAL_GPIO_Init+0x116>
 80030a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030ac:	4290      	cmp	r0, r2
 80030ae:	d010      	beq.n	80030d2 <HAL_GPIO_Init+0x11a>
 80030b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030b4:	4290      	cmp	r0, r2
 80030b6:	d00e      	beq.n	80030d6 <HAL_GPIO_Init+0x11e>
 80030b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030bc:	4290      	cmp	r0, r2
 80030be:	bf0c      	ite	eq
 80030c0:	2205      	moveq	r2, #5
 80030c2:	2206      	movne	r2, #6
 80030c4:	e008      	b.n	80030d8 <HAL_GPIO_Init+0x120>
 80030c6:	2200      	movs	r2, #0
 80030c8:	e006      	b.n	80030d8 <HAL_GPIO_Init+0x120>
 80030ca:	2201      	movs	r2, #1
 80030cc:	e004      	b.n	80030d8 <HAL_GPIO_Init+0x120>
 80030ce:	2202      	movs	r2, #2
 80030d0:	e002      	b.n	80030d8 <HAL_GPIO_Init+0x120>
 80030d2:	2203      	movs	r2, #3
 80030d4:	e000      	b.n	80030d8 <HAL_GPIO_Init+0x120>
 80030d6:	2204      	movs	r2, #4
 80030d8:	fa02 f20c 	lsl.w	r2, r2, ip
 80030dc:	ea42 020e 	orr.w	r2, r2, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 80030e0:	60b2      	str	r2, [r6, #8]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030e2:	4a16      	ldr	r2, [pc, #88]	; (800313c <HAL_GPIO_Init+0x184>)
 80030e4:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80030e6:	ea6f 0e05 	mvn.w	lr, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030ea:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        {
          temp |= iocurrent;
 80030ee:	bf14      	ite	ne
 80030f0:	432e      	orrne	r6, r5
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 80030f2:	ea0e 0606 	andeq.w	r6, lr, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 80030f6:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80030f8:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030fa:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        { 
          temp |= iocurrent;
 80030fe:	bf14      	ite	ne
 8003100:	432e      	orrne	r6, r5
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 8003102:	ea0e 0606 	andeq.w	r6, lr, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        { 
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8003106:	6056      	str	r6, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003108:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800310a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        {
          temp |= iocurrent;
 800310e:	bf14      	ite	ne
 8003110:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8003112:	ea0e 0606 	andeq.w	r6, lr, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8003116:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8003118:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800311a:	02a4      	lsls	r4, r4, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 800311c:	bf54      	ite	pl
 800311e:	ea0e 0506 	andpl.w	r5, lr, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8003122:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8003124:	60d5      	str	r5, [r2, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003126:	3301      	adds	r3, #1
 8003128:	2b10      	cmp	r3, #16
 800312a:	f47f af49 	bne.w	8002fc0 <HAL_GPIO_Init+0x8>
        }
        EXTI->FTSR = temp;
      }
    }
  } 
}
 800312e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003132:	bf00      	nop
 8003134:	40021000 	.word	0x40021000
 8003138:	48000400 	.word	0x48000400
 800313c:	40010400 	.word	0x40010400

08003140 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003140:	6903      	ldr	r3, [r0, #16]
 8003142:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
  }
 8003144:	bf14      	ite	ne
 8003146:	2001      	movne	r0, #1
 8003148:	2000      	moveq	r0, #0
 800314a:	4770      	bx	lr

0800314c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800314c:	b10a      	cbz	r2, 8003152 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 800314e:	8301      	strh	r1, [r0, #24]
 8003150:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8003152:	8341      	strh	r1, [r0, #26]
 8003154:	4770      	bx	lr

08003156 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8003156:	6943      	ldr	r3, [r0, #20]
 8003158:	4059      	eors	r1, r3
 800315a:	6141      	str	r1, [r0, #20]
 800315c:	4770      	bx	lr

0800315e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 800315e:	b538      	push	{r3, r4, r5, lr}
  uint32_t i = 0;

  uint32_t wInterrupt_Mask = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8003160:	4604      	mov	r4, r0
 8003162:	2800      	cmp	r0, #0
 8003164:	d046      	beq.n	80031f4 <HAL_PCD_Init+0x96>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = PCD_BUSY;
 8003166:	2302      	movs	r3, #2
 8003168:	f880 3141 	strb.w	r3, [r0, #321]	; 0x141
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 800316c:	f001 fb7e 	bl	800486c <HAL_PCD_MspInit>

 /* Init endpoints structures */
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8003170:	6865      	ldr	r5, [r4, #4]
 8003172:	f104 0229 	add.w	r2, r4, #41	; 0x29
 8003176:	2100      	movs	r1, #0
 8003178:	42a9      	cmp	r1, r5
 800317a:	f102 021c 	add.w	r2, r2, #28
 800317e:	f04f 0300 	mov.w	r3, #0
 8003182:	d00e      	beq.n	80031a2 <HAL_PCD_Init+0x44>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 8003184:	2001      	movs	r0, #1
   hpcd->IN_ep[i].num = i;
 8003186:	f802 1c1d 	strb.w	r1, [r2, #-29]

 /* Init endpoints structures */
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 800318a:	f802 0c1c 	strb.w	r0, [r2, #-28]
   hpcd->IN_ep[i].num = i;
   /* Control until ep is actvated */
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 800318e:	f802 3c1a 	strb.w	r3, [r2, #-26]
   hpcd->IN_ep[i].maxpacket =  0;
 8003192:	f842 3c11 	str.w	r3, [r2, #-17]
   hpcd->IN_ep[i].xfer_buff = 0;
 8003196:	f842 3c0d 	str.w	r3, [r2, #-13]
   hpcd->IN_ep[i].xfer_len = 0;
 800319a:	f842 3c09 	str.w	r3, [r2, #-9]
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);

 /* Init endpoints structures */
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 800319e:	4401      	add	r1, r0
 80031a0:	e7ea      	b.n	8003178 <HAL_PCD_Init+0x1a>
 80031a2:	f104 02b5 	add.w	r2, r4, #181	; 0xb5
   hpcd->IN_ep[i].maxpacket =  0;
   hpcd->IN_ep[i].xfer_buff = 0;
   hpcd->IN_ep[i].xfer_len = 0;
 }
 
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 80031a6:	42ab      	cmp	r3, r5
 80031a8:	f102 021c 	add.w	r2, r2, #28
 80031ac:	f04f 0000 	mov.w	r0, #0
 80031b0:	d00d      	beq.n	80031ce <HAL_PCD_Init+0x70>
 {
   hpcd->OUT_ep[i].is_in = 0;
   hpcd->OUT_ep[i].num = i;
 80031b2:	f802 3c1d 	strb.w	r3, [r2, #-29]
   hpcd->IN_ep[i].xfer_len = 0;
 }
 
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 {
   hpcd->OUT_ep[i].is_in = 0;
 80031b6:	f802 0c1c 	strb.w	r0, [r2, #-28]
   hpcd->OUT_ep[i].num = i;
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 80031ba:	f802 0c1a 	strb.w	r0, [r2, #-26]
   hpcd->OUT_ep[i].maxpacket = 0;
 80031be:	f842 0c11 	str.w	r0, [r2, #-17]
   hpcd->OUT_ep[i].xfer_buff = 0;
 80031c2:	f842 0c0d 	str.w	r0, [r2, #-13]
   hpcd->OUT_ep[i].xfer_len = 0;
 80031c6:	f842 0c09 	str.w	r0, [r2, #-9]
   hpcd->IN_ep[i].maxpacket =  0;
   hpcd->IN_ep[i].xfer_buff = 0;
   hpcd->IN_ep[i].xfer_len = 0;
 }
 
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 80031ca:	3301      	adds	r3, #1
 80031cc:	e7eb      	b.n	80031a6 <HAL_PCD_Init+0x48>
   hpcd->OUT_ep[i].xfer_len = 0;
 }
  
 /* Init Device */
 /*CNTR_FRES = 1*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 80031ce:	6823      	ldr	r3, [r4, #0]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  /*set wInterrupt_Mask global variable*/
  wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 80031d6:	f44f 423d 	mov.w	r2, #48384	; 0xbd00
 /* Init Device */
 /*CNTR_FRES = 1*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 
 /*CNTR_FRES = 0*/
 hpcd->Instance->CNTR = 0;
 80031da:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
 
 /*Clear pending interrupts*/
 hpcd->Instance->ISTR = 0;
 80031de:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
 
  /*Set Btable Adress*/
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 80031e2:	f8a3 0050 	strh.w	r0, [r3, #80]	; 0x50
  /*set wInterrupt_Mask global variable*/
  wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 80031e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  hpcd->USB_Address = 0;
 80031ea:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State= PCD_READY;
 80031ee:	f884 0141 	strb.w	r0, [r4, #321]	; 0x141

 return HAL_OK;
 80031f2:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t wInterrupt_Mask = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
  {
    return HAL_ERROR;
 80031f4:	2001      	movs	r0, #1
  
  hpcd->USB_Address = 0;
  hpcd->State= PCD_READY;

 return HAL_OK;
}
 80031f6:	bd38      	pop	{r3, r4, r5, pc}

080031f8 <HAL_PCD_Start>:
  * @brief  Start The USB OTG Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 80031f8:	b508      	push	{r3, lr}
  /*  DP Pull-Down is external */
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 80031fa:	2101      	movs	r1, #1
 80031fc:	f000 ff19 	bl	8004032 <HAL_PCDEx_SetConnectionState>
  
  return HAL_OK;
}
 8003200:	2000      	movs	r0, #0
 8003202:	bd08      	pop	{r3, pc}

08003204 <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
   __HAL_LOCK(hpcd); 
 8003204:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8003208:	2b01      	cmp	r3, #1
 800320a:	d00f      	beq.n	800322c <HAL_PCD_SetAddress+0x28>
 800320c:	2301      	movs	r3, #1
 800320e:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140

   if(address == 0) 
 8003212:	b921      	cbnz	r1, 800321e <HAL_PCD_SetAddress+0x1a>
   {
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
 8003214:	6803      	ldr	r3, [r0, #0]
 8003216:	2280      	movs	r2, #128	; 0x80
 8003218:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800321c:	e001      	b.n	8003222 <HAL_PCD_SetAddress+0x1e>
   }
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
 800321e:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
   }

  __HAL_UNLOCK(hpcd);   
 8003222:	2300      	movs	r3, #0
 8003224:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
 8003228:	4618      	mov	r0, r3
 800322a:	4770      	bx	lr
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
   __HAL_LOCK(hpcd); 
 800322c:	2002      	movs	r0, #2
     hpcd->USB_Address = address;
   }

  __HAL_UNLOCK(hpcd);   
  return HAL_OK;
}
 800322e:	4770      	bx	lr

08003230 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packert size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003230:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8003232:	b2cc      	uxtb	r4, r1
 8003234:	f014 0f80 	tst.w	r4, #128	; 0x80
 8003238:	f001 067f 	and.w	r6, r1, #127	; 0x7f
 800323c:	f04f 051c 	mov.w	r5, #28
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003240:	bf15      	itete	ne
 8003242:	fb05 0106 	mlane	r1, r5, r6, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8003246:	fb05 0101 	mlaeq	r1, r5, r1, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800324a:	3128      	addne	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800324c:	31b4      	addeq	r1, #180	; 0xb4
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 800324e:	09e4      	lsrs	r4, r4, #7
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 8003250:	700e      	strb	r6, [r1, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8003252:	704c      	strb	r4, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 8003254:	70cb      	strb	r3, [r1, #3]
  
  __HAL_LOCK(hpcd); 
 8003256:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
 800325a:	60ca      	str	r2, [r1, #12]
  ep->type = ep_type;
  
  __HAL_LOCK(hpcd); 
 800325c:	2b01      	cmp	r3, #1
 800325e:	f000 8181 	beq.w	8003564 <HAL_PCD_EP_Open+0x334>
 8003262:	2301      	movs	r3, #1
 8003264:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140

/* initialize Endpoint */
  switch (ep->type)
 8003268:	78cc      	ldrb	r4, [r1, #3]
 800326a:	780a      	ldrb	r2, [r1, #0]
 800326c:	6803      	ldr	r3, [r0, #0]
 800326e:	2c03      	cmp	r4, #3
 8003270:	d82f      	bhi.n	80032d2 <HAL_PCD_EP_Open+0xa2>
 8003272:	e8df f004 	tbb	[pc, r4]
 8003276:	2202      	.short	0x2202
 8003278:	170d      	.short	0x170d
  {
  case PCD_EP_TYPE_CTRL:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 800327a:	b212      	sxth	r2, r2
 800327c:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003280:	b2a4      	uxth	r4, r4
 8003282:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8003286:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 800328a:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 800328e:	e01e      	b.n	80032ce <HAL_PCD_EP_Open+0x9e>
    break;
  case PCD_EP_TYPE_BULK:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
 8003290:	b212      	sxth	r2, r2
 8003292:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003296:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 800329a:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 800329e:	0424      	lsls	r4, r4, #16
 80032a0:	0c24      	lsrs	r4, r4, #16
 80032a2:	e014      	b.n	80032ce <HAL_PCD_EP_Open+0x9e>
    break;
  case PCD_EP_TYPE_INTR:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 80032a4:	b212      	sxth	r2, r2
 80032a6:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80032aa:	b2a4      	uxth	r4, r4
 80032ac:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 80032b0:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 80032b4:	f444 64c0 	orr.w	r4, r4, #1536	; 0x600
 80032b8:	e009      	b.n	80032ce <HAL_PCD_EP_Open+0x9e>
    break;
  case PCD_EP_TYPE_ISOC:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 80032ba:	b212      	sxth	r2, r2
 80032bc:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80032c0:	b2a4      	uxth	r4, r4
 80032c2:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 80032c6:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 80032ca:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 80032ce:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    break;
  } 
  
  PCD_SET_EP_ADDRESS(hpcd->Instance, ep->num, ep->num);
 80032d2:	780a      	ldrb	r2, [r1, #0]
 80032d4:	b216      	sxth	r6, r2
 80032d6:	f442 4500 	orr.w	r5, r2, #32768	; 0x8000
 80032da:	f833 4026 	ldrh.w	r4, [r3, r6, lsl #2]
 80032de:	f024 02f0 	bic.w	r2, r4, #240	; 0xf0
 80032e2:	0512      	lsls	r2, r2, #20
 80032e4:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80032e8:	0d12      	lsrs	r2, r2, #20
 80032ea:	432a      	orrs	r2, r5
 80032ec:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]
  
  if (ep->doublebuffer == 0) 
 80032f0:	7a8c      	ldrb	r4, [r1, #10]
 80032f2:	780a      	ldrb	r2, [r1, #0]
 80032f4:	2c00      	cmp	r4, #0
 80032f6:	d175      	bne.n	80033e4 <HAL_PCD_EP_Open+0x1b4>
  {
    if (ep->is_in)
 80032f8:	784d      	ldrb	r5, [r1, #1]
 80032fa:	888c      	ldrh	r4, [r1, #4]
 80032fc:	2608      	movs	r6, #8
 80032fe:	b33d      	cbz	r5, 8003350 <HAL_PCD_EP_Open+0x120>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8003300:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8003304:	b2ad      	uxth	r5, r5
 8003306:	fb16 5202 	smlabb	r2, r6, r2, r5
 800330a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800330e:	0864      	lsrs	r4, r4, #1
 8003310:	0064      	lsls	r4, r4, #1
 8003312:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8003316:	780c      	ldrb	r4, [r1, #0]
 8003318:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800331c:	0652      	lsls	r2, r2, #25
 800331e:	d50b      	bpl.n	8003338 <HAL_PCD_EP_Open+0x108>
 8003320:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003324:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003328:	0512      	lsls	r2, r2, #20
 800332a:	0d12      	lsrs	r2, r2, #20
 800332c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003330:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003334:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK); 
 8003338:	7809      	ldrb	r1, [r1, #0]
 800333a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800333e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003342:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003346:	0412      	lsls	r2, r2, #16
 8003348:	0c12      	lsrs	r2, r2, #16
 800334a:	f082 0220 	eor.w	r2, r2, #32
 800334e:	e0fe      	b.n	800354e <HAL_PCD_EP_Open+0x31e>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8003350:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 8003354:	b2bf      	uxth	r7, r7
 8003356:	fb16 7202 	smlabb	r2, r6, r2, r7
 800335a:	3204      	adds	r2, #4
 800335c:	f503 6580 	add.w	r5, r3, #1024	; 0x400
 8003360:	0864      	lsrs	r4, r4, #1
 8003362:	0064      	lsls	r4, r4, #1
 8003364:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket);
 8003368:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800336c:	780c      	ldrb	r4, [r1, #0]
 800336e:	b292      	uxth	r2, r2
 8003370:	fb16 2204 	smlabb	r2, r6, r4, r2
 8003374:	68ce      	ldr	r6, [r1, #12]
 8003376:	2e3e      	cmp	r6, #62	; 0x3e
 8003378:	f102 0206 	add.w	r2, r2, #6
 800337c:	d90b      	bls.n	8003396 <HAL_PCD_EP_Open+0x166>
 800337e:	f3c6 144f 	ubfx	r4, r6, #5, #16
 8003382:	06f7      	lsls	r7, r6, #27
 8003384:	bf04      	itt	eq
 8003386:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
 800338a:	b2a4      	uxtheq	r4, r4
 800338c:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8003390:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8003394:	e006      	b.n	80033a4 <HAL_PCD_EP_Open+0x174>
 8003396:	f3c6 044f 	ubfx	r4, r6, #1, #16
 800339a:	07f6      	lsls	r6, r6, #31
 800339c:	bf44      	itt	mi
 800339e:	3401      	addmi	r4, #1
 80033a0:	b2a4      	uxthmi	r4, r4
 80033a2:	02a4      	lsls	r4, r4, #10
 80033a4:	b2a4      	uxth	r4, r4
 80033a6:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 80033aa:	780c      	ldrb	r4, [r1, #0]
 80033ac:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80033b0:	0452      	lsls	r2, r2, #17
 80033b2:	d50b      	bpl.n	80033cc <HAL_PCD_EP_Open+0x19c>
 80033b4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80033b8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80033bc:	0512      	lsls	r2, r2, #20
 80033be:	0d12      	lsrs	r2, r2, #20
 80033c0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80033c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033c8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 80033cc:	7809      	ldrb	r1, [r1, #0]
 80033ce:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80033d2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80033d6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80033da:	0412      	lsls	r2, r2, #16
 80033dc:	0c12      	lsrs	r2, r2, #16
 80033de:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80033e2:	e0b4      	b.n	800354e <HAL_PCD_EP_Open+0x31e>
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 80033e4:	b212      	sxth	r2, r2
 80033e6:	f503 6580 	add.w	r5, r3, #1024	; 0x400
 80033ea:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80033ee:	f424 74f8 	bic.w	r4, r4, #496	; 0x1f0
 80033f2:	0524      	lsls	r4, r4, #20
 80033f4:	0d24      	lsrs	r4, r4, #20
 80033f6:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 80033fa:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80033fe:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8003402:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8003406:	780c      	ldrb	r4, [r1, #0]
 8003408:	2208      	movs	r2, #8
 800340a:	b2b6      	uxth	r6, r6
 800340c:	fb12 6604 	smlabb	r6, r2, r4, r6
 8003410:	88cc      	ldrh	r4, [r1, #6]
 8003412:	0864      	lsrs	r4, r4, #1
 8003414:	0064      	lsls	r4, r4, #1
 8003416:	f845 4016 	str.w	r4, [r5, r6, lsl #1]
 800341a:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 800341e:	780e      	ldrb	r6, [r1, #0]
 8003420:	b2a4      	uxth	r4, r4
 8003422:	fb12 4206 	smlabb	r2, r2, r6, r4
 8003426:	890c      	ldrh	r4, [r1, #8]
 8003428:	3204      	adds	r2, #4
 800342a:	0864      	lsrs	r4, r4, #1
 800342c:	0064      	lsls	r4, r4, #1
 800342e:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
 8003432:	780c      	ldrb	r4, [r1, #0]
    
    if (ep->is_in==0)
 8003434:	784a      	ldrb	r2, [r1, #1]
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8003436:	b224      	sxth	r4, r4
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1);
    
    if (ep->is_in==0)
 8003438:	2a00      	cmp	r2, #0
 800343a:	d146      	bne.n	80034ca <HAL_PCD_EP_Open+0x29a>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 800343c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003440:	0457      	lsls	r7, r2, #17
 8003442:	d50b      	bpl.n	800345c <HAL_PCD_EP_Open+0x22c>
 8003444:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003448:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800344c:	0512      	lsls	r2, r2, #20
 800344e:	0d12      	lsrs	r2, r2, #20
 8003450:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003454:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003458:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800345c:	780c      	ldrb	r4, [r1, #0]
 800345e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003462:	0656      	lsls	r6, r2, #25
 8003464:	d50b      	bpl.n	800347e <HAL_PCD_EP_Open+0x24e>
 8003466:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800346a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800346e:	0512      	lsls	r2, r2, #20
 8003470:	0d12      	lsrs	r2, r2, #20
 8003472:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003476:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800347a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 800347e:	780c      	ldrb	r4, [r1, #0]
 8003480:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003484:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003488:	0512      	lsls	r2, r2, #20
 800348a:	0d12      	lsrs	r2, r2, #20
 800348c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003490:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003494:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8003498:	780c      	ldrb	r4, [r1, #0]
 800349a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800349e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80034a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80034a6:	0412      	lsls	r2, r2, #16
 80034a8:	0c12      	lsrs	r2, r2, #16
 80034aa:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80034ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034b6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 80034ba:	7809      	ldrb	r1, [r1, #0]
 80034bc:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80034c0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80034c4:	0512      	lsls	r2, r2, #20
 80034c6:	0d12      	lsrs	r2, r2, #20
 80034c8:	e041      	b.n	800354e <HAL_PCD_EP_Open+0x31e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 80034ca:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80034ce:	0455      	lsls	r5, r2, #17
 80034d0:	d50b      	bpl.n	80034ea <HAL_PCD_EP_Open+0x2ba>
 80034d2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80034d6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80034da:	0512      	lsls	r2, r2, #20
 80034dc:	0d12      	lsrs	r2, r2, #20
 80034de:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80034e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034e6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 80034ea:	780c      	ldrb	r4, [r1, #0]
 80034ec:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80034f0:	0652      	lsls	r2, r2, #25
 80034f2:	d50b      	bpl.n	800350c <HAL_PCD_EP_Open+0x2dc>
 80034f4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80034f8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80034fc:	0512      	lsls	r2, r2, #20
 80034fe:	0d12      	lsrs	r2, r2, #20
 8003500:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003504:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003508:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 800350c:	780c      	ldrb	r4, [r1, #0]
 800350e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003512:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003516:	0512      	lsls	r2, r2, #20
 8003518:	0d12      	lsrs	r2, r2, #20
 800351a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800351e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003522:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8003526:	780c      	ldrb	r4, [r1, #0]
 8003528:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800352c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003530:	0512      	lsls	r2, r2, #20
 8003532:	0d12      	lsrs	r2, r2, #20
 8003534:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003538:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800353c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8003540:	7809      	ldrb	r1, [r1, #0]
 8003542:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003546:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800354a:	0492      	lsls	r2, r2, #18
 800354c:	0c92      	lsrs	r2, r2, #18
 800354e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003552:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003556:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 800355a:	2300      	movs	r3, #0
 800355c:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  return ret;
 8003560:	4618      	mov	r0, r3
 8003562:	bdf0      	pop	{r4, r5, r6, r7, pc}
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
  
  __HAL_LOCK(hpcd); 
 8003564:	2002      	movs	r0, #2
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
  return ret;
}
 8003566:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003568 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8003568:	b2cb      	uxtb	r3, r1
 800356a:	f013 0f80 	tst.w	r3, #128	; 0x80
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 800356e:	b530      	push	{r4, r5, lr}
 8003570:	f04f 021c 	mov.w	r2, #28
 8003574:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003578:	bf15      	itete	ne
 800357a:	fb02 0104 	mlane	r1, r2, r4, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800357e:	fb02 0101 	mlaeq	r1, r2, r1, r0
{  
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003582:	3128      	addne	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8003584:	31b4      	addeq	r1, #180	; 0xb4
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8003586:	09db      	lsrs	r3, r3, #7
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 8003588:	700c      	strb	r4, [r1, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 800358a:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 800358c:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8003590:	2b01      	cmp	r3, #1
 8003592:	f000 80bf 	beq.w	8003714 <HAL_PCD_EP_Close+0x1ac>
 8003596:	2301      	movs	r3, #1
 8003598:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
 800359c:	780a      	ldrb	r2, [r1, #0]

  if (ep->doublebuffer == 0) 
 800359e:	7a8d      	ldrb	r5, [r1, #10]
 80035a0:	784c      	ldrb	r4, [r1, #1]
 80035a2:	6803      	ldr	r3, [r0, #0]
  {
    if (ep->is_in)
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 80035a4:	b212      	sxth	r2, r2
  
  ep->is_in = (0x80 & ep_addr) != 0;
  
  __HAL_LOCK(hpcd); 

  if (ep->doublebuffer == 0) 
 80035a6:	bb1d      	cbnz	r5, 80035f0 <HAL_PCD_EP_Close+0x88>
  {
    if (ep->is_in)
 80035a8:	b184      	cbz	r4, 80035cc <HAL_PCD_EP_Close+0x64>
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 80035aa:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80035ae:	0664      	lsls	r4, r4, #25
 80035b0:	d55b      	bpl.n	800366a <HAL_PCD_EP_Close+0x102>
 80035b2:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80035b6:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 80035ba:	0524      	lsls	r4, r4, #20
 80035bc:	0d24      	lsrs	r4, r4, #20
 80035be:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 80035c2:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 80035c6:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
 80035ca:	e04e      	b.n	800366a <HAL_PCD_EP_Close+0x102>
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS); 
    }
    else
    {
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 80035cc:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80035d0:	0465      	lsls	r5, r4, #17
 80035d2:	f140 808d 	bpl.w	80036f0 <HAL_PCD_EP_Close+0x188>
 80035d6:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80035da:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 80035de:	0524      	lsls	r4, r4, #20
 80035e0:	0d24      	lsrs	r4, r4, #20
 80035e2:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 80035e6:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80035ea:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
 80035ee:	e07f      	b.n	80036f0 <HAL_PCD_EP_Close+0x188>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 80035f0:	2c00      	cmp	r4, #0
 80035f2:	d142      	bne.n	800367a <HAL_PCD_EP_Close+0x112>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 80035f4:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80035f8:	0464      	lsls	r4, r4, #17
 80035fa:	d50b      	bpl.n	8003614 <HAL_PCD_EP_Close+0xac>
 80035fc:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003600:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8003604:	0524      	lsls	r4, r4, #20
 8003606:	0d24      	lsrs	r4, r4, #20
 8003608:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 800360c:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8003610:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8003614:	780c      	ldrb	r4, [r1, #0]
 8003616:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800361a:	0655      	lsls	r5, r2, #25
 800361c:	d50b      	bpl.n	8003636 <HAL_PCD_EP_Close+0xce>
 800361e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003622:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003626:	0512      	lsls	r2, r2, #20
 8003628:	0d12      	lsrs	r2, r2, #20
 800362a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800362e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003632:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8003636:	780c      	ldrb	r4, [r1, #0]
 8003638:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800363c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003640:	0512      	lsls	r2, r2, #20
 8003642:	0d12      	lsrs	r2, r2, #20
 8003644:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003648:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800364c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8003650:	780c      	ldrb	r4, [r1, #0]
 8003652:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003656:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800365a:	0492      	lsls	r2, r2, #18
 800365c:	0c92      	lsrs	r2, r2, #18
 800365e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003662:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003666:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 800366a:	7809      	ldrb	r1, [r1, #0]
 800366c:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003670:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003674:	0512      	lsls	r2, r2, #20
 8003676:	0d12      	lsrs	r2, r2, #20
 8003678:	e041      	b.n	80036fe <HAL_PCD_EP_Close+0x196>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 800367a:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800367e:	0464      	lsls	r4, r4, #17
 8003680:	d50b      	bpl.n	800369a <HAL_PCD_EP_Close+0x132>
 8003682:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003686:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 800368a:	0524      	lsls	r4, r4, #20
 800368c:	0d24      	lsrs	r4, r4, #20
 800368e:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8003692:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8003696:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800369a:	780c      	ldrb	r4, [r1, #0]
 800369c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80036a0:	0652      	lsls	r2, r2, #25
 80036a2:	d50b      	bpl.n	80036bc <HAL_PCD_EP_Close+0x154>
 80036a4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80036a8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80036ac:	0512      	lsls	r2, r2, #20
 80036ae:	0d12      	lsrs	r2, r2, #20
 80036b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036b4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80036b8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 80036bc:	780c      	ldrb	r4, [r1, #0]
 80036be:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80036c2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80036c6:	0512      	lsls	r2, r2, #20
 80036c8:	0d12      	lsrs	r2, r2, #20
 80036ca:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80036ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036d2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 80036d6:	780c      	ldrb	r4, [r1, #0]
 80036d8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80036dc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80036e0:	0512      	lsls	r2, r2, #20
 80036e2:	0d12      	lsrs	r2, r2, #20
 80036e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036ec:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 80036f0:	7809      	ldrb	r1, [r1, #0]
 80036f2:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80036f6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80036fa:	0492      	lsls	r2, r2, #18
 80036fc:	0c92      	lsrs	r2, r2, #18
 80036fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003702:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003706:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 800370a:	2300      	movs	r3, #0
 800370c:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  return HAL_OK;
 8003710:	4618      	mov	r0, r3
 8003712:	bd30      	pop	{r4, r5, pc}
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  
  __HAL_LOCK(hpcd); 
 8003714:	2002      	movs	r0, #2
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
  return HAL_OK;
}
 8003716:	bd30      	pop	{r4, r5, pc}

08003718 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer   
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003718:	b570      	push	{r4, r5, r6, lr}
  
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800371a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800371e:	241c      	movs	r4, #28
 8003720:	fb04 0401 	mla	r4, r4, r1, r0
 8003724:	f104 05c0 	add.w	r5, r4, #192	; 0xc0
 8003728:	606a      	str	r2, [r5, #4]
  ep->xfer_len = len;
  ep->xfer_count = 0;
 800372a:	2200      	movs	r2, #0
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
 800372c:	60ab      	str	r3, [r5, #8]
  ep->xfer_count = 0;
 800372e:	f8c4 20cc 	str.w	r2, [r4, #204]	; 0xcc
  ep->is_in = 0;
 8003732:	f884 20b5 	strb.w	r2, [r4, #181]	; 0xb5
  ep->num = ep_addr & 0x7F;
 8003736:	f884 10b4 	strb.w	r1, [r4, #180]	; 0xb4
   
  __HAL_LOCK(hpcd); 
 800373a:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 800373e:	2b01      	cmp	r3, #1
 8003740:	d062      	beq.n	8003808 <HAL_PCD_EP_Receive+0xf0>
 8003742:	2301      	movs	r3, #1
 8003744:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8003748:	68ab      	ldr	r3, [r5, #8]
 800374a:	f8d4 40c0 	ldr.w	r4, [r4, #192]	; 0xc0
 800374e:	42a3      	cmp	r3, r4
    ep->xfer_len-=len; 
  }
  else
  {
    len=ep->xfer_len;
    ep->xfer_len =0;
 8003750:	bf98      	it	ls
 8003752:	60aa      	strls	r2, [r5, #8]
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 8003754:	f04f 021c 	mov.w	r2, #28
 8003758:	fb02 0201 	mla	r2, r2, r1, r0
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 800375c:	bf84      	itt	hi
 800375e:	1b1b      	subhi	r3, r3, r4
 8003760:	60ab      	strhi	r3, [r5, #8]
    len=ep->xfer_len;
    ep->xfer_len =0;
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 8003762:	f892 50be 	ldrb.w	r5, [r2, #190]	; 0xbe
 8003766:	bf88      	it	hi
 8003768:	4623      	movhi	r3, r4
 800376a:	32b0      	adds	r2, #176	; 0xb0
 800376c:	6804      	ldr	r4, [r0, #0]
 800376e:	b10d      	cbz	r5, 8003774 <HAL_PCD_EP_Receive+0x5c>
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len);
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003770:	7955      	ldrb	r5, [r2, #5]
 8003772:	bb15      	cbnz	r5, 80037ba <HAL_PCD_EP_Receive+0xa2>
 8003774:	f8b4 5050 	ldrh.w	r5, [r4, #80]	; 0x50
 8003778:	7912      	ldrb	r2, [r2, #4]
 800377a:	b2ad      	uxth	r5, r5
 800377c:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8003780:	2b3e      	cmp	r3, #62	; 0x3e
 8003782:	f504 6680 	add.w	r6, r4, #1024	; 0x400
 8003786:	f105 0506 	add.w	r5, r5, #6
 800378a:	d90b      	bls.n	80037a4 <HAL_PCD_EP_Receive+0x8c>
 800378c:	f3c3 124f 	ubfx	r2, r3, #5, #16
 8003790:	06db      	lsls	r3, r3, #27
 8003792:	bf04      	itt	eq
 8003794:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 8003798:	b292      	uxtheq	r2, r2
 800379a:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800379e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80037a2:	e006      	b.n	80037b2 <HAL_PCD_EP_Receive+0x9a>
 80037a4:	f3c3 024f 	ubfx	r2, r3, #1, #16
 80037a8:	07db      	lsls	r3, r3, #31
 80037aa:	bf44      	itt	mi
 80037ac:	3201      	addmi	r2, #1
 80037ae:	b292      	uxthmi	r2, r2
 80037b0:	0292      	lsls	r2, r2, #10
 80037b2:	b292      	uxth	r2, r2
 80037b4:	f846 2015 	str.w	r2, [r6, r5, lsl #1]
 80037b8:	e00c      	b.n	80037d4 <HAL_PCD_EP_Receive+0xbc>
 80037ba:	2d01      	cmp	r5, #1
 80037bc:	bf01      	itttt	eq
 80037be:	f8b4 5050 	ldrheq.w	r5, [r4, #80]	; 0x50
 80037c2:	7912      	ldrbeq	r2, [r2, #4]
 80037c4:	b2ad      	uxtheq	r5, r5
 80037c6:	eb05 02c2 	addeq.w	r2, r5, r2, lsl #3
 80037ca:	bf04      	itt	eq
 80037cc:	eb04 0242 	addeq.w	r2, r4, r2, lsl #1
 80037d0:	f8c2 340c 	streq.w	r3, [r2, #1036]	; 0x40c
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 80037d4:	231c      	movs	r3, #28
 80037d6:	fb03 0101 	mla	r1, r3, r1, r0
 80037da:	f891 20b4 	ldrb.w	r2, [r1, #180]	; 0xb4
 80037de:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80037e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ea:	041b      	lsls	r3, r3, #16
 80037ec:	0c1b      	lsrs	r3, r3, #16
 80037ee:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80037f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037fa:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
  
  __HAL_UNLOCK(hpcd); 
 80037fe:	2300      	movs	r3, #0
 8003800:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  
  return HAL_OK;
 8003804:	4618      	mov	r0, r3
 8003806:	bd70      	pop	{r4, r5, r6, pc}
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
   
  __HAL_LOCK(hpcd); 
 8003808:	2002      	movs	r0, #2
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
  
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 800380a:	bd70      	pop	{r4, r5, r6, pc}

0800380c <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 800380c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8003810:	231c      	movs	r3, #28
 8003812:	fb03 0001 	mla	r0, r3, r1, r0
}
 8003816:	f8b0 00cc 	ldrh.w	r0, [r0, #204]	; 0xcc
 800381a:	4770      	bx	lr

0800381c <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800381c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  PCD_EPTypeDef *ep;
  uint16_t pmabuffer = 0;
    
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800381e:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8003822:	211c      	movs	r1, #28
 8003824:	fb01 0106 	mla	r1, r1, r6, r0
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003828:	4604      	mov	r4, r0
  uint16_t pmabuffer = 0;
    
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800382a:	f101 0038 	add.w	r0, r1, #56	; 0x38
 800382e:	638a      	str	r2, [r1, #56]	; 0x38
  ep->xfer_len = len;
 8003830:	6043      	str	r3, [r0, #4]
  ep->xfer_count = 0;
 8003832:	2200      	movs	r2, #0
  ep->is_in = 1;
 8003834:	2301      	movs	r3, #1
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
  ep->xfer_count = 0;
 8003836:	640a      	str	r2, [r1, #64]	; 0x40
  ep->is_in = 1;
 8003838:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  ep->num = ep_addr & 0x7F;
 800383c:	f881 6028 	strb.w	r6, [r1, #40]	; 0x28
  
  __HAL_LOCK(hpcd); 
 8003840:	f894 5140 	ldrb.w	r5, [r4, #320]	; 0x140
 8003844:	429d      	cmp	r5, r3
 8003846:	f000 80a8 	beq.w	800399a <HAL_PCD_EP_Transmit+0x17e>
 800384a:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 800384e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8003850:	6845      	ldr	r5, [r0, #4]
    len=ep->xfer_len;
    ep->xfer_len =0;
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 8003852:	271c      	movs	r7, #28
 8003854:	fb07 4706 	mla	r7, r7, r6, r4
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd); 
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8003858:	429d      	cmp	r5, r3
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 800385a:	bf88      	it	hi
 800385c:	1aed      	subhi	r5, r5, r3
    len=ep->xfer_len;
    ep->xfer_len =0;
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 800385e:	f897 1032 	ldrb.w	r1, [r7, #50]	; 0x32
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 8003862:	bf86      	itte	hi
 8003864:	6045      	strhi	r5, [r0, #4]
 8003866:	461d      	movhi	r5, r3
  }
  else
  {  
    len=ep->xfer_len;
    ep->xfer_len =0;
 8003868:	6042      	strls	r2, [r0, #4]
 800386a:	b2ab      	uxth	r3, r5
 800386c:	f107 0228 	add.w	r2, r7, #40	; 0x28
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 8003870:	b989      	cbnz	r1, 8003896 <HAL_PCD_EP_Transmit+0x7a>
  {
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 8003872:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003874:	8892      	ldrh	r2, [r2, #4]
 8003876:	6820      	ldr	r0, [r4, #0]
 8003878:	f000 fbb3 	bl	8003fe2 <PCD_WritePMA>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 800387c:	6821      	ldr	r1, [r4, #0]
 800387e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003882:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8003886:	b292      	uxth	r2, r2
 8003888:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800388c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8003890:	f8c3 5404 	str.w	r5, [r3, #1028]	; 0x404
 8003894:	e067      	b.n	8003966 <HAL_PCD_EP_Transmit+0x14a>
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003896:	7852      	ldrb	r2, [r2, #1]
 8003898:	6820      	ldr	r0, [r4, #0]
 800389a:	bb1a      	cbnz	r2, 80038e4 <HAL_PCD_EP_Transmit+0xc8>
 800389c:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 80038a0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80038a4:	b289      	uxth	r1, r1
 80038a6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80038aa:	2d3e      	cmp	r5, #62	; 0x3e
 80038ac:	f500 6780 	add.w	r7, r0, #1024	; 0x400
 80038b0:	f101 0106 	add.w	r1, r1, #6
 80038b4:	d90b      	bls.n	80038ce <HAL_PCD_EP_Transmit+0xb2>
 80038b6:	f3c5 124f 	ubfx	r2, r5, #5, #16
 80038ba:	06ed      	lsls	r5, r5, #27
 80038bc:	bf04      	itt	eq
 80038be:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 80038c2:	b292      	uxtheq	r2, r2
 80038c4:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80038c8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80038cc:	e006      	b.n	80038dc <HAL_PCD_EP_Transmit+0xc0>
 80038ce:	f3c5 024f 	ubfx	r2, r5, #1, #16
 80038d2:	07ed      	lsls	r5, r5, #31
 80038d4:	bf44      	itt	mi
 80038d6:	3201      	addmi	r2, #1
 80038d8:	b292      	uxthmi	r2, r2
 80038da:	0292      	lsls	r2, r2, #10
 80038dc:	b292      	uxth	r2, r2
 80038de:	f847 2011 	str.w	r2, [r7, r1, lsl #1]
 80038e2:	e00d      	b.n	8003900 <HAL_PCD_EP_Transmit+0xe4>
 80038e4:	2a01      	cmp	r2, #1
 80038e6:	bf01      	itttt	eq
 80038e8:	f8b0 2050 	ldrheq.w	r2, [r0, #80]	; 0x50
 80038ec:	f897 1028 	ldrbeq.w	r1, [r7, #40]	; 0x28
 80038f0:	b292      	uxtheq	r2, r2
 80038f2:	eb02 02c1 	addeq.w	r2, r2, r1, lsl #3
 80038f6:	bf04      	itt	eq
 80038f8:	eb00 0242 	addeq.w	r2, r0, r2, lsl #1
 80038fc:	f8c2 540c 	streq.w	r5, [r2, #1036]	; 0x40c
    
    /*Write the data to the USB endpoint*/
    if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX)
 8003900:	251c      	movs	r5, #28
 8003902:	fb05 4206 	mla	r2, r5, r6, r4
 8003906:	f102 0128 	add.w	r1, r2, #40	; 0x28
 800390a:	f892 7028 	ldrb.w	r7, [r2, #40]	; 0x28
 800390e:	f830 7027 	ldrh.w	r7, [r0, r7, lsl #2]
    }
    else
    {
      pmabuffer = ep->pmaaddr0;
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 8003912:	fb05 4506 	mla	r5, r5, r6, r4
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
    
    /*Write the data to the USB endpoint*/
    if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX)
 8003916:	067f      	lsls	r7, r7, #25
    {
      pmabuffer = ep->pmaaddr1;
    }
    else
    {
      pmabuffer = ep->pmaaddr0;
 8003918:	bf54      	ite	pl
 800391a:	88ca      	ldrhpl	r2, [r1, #6]
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
    
    /*Write the data to the USB endpoint*/
    if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX)
    {
      pmabuffer = ep->pmaaddr1;
 800391c:	8e12      	ldrhmi	r2, [r2, #48]	; 0x30
    }
    else
    {
      pmabuffer = ep->pmaaddr0;
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 800391e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8003920:	f000 fb5f 	bl	8003fe2 <PCD_WritePMA>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in);
 8003924:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 8003928:	6822      	ldr	r2, [r4, #0]
 800392a:	b963      	cbnz	r3, 8003946 <HAL_PCD_EP_Transmit+0x12a>
 800392c:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8003930:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003934:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003938:	051b      	lsls	r3, r3, #20
 800393a:	0d1b      	lsrs	r3, r3, #20
 800393c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003940:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003944:	e00d      	b.n	8003962 <HAL_PCD_EP_Transmit+0x146>
 8003946:	2b01      	cmp	r3, #1
 8003948:	d10d      	bne.n	8003966 <HAL_PCD_EP_Transmit+0x14a>
 800394a:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800394e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003952:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003956:	051b      	lsls	r3, r3, #20
 8003958:	0d1b      	lsrs	r3, r3, #20
 800395a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800395e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003962:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003966:	231c      	movs	r3, #28
 8003968:	fb03 4606 	mla	r6, r3, r6, r4
 800396c:	6822      	ldr	r2, [r4, #0]
 800396e:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8003972:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800397a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800397e:	041b      	lsls	r3, r3, #16
 8003980:	0c1b      	lsrs	r3, r3, #16
 8003982:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8003986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800398a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  
  __HAL_UNLOCK(hpcd);
 800398e:	2000      	movs	r0, #0
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in);
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003990:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  
  __HAL_UNLOCK(hpcd);
 8003994:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
     
  return HAL_OK;
 8003998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 1;
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd); 
 800399a:	2002      	movs	r0, #2
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
  
  __HAL_UNLOCK(hpcd);
     
  return HAL_OK;
}
 800399c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800399e <HAL_PCD_IRQHandler>:
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
  uint32_t wInterrupt_Mask = 0;
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 800399e:	6803      	ldr	r3, [r0, #0]
 80039a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80039a4:	b21b      	sxth	r3, r3
 80039a6:	2b00      	cmp	r3, #0
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80039a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039aa:	4604      	mov	r4, r0
  uint32_t wInterrupt_Mask = 0;
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 80039ac:	db11      	blt.n	80039d2 <HAL_PCD_IRQHandler+0x34>
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 80039ae:	6823      	ldr	r3, [r4, #0]
 80039b0:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80039b4:	0552      	lsls	r2, r2, #21
 80039b6:	f140 81e7 	bpl.w	8003d88 <HAL_PCD_IRQHandler+0x3ea>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80039ba:	f64f 32ff 	movw	r2, #64511	; 0xfbff
    HAL_PCD_ResetCallback(hpcd);
 80039be:	4620      	mov	r0, r4
    PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80039c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80039c4:	f000 ffbc 	bl	8004940 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0);
 80039c8:	4620      	mov	r0, r4
 80039ca:	2100      	movs	r1, #0
 80039cc:	f7ff fc1a 	bl	8003204 <HAL_PCD_SetAddress>
 80039d0:	e1da      	b.n	8003d88 <HAL_PCD_IRQHandler+0x3ea>
{
  PCD_EPTypeDef *ep;
  uint16_t count=0;
  uint8_t EPindex;
  __IO uint16_t wIstr;  
  __IO uint16_t wEPVal = 0;
 80039d2:	2300      	movs	r3, #0
 80039d4:	f8ad 3006 	strh.w	r3, [sp, #6]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 80039d8:	6820      	ldr	r0, [r4, #0]
 80039da:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80039de:	b29b      	uxth	r3, r3
 80039e0:	0419      	lsls	r1, r3, #16
 80039e2:	f8ad 3004 	strh.w	r3, [sp, #4]
 80039e6:	d5e2      	bpl.n	80039ae <HAL_PCD_IRQHandler+0x10>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80039e8:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    
    if (EPindex == 0)
 80039ec:	f015 050f 	ands.w	r5, r5, #15
 80039f0:	f040 80b7 	bne.w	8003b62 <HAL_PCD_IRQHandler+0x1c4>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 80039f4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80039f8:	8803      	ldrh	r3, [r0, #0]
    if (EPindex == 0)
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 80039fa:	f001 0110 	and.w	r1, r1, #16
 80039fe:	b289      	uxth	r1, r1
 8003a00:	bb59      	cbnz	r1, 8003a5a <HAL_PCD_IRQHandler+0xbc>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a02:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a0a:	041b      	lsls	r3, r3, #16
 8003a0c:	0c1b      	lsrs	r3, r3, #16
 8003a0e:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003a10:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003a14:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003a1e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
        ep->xfer_buff += ep->xfer_count;
 8003a22:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003a24:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
 8003a28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a2c:	6423      	str	r3, [r4, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 8003a2e:	4413      	add	r3, r2
 8003a30:	63a3      	str	r3, [r4, #56]	; 0x38
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0);
 8003a32:	4620      	mov	r0, r4
 8003a34:	f000 ff78 	bl	8004928 <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0)&& ( ep->xfer_len == 0))
 8003a38:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0cb      	beq.n	80039d8 <HAL_PCD_IRQHandler+0x3a>
 8003a40:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003a42:	2a00      	cmp	r2, #0
 8003a44:	d1c8      	bne.n	80039d8 <HAL_PCD_IRQHandler+0x3a>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8003a46:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8003a4a:	6821      	ldr	r1, [r4, #0]
 8003a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a50:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0;
 8003a54:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8003a58:	e7be      	b.n	80039d8 <HAL_PCD_IRQHandler+0x3a>
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	f8ad 3006 	strh.w	r3, [sp, #6]
        
        if ((wEPVal & USB_EP_SETUP) != 0)
 8003a60:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003a64:	051f      	lsls	r7, r3, #20
 8003a66:	d51f      	bpl.n	8003aa8 <HAL_PCD_IRQHandler+0x10a>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a68:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003a6c:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003a76:	eb00 0343 	add.w	r3, r0, r3, lsl #1
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8003a7a:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
        
        if ((wEPVal & USB_EP_SETUP) != 0)
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a7e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003a82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a86:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8003a8a:	f504 71a2 	add.w	r1, r4, #324	; 0x144
 8003a8e:	f000 fabf 	bl	8004010 <PCD_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8003a92:	6822      	ldr	r2, [r4, #0]
 8003a94:	8813      	ldrh	r3, [r2, #0]
 8003a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a9a:	051b      	lsls	r3, r3, #20
 8003a9c:	0d1b      	lsrs	r3, r3, #20
 8003a9e:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 8003aa0:	4620      	mov	r0, r4
 8003aa2:	f000 ff31 	bl	8004908 <HAL_PCD_SetupStageCallback>
 8003aa6:	e797      	b.n	80039d8 <HAL_PCD_IRQHandler+0x3a>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0)
 8003aa8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003aac:	b21b      	sxth	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	da92      	bge.n	80039d8 <HAL_PCD_IRQHandler+0x3a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003ab2:	8803      	ldrh	r3, [r0, #0]
 8003ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab8:	051b      	lsls	r3, r3, #20
 8003aba:	0d1b      	lsrs	r3, r3, #20
 8003abc:	8003      	strh	r3, [r0, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003abe:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003ac2:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003acc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003ad0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003ad4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ad8:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
          
          if (ep->xfer_count != 0)
 8003adc:	b163      	cbz	r3, 8003af8 <HAL_PCD_IRQHandler+0x15a>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8003ade:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
 8003ae2:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 8003ae6:	f000 fa93 	bl	8004010 <PCD_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8003aea:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8003aee:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8003af2:	4413      	add	r3, r2
 8003af4:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0);
 8003af8:	4620      	mov	r0, r4
 8003afa:	2100      	movs	r1, #0
 8003afc:	f000 ff0b 	bl	8004916 <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003b00:	6822      	ldr	r2, [r4, #0]
 8003b02:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
 8003b06:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8003b0a:	2d3e      	cmp	r5, #62	; 0x3e
 8003b0c:	b289      	uxth	r1, r1
 8003b0e:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8003b12:	f101 0106 	add.w	r1, r1, #6
 8003b16:	d90b      	bls.n	8003b30 <HAL_PCD_IRQHandler+0x192>
 8003b18:	f3c5 134f 	ubfx	r3, r5, #5, #16
 8003b1c:	06ee      	lsls	r6, r5, #27
 8003b1e:	bf04      	itt	eq
 8003b20:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
 8003b24:	b29b      	uxtheq	r3, r3
 8003b26:	ea6f 63c3 	mvn.w	r3, r3, lsl #27
 8003b2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b2e:	e006      	b.n	8003b3e <HAL_PCD_IRQHandler+0x1a0>
 8003b30:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8003b34:	07ed      	lsls	r5, r5, #31
 8003b36:	bf44      	itt	mi
 8003b38:	3301      	addmi	r3, #1
 8003b3a:	b29b      	uxthmi	r3, r3
 8003b3c:	029b      	lsls	r3, r3, #10
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003b44:	8813      	ldrh	r3, [r2, #0]
 8003b46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b4e:	041b      	lsls	r3, r3, #16
 8003b50:	0c1b      	lsrs	r3, r3, #16
 8003b52:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b5e:	8013      	strh	r3, [r2, #0]
 8003b60:	e73a      	b.n	80039d8 <HAL_PCD_IRQHandler+0x3a>
    {
      
      /* Decode and service non control endpoints interrupt  */
      
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 8003b62:	b22f      	sxth	r7, r5
 8003b64:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0)
 8003b6e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003b72:	b21b      	sxth	r3, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f280 8084 	bge.w	8003c82 <HAL_PCD_IRQHandler+0x2e4>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8003b7a:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
 8003b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b82:	051b      	lsls	r3, r3, #20
        ep = &hpcd->OUT_ep[EPindex];
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0)
 8003b84:	221c      	movs	r2, #28
 8003b86:	fb02 4205 	mla	r2, r2, r5, r4
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
      if ((wEPVal & USB_EP_CTR_RX) != 0)
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8003b8a:	0d1b      	lsrs	r3, r3, #20
 8003b8c:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        ep = &hpcd->OUT_ep[EPindex];
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0)
 8003b90:	f102 0cb8 	add.w	ip, r2, #184	; 0xb8
 8003b94:	f89c 3006 	ldrb.w	r3, [ip, #6]
 8003b98:	f102 0eb0 	add.w	lr, r2, #176	; 0xb0
 8003b9c:	b9b3      	cbnz	r3, 8003bcc <HAL_PCD_IRQHandler+0x22e>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b9e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003ba2:	f89e 1004 	ldrb.w	r1, [lr, #4]
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003bac:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003bb0:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
 8003bb4:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0)
 8003bb8:	2e00      	cmp	r6, #0
 8003bba:	d040      	beq.n	8003c3e <HAL_PCD_IRQHandler+0x2a0>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003bbc:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
 8003bc0:	f8be 2008 	ldrh.w	r2, [lr, #8]
 8003bc4:	4633      	mov	r3, r6
 8003bc6:	f000 fa23 	bl	8004010 <PCD_ReadPMA>
 8003bca:	e038      	b.n	8003c3e <HAL_PCD_IRQHandler+0x2a0>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8003bcc:	f89e 6004 	ldrb.w	r6, [lr, #4]
 8003bd0:	b233      	sxth	r3, r6
 8003bd2:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003bd6:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8003bda:	f413 4f80 	tst.w	r3, #16384	; 0x4000
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003bde:	b289      	uxth	r1, r1
 8003be0:	f04f 0308 	mov.w	r3, #8
 8003be4:	fb13 1306 	smlabb	r3, r3, r6, r1
 8003be8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8003bec:	d009      	beq.n	8003c02 <HAL_PCD_IRQHandler+0x264>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003bee:	f8d3 6404 	ldr.w	r6, [r3, #1028]	; 0x404
 8003bf2:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 8003bf6:	b186      	cbz	r6, 8003c1a <HAL_PCD_IRQHandler+0x27c>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003bf8:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
 8003bfc:	f8be 200a 	ldrh.w	r2, [lr, #10]
 8003c00:	e008      	b.n	8003c14 <HAL_PCD_IRQHandler+0x276>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003c02:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
 8003c06:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 8003c0a:	b136      	cbz	r6, 8003c1a <HAL_PCD_IRQHandler+0x27c>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003c0c:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
 8003c10:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 8003c14:	4633      	mov	r3, r6
 8003c16:	f000 f9fb 	bl	8004010 <PCD_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8003c1a:	231c      	movs	r3, #28
 8003c1c:	fb03 4305 	mla	r3, r3, r5, r4
 8003c20:	6822      	ldr	r2, [r4, #0]
 8003c22:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
 8003c26:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003c2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c2e:	051b      	lsls	r3, r3, #20
 8003c30:	0d1b      	lsrs	r3, r3, #20
 8003c32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c36:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c3a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8003c3e:	211c      	movs	r1, #28
 8003c40:	fb01 4105 	mla	r1, r1, r5, r4
 8003c44:	f8d1 30cc 	ldr.w	r3, [r1, #204]	; 0xcc
        ep->xfer_buff+=count;
 8003c48:	f8d1 20c4 	ldr.w	r2, [r1, #196]	; 0xc4
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8003c4c:	4433      	add	r3, r6
 8003c4e:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc
        ep->xfer_buff+=count;
       
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 8003c52:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
        ep->xfer_buff+=count;
 8003c56:	4432      	add	r2, r6
 8003c58:	f8c1 20c4 	str.w	r2, [r1, #196]	; 0xc4
       
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 8003c5c:	b11b      	cbz	r3, 8003c66 <HAL_PCD_IRQHandler+0x2c8>
 8003c5e:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 8003c62:	4286      	cmp	r6, r0
 8003c64:	d208      	bcs.n	8003c78 <HAL_PCD_IRQHandler+0x2da>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003c66:	231c      	movs	r3, #28
 8003c68:	fb03 4305 	mla	r3, r3, r5, r4
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
 8003c72:	f000 fe50 	bl	8004916 <HAL_PCD_DataOutStageCallback>
 8003c76:	e004      	b.n	8003c82 <HAL_PCD_IRQHandler+0x2e4>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003c78:	4620      	mov	r0, r4
 8003c7a:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
 8003c7e:	f7ff fd4b 	bl	8003718 <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0)
 8003c82:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003c86:	0618      	lsls	r0, r3, #24
 8003c88:	f57f aea6 	bpl.w	80039d8 <HAL_PCD_IRQHandler+0x3a>
      {
        ep = &hpcd->IN_ep[EPindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8003c8c:	6820      	ldr	r0, [r4, #0]
 8003c8e:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
 8003c92:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c9a:	041b      	lsls	r3, r3, #16
 8003c9c:	0c1b      	lsrs	r3, r3, #16
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 8003c9e:	221c      	movs	r2, #28
 8003ca0:	fb02 4205 	mla	r2, r2, r5, r4
      if ((wEPVal & USB_EP_CTR_TX) != 0)
      {
        ep = &hpcd->IN_ep[EPindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8003ca4:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 8003ca8:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 8003cac:	f102 0628 	add.w	r6, r2, #40	; 0x28
 8003cb0:	b9a3      	cbnz	r3, 8003cdc <HAL_PCD_IRQHandler+0x33e>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003cb2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003cb6:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003cc0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003cc4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003cc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ccc:	6413      	str	r3, [r2, #64]	; 0x40
          if (ep->xfer_count != 0)
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d03a      	beq.n	8003d48 <HAL_PCD_IRQHandler+0x3aa>
          {
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8003cd2:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8003cd4:	88b2      	ldrh	r2, [r6, #4]
 8003cd6:	f000 f984 	bl	8003fe2 <PCD_WritePMA>
 8003cda:	e035      	b.n	8003d48 <HAL_PCD_IRQHandler+0x3aa>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8003cdc:	f892 7028 	ldrb.w	r7, [r2, #40]	; 0x28
 8003ce0:	b23b      	sxth	r3, r7
 8003ce2:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ce6:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8003cea:	f013 0f40 	tst.w	r3, #64	; 0x40
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003cee:	b289      	uxth	r1, r1
 8003cf0:	f04f 0308 	mov.w	r3, #8
 8003cf4:	fb13 1307 	smlabb	r3, r3, r7, r1
 8003cf8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8003cfc:	d008      	beq.n	8003d10 <HAL_PCD_IRQHandler+0x372>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003cfe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003d02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d06:	6413      	str	r3, [r2, #64]	; 0x40
            if (ep->xfer_count != 0)
 8003d08:	b163      	cbz	r3, 8003d24 <HAL_PCD_IRQHandler+0x386>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8003d0a:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8003d0c:	88f2      	ldrh	r2, [r6, #6]
 8003d0e:	e007      	b.n	8003d20 <HAL_PCD_IRQHandler+0x382>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003d10:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003d14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d18:	6413      	str	r3, [r2, #64]	; 0x40
            if (ep->xfer_count != 0)
 8003d1a:	b11b      	cbz	r3, 8003d24 <HAL_PCD_IRQHandler+0x386>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8003d1c:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8003d1e:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8003d20:	f000 f95f 	bl	8003fe2 <PCD_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8003d24:	231c      	movs	r3, #28
 8003d26:	fb03 4305 	mla	r3, r3, r5, r4
 8003d2a:	6822      	ldr	r2, [r4, #0]
 8003d2c:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8003d30:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003d34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d38:	051b      	lsls	r3, r3, #20
 8003d3a:	0d1b      	lsrs	r3, r3, #20
 8003d3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d44:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003d48:	6821      	ldr	r1, [r4, #0]
 8003d4a:	231c      	movs	r3, #28
 8003d4c:	fb03 4505 	mla	r5, r3, r5, r4
 8003d50:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8003d54:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8003d58:	b292      	uxth	r2, r2
 8003d5a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003d5e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d62:	4620      	mov	r0, r4
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003d64:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
        ep->xfer_buff+=ep->xfer_count;
 8003d68:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003d6a:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003d6e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003d72:	642a      	str	r2, [r5, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 8003d74:	441a      	add	r2, r3
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 8003d76:	6beb      	ldr	r3, [r5, #60]	; 0x3c
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
        ep->xfer_buff+=ep->xfer_count;
 8003d78:	63aa      	str	r2, [r5, #56]	; 0x38
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 8003d7a:	b913      	cbnz	r3, 8003d82 <HAL_PCD_IRQHandler+0x3e4>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d7c:	f000 fdd4 	bl	8004928 <HAL_PCD_DataInStageCallback>
 8003d80:	e62a      	b.n	80039d8 <HAL_PCD_IRQHandler+0x3a>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003d82:	f7ff fd4b 	bl	800381c <HAL_PCD_EP_Transmit>
 8003d86:	e627      	b.n	80039d8 <HAL_PCD_IRQHandler+0x3a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
    HAL_PCD_ResetCallback(hpcd);
    HAL_PCD_SetAddress(hpcd, 0);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVRM))
 8003d88:	6823      	ldr	r3, [r4, #0]
 8003d8a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003d8e:	0452      	lsls	r2, r2, #17
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVRM);    
 8003d90:	bf44      	itt	mi
 8003d92:	f64b 72ff 	movwmi	r2, #49151	; 0xbfff
 8003d96:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8003d9a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003d9e:	0497      	lsls	r7, r2, #18
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8003da0:	bf44      	itt	mi
 8003da2:	f64d 72ff 	movwmi	r2, #57343	; 0xdfff
 8003da6:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8003daa:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003dae:	04d6      	lsls	r6, r2, #19
 8003db0:	d513      	bpl.n	8003dda <HAL_PCD_IRQHandler+0x43c>
  {  
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8003db2:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8003db6:	f022 0204 	bic.w	r2, r2, #4
 8003dba:	0412      	lsls	r2, r2, #16
 8003dbc:	0c12      	lsrs	r2, r2, #16
 8003dbe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    /*set wInterrupt_Mask global variable*/
    wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
      | USB_CNTR_ESOFM | USB_CNTR_RESETM;
    
    /*Set interrupt mask*/
    hpcd->Instance->CNTR = wInterrupt_Mask;
 8003dc2:	f44f 423d 	mov.w	r2, #48384	; 0xbd00
 8003dc6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    HAL_PCD_ResumeCallback(hpcd);
 8003dca:	4620      	mov	r0, r4
 8003dcc:	f000 fdc6 	bl	800495c <HAL_PCD_ResumeCallback>
    
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8003dd0:	6823      	ldr	r3, [r4, #0]
 8003dd2:	f64e 72ff 	movw	r2, #61439	; 0xefff
 8003dd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8003dda:	6823      	ldr	r3, [r4, #0]
 8003ddc:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003de0:	0515      	lsls	r5, r2, #20
 8003de2:	d518      	bpl.n	8003e16 <HAL_PCD_IRQHandler+0x478>
  {    
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8003de4:	f24f 72ff 	movw	r2, #63487	; 0xf7ff
 8003de8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8003dec:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8003df0:	b292      	uxth	r2, r2
 8003df2:	f042 0208 	orr.w	r2, r2, #8
 8003df6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8003dfa:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8003dfe:	b292      	uxth	r2, r2
 8003e00:	f042 0204 	orr.w	r2, r2, #4
 8003e04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 8003e08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e0c:	04d8      	lsls	r0, r3, #19
 8003e0e:	d402      	bmi.n	8003e16 <HAL_PCD_IRQHandler+0x478>
    {
      HAL_PCD_SuspendCallback(hpcd);
 8003e10:	4620      	mov	r0, r4
 8003e12:	f000 fda2 	bl	800495a <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8003e16:	6823      	ldr	r3, [r4, #0]
 8003e18:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003e1c:	0591      	lsls	r1, r2, #22
 8003e1e:	d506      	bpl.n	8003e2e <HAL_PCD_IRQHandler+0x490>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8003e20:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 8003e24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8003e28:	4620      	mov	r0, r4
 8003e2a:	f000 fd85 	bl	8004938 <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8003e2e:	6823      	ldr	r3, [r4, #0]
 8003e30:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003e34:	05d2      	lsls	r2, r2, #23
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8003e36:	bf44      	itt	mi
 8003e38:	f64f 62ff 	movwmi	r2, #65279	; 0xfeff
 8003e3c:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  }
}
 8003e40:	b003      	add	sp, #12
 8003e42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e44 <HAL_PCD_EP_SetStall>:
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8003e44:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8003e48:	2b01      	cmp	r3, #1
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e4a:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8003e4c:	d049      	beq.n	8003ee2 <HAL_PCD_EP_SetStall+0x9e>
   
  if ((0x80 & ep_addr) == 0x80)
 8003e4e:	b2cc      	uxtb	r4, r1
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8003e50:	2301      	movs	r3, #1
 8003e52:	221c      	movs	r2, #28
 8003e54:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
   
  if ((0x80 & ep_addr) == 0x80)
 8003e58:	f014 0f80 	tst.w	r4, #128	; 0x80
 8003e5c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003e60:	bf15      	itete	ne
 8003e62:	fb02 0203 	mlane	r2, r2, r3, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e66:	fb02 0201 	mlaeq	r2, r2, r1, r0
   
  __HAL_LOCK(hpcd); 
   
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003e6a:	3228      	addne	r2, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e6c:	32b4      	addeq	r2, #180	; 0xb4
  }
  
  ep->is_stall = 1;
 8003e6e:	2101      	movs	r1, #1
 8003e70:	7091      	strb	r1, [r2, #2]
  ep->num   = ep_addr & 0x7F;
 8003e72:	b2d9      	uxtb	r1, r3
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8003e74:	09e3      	lsrs	r3, r4, #7
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 1;
  ep->num   = ep_addr & 0x7F;
 8003e76:	7011      	strb	r1, [r2, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8003e78:	7053      	strb	r3, [r2, #1]
 8003e7a:	6802      	ldr	r2, [r0, #0]
  
  if (ep->num == 0)
 8003e7c:	b979      	cbnz	r1, 8003e9e <HAL_PCD_EP_SetStall+0x5a>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8003e7e:	8813      	ldrh	r3, [r2, #0]
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e8a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003e8e:	f083 0310 	eor.w	r3, r3, #16
 8003e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e9a:	8013      	strh	r3, [r2, #0]
 8003e9c:	e01c      	b.n	8003ed8 <HAL_PCD_EP_SetStall+0x94>
 8003e9e:	b209      	sxth	r1, r1
  }
  else
  {
    if (ep->is_in)
 8003ea0:	b153      	cbz	r3, 8003eb8 <HAL_PCD_EP_SetStall+0x74>
    {
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL); 
 8003ea2:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003ea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eae:	041b      	lsls	r3, r3, #16
 8003eb0:	0c1b      	lsrs	r3, r3, #16
 8003eb2:	f083 0310 	eor.w	r3, r3, #16
 8003eb6:	e009      	b.n	8003ecc <HAL_PCD_EP_SetStall+0x88>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL);
 8003eb8:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003ebc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec4:	041b      	lsls	r3, r3, #16
 8003ec6:	0c1b      	lsrs	r3, r3, #16
 8003ec8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003ecc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ed4:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    }
  }
  __HAL_UNLOCK(hpcd); 
 8003ed8:	2300      	movs	r3, #0
 8003eda:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  
  return HAL_OK;
 8003ede:	4618      	mov	r0, r3
 8003ee0:	bd10      	pop	{r4, pc}
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8003ee2:	2002      	movs	r0, #2
    }
  }
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 8003ee4:	bd10      	pop	{r4, pc}

08003ee6 <HAL_PCD_EP_ClrStall>:
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 8003ee6:	b2cb      	uxtb	r3, r1
 8003ee8:	f013 0f80 	tst.w	r3, #128	; 0x80
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003eec:	b510      	push	{r4, lr}
 8003eee:	f04f 021c 	mov.w	r2, #28
 8003ef2:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  PCD_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003ef6:	bf15      	itete	ne
 8003ef8:	fb02 0104 	mlane	r1, r2, r4, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003efc:	fb02 0101 	mlaeq	r1, r2, r1, r0
{
  PCD_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003f00:	3128      	addne	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f02:	31b4      	addeq	r1, #180	; 0xb4
  }
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8003f04:	09db      	lsrs	r3, r3, #7
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 0;
 8003f06:	2200      	movs	r2, #0
 8003f08:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8003f0a:	700c      	strb	r4, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8003f0c:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 8003f0e:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d049      	beq.n	8003faa <HAL_PCD_EP_ClrStall+0xc4>
 8003f16:	2301      	movs	r3, #1
 8003f18:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
 8003f1c:	780c      	ldrb	r4, [r1, #0]
  
  if (ep->is_in)
 8003f1e:	784b      	ldrb	r3, [r1, #1]
 8003f20:	6802      	ldr	r2, [r0, #0]
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8003f22:	b224      	sxth	r4, r4
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd); 
  
  if (ep->is_in)
 8003f24:	b1db      	cbz	r3, 8003f5e <HAL_PCD_EP_ClrStall+0x78>
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8003f26:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8003f2a:	065b      	lsls	r3, r3, #25
 8003f2c:	d50b      	bpl.n	8003f46 <HAL_PCD_EP_ClrStall+0x60>
 8003f2e:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8003f32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f36:	051b      	lsls	r3, r3, #20
 8003f38:	0d1b      	lsrs	r3, r3, #20
 8003f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f42:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
    PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003f46:	7809      	ldrb	r1, [r1, #0]
 8003f48:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003f4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f54:	041b      	lsls	r3, r3, #16
 8003f56:	0c1b      	lsrs	r3, r3, #16
 8003f58:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8003f5c:	e01a      	b.n	8003f94 <HAL_PCD_EP_ClrStall+0xae>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8003f5e:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8003f62:	045b      	lsls	r3, r3, #17
 8003f64:	d50b      	bpl.n	8003f7e <HAL_PCD_EP_ClrStall+0x98>
 8003f66:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8003f6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f6e:	051b      	lsls	r3, r3, #20
 8003f70:	0d1b      	lsrs	r3, r3, #20
 8003f72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f7a:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8003f7e:	7809      	ldrb	r1, [r1, #0]
 8003f80:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003f84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f8c:	041b      	lsls	r3, r3, #16
 8003f8e:	0c1b      	lsrs	r3, r3, #16
 8003f90:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003f94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f9c:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  }
  __HAL_UNLOCK(hpcd); 
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
    
  return HAL_OK;
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	bd10      	pop	{r4, pc}
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd); 
 8003faa:	2002      	movs	r0, #2
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
  }
  __HAL_UNLOCK(hpcd); 
    
  return HAL_OK;
}
 8003fac:	bd10      	pop	{r4, pc}

08003fae <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
 8003fae:	f011 0f80 	tst.w	r1, #128	; 0x80
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                        uint16_t ep_addr,
                        uint16_t ep_kind,
                        uint32_t pmaadress)

{
 8003fb2:	b530      	push	{r4, r5, lr}
 8003fb4:	f04f 051c 	mov.w	r5, #28
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003fb8:	bf1b      	ittet	ne
 8003fba:	f001 047f 	andne.w	r4, r1, #127	; 0x7f
 8003fbe:	fb05 0004 	mlane	r0, r5, r4, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003fc2:	fb05 0001 	mlaeq	r0, r5, r1, r0
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003fc6:	3028      	addne	r0, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003fc8:	bf08      	it	eq
 8003fca:	30b4      	addeq	r0, #180	; 0xb4
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003fcc:	b912      	cbnz	r2, 8003fd4 <HAL_PCDEx_PMAConfig+0x26>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0;
 8003fce:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8003fd0:	8083      	strh	r3, [r0, #4]
 8003fd2:	e004      	b.n	8003fde <HAL_PCDEx_PMAConfig+0x30>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 8003fd4:	2201      	movs	r2, #1
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
 8003fd6:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 8003fd8:	0c1b      	lsrs	r3, r3, #16
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 8003fda:	7282      	strb	r2, [r0, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 8003fdc:	8103      	strh	r3, [r0, #8]
  }
  
  return HAL_OK; 
}
 8003fde:	2000      	movs	r0, #0
 8003fe0:	bd30      	pop	{r4, r5, pc}

08003fe2 <PCD_WritePMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  * @param   wPMABufAddr: address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003fe8:	b530      	push	{r4, r5, lr}
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8003fea:	105b      	asrs	r3, r3, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8003fec:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0; i--)
 8003ff0:	2400      	movs	r4, #0
 8003ff2:	429c      	cmp	r4, r3
 8003ff4:	f101 0102 	add.w	r1, r1, #2
 8003ff8:	d009      	beq.n	800400e <PCD_WritePMA+0x2c>
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8003ffa:	f811 5c01 	ldrb.w	r5, [r1, #-1]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8003ffe:	f811 0c02 	ldrb.w	r0, [r1, #-2]
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8004002:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
    *pdwVal++ = temp2;
 8004006:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 800400a:	3401      	adds	r4, #1
 800400c:	e7f1      	b.n	8003ff2 <PCD_WritePMA+0x10>
    pdwVal++;
    pbUsrBuf++;
  }
}
 800400e:	bd30      	pop	{r4, r5, pc}

08004010 <PCD_ReadPMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8004010:	3301      	adds	r3, #1
 8004012:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  * @param   wPMABufAddr: address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004016:	b510      	push	{r4, lr}
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8004018:	105b      	asrs	r3, r3, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800401a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0; i--)
 800401e:	2400      	movs	r4, #0
 8004020:	429c      	cmp	r4, r3
 8004022:	d005      	beq.n	8004030 <PCD_ReadPMA+0x20>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8004024:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8004028:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 800402c:	3401      	adds	r4, #1
 800402e:	e7f7      	b.n	8004020 <PCD_ReadPMA+0x10>
    pbUsrBuf++;
  }
}
 8004030:	bd10      	pop	{r4, pc}

08004032 <HAL_PCDEx_SetConnectionState>:
  * @param  hpcd: PCD handle
  * @param  state: Device state
  * @retval None
  */
 __weak void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8004032:	4770      	bx	lr

08004034 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004034:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8004036:	b180      	cbz	r0, 800405a <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8004038:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800403c:	b113      	cbz	r3, 8004044 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800403e:	2300      	movs	r3, #0
 8004040:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8004044:	b109      	cbz	r1, 800404a <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8004046:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800404a:	2301      	movs	r3, #1
 800404c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 8004050:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004052:	f000 fc85 	bl	8004960 <USBD_LL_Init>
  
  return USBD_OK; 
 8004056:	2000      	movs	r0, #0
 8004058:	bd08      	pop	{r3, pc}
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 800405a:	2002      	movs	r0, #2
  pdev->id = id;
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
  
  return USBD_OK; 
}
 800405c:	bd08      	pop	{r3, pc}

0800405e <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 800405e:	b119      	cbz	r1, 8004068 <USBD_RegisterClass+0xa>
  {
    /* link the class tgo the USB Device handle */
    pdev->pClass = pclass;
 8004060:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8004064:	2000      	movs	r0, #0
 8004066:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8004068:	2002      	movs	r0, #2
  }
  
  return status;
}
 800406a:	4770      	bx	lr

0800406c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800406c:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 800406e:	f000 fcb5 	bl	80049dc <USBD_LL_Start>
  
  return USBD_OK;  
}
 8004072:	2000      	movs	r0, #0
 8004074:	bd08      	pop	{r3, pc}

08004076 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004076:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8004078:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800407c:	b90b      	cbnz	r3, 8004082 <USBD_SetClassConfig+0xc>
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800407e:	2002      	movs	r0, #2
 8004080:	bd08      	pop	{r3, pc}
  
  if(pdev->pClass != NULL)
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4798      	blx	r3
 8004086:	2800      	cmp	r0, #0
 8004088:	d1f9      	bne.n	800407e <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 800408a:	bd08      	pop	{r3, pc}

0800408c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800408c:	b508      	push	{r3, lr}
  /* Clear configuration  and Deinitialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800408e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	4798      	blx	r3
  return USBD_OK;
}
 8004096:	2000      	movs	r0, #0
 8004098:	bd08      	pop	{r3, pc}

0800409a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800409a:	b538      	push	{r3, r4, r5, lr}
 800409c:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800409e:	f500 7502 	add.w	r5, r0, #520	; 0x208
 80040a2:	4628      	mov	r0, r5
 80040a4:	f000 f8c8 	bl	8004238 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80040a8:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 80040aa:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{

  USBD_ParseSetupRequest(&pdev->request, psetup);
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80040ae:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80040b2:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 80040b6:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 80040ba:	f001 031f 	and.w	r3, r1, #31
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d00c      	beq.n	80040dc <USBD_LL_SetupStage+0x42>
 80040c2:	d306      	bcc.n	80040d2 <USBD_LL_SetupStage+0x38>
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d10e      	bne.n	80040e6 <USBD_LL_SetupStage+0x4c>
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
    break;
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 80040c8:	4620      	mov	r0, r4
 80040ca:	4629      	mov	r1, r5
 80040cc:	f000 f9f8 	bl	80044c0 <USBD_StdEPReq>
    break;
 80040d0:	e00e      	b.n	80040f0 <USBD_LL_SetupStage+0x56>
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 80040d2:	4620      	mov	r0, r4
 80040d4:	4629      	mov	r1, r5
 80040d6:	f000 f8cf 	bl	8004278 <USBD_StdDevReq>
    break;
 80040da:	e009      	b.n	80040f0 <USBD_LL_SetupStage+0x56>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 80040dc:	4620      	mov	r0, r4
 80040de:	4629      	mov	r1, r5
 80040e0:	f000 f9d6 	bl	8004490 <USBD_StdItfReq>
    break;
 80040e4:	e004      	b.n	80040f0 <USBD_LL_SetupStage+0x56>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80040e6:	4620      	mov	r0, r4
 80040e8:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80040ec:	f000 fc8e 	bl	8004a0c <USBD_LL_StallEP>
    break;
  }  
  return USBD_OK;  
}
 80040f0:	2000      	movs	r0, #0
 80040f2:	bd38      	pop	{r3, r4, r5, pc}

080040f4 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 80040f4:	b510      	push	{r4, lr}
 80040f6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 80040f8:	bb09      	cbnz	r1, 800413e <USBD_LL_DataOutStage+0x4a>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80040fa:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 80040fe:	2b03      	cmp	r3, #3
 8004100:	d126      	bne.n	8004150 <USBD_LL_DataOutStage+0x5c>
    {
      if(pep->rem_length > pep->maxpacket)
 8004102:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 8004106:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 800410a:	4299      	cmp	r1, r3
 800410c:	d90a      	bls.n	8004124 <USBD_LL_DataOutStage+0x30>
      {
        pep->rem_length -=  pep->maxpacket;
 800410e:	1ac9      	subs	r1, r1, r3
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8004110:	428b      	cmp	r3, r1
 8004112:	bf28      	it	cs
 8004114:	460b      	movcs	r3, r1
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
 8004116:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
       
        USBD_CtlContinueRx (pdev, 
 800411a:	4611      	mov	r1, r2
 800411c:	b29a      	uxth	r2, r3
 800411e:	f000 fa6c 	bl	80045fa <USBD_CtlContinueRx>
 8004122:	e015      	b.n	8004150 <USBD_LL_DataOutStage+0x5c>
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004124:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	b123      	cbz	r3, 8004136 <USBD_LL_DataOutStage+0x42>
 800412c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8004130:	2a03      	cmp	r2, #3
 8004132:	d100      	bne.n	8004136 <USBD_LL_DataOutStage+0x42>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8004134:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004136:	4620      	mov	r0, r4
 8004138:	f000 fa68 	bl	800460c <USBD_CtlSendStatus>
 800413c:	e008      	b.n	8004150 <USBD_LL_DataOutStage+0x5c>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 800413e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	b123      	cbz	r3, 8004150 <USBD_LL_DataOutStage+0x5c>
 8004146:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800414a:	2a03      	cmp	r2, #3
 800414c:	d100      	bne.n	8004150 <USBD_LL_DataOutStage+0x5c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
 800414e:	4798      	blx	r3
  }  
  return USBD_OK;
}
 8004150:	2000      	movs	r0, #0
 8004152:	bd10      	pop	{r4, pc}

08004154 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8004154:	b538      	push	{r3, r4, r5, lr}
 8004156:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8004158:	bba9      	cbnz	r1, 80041c6 <USBD_LL_DataInStage+0x72>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800415a:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 800415e:	2b02      	cmp	r3, #2
 8004160:	d129      	bne.n	80041b6 <USBD_LL_DataInStage+0x62>
    {
      if(pep->rem_length > pep->maxpacket)
 8004162:	69c5      	ldr	r5, [r0, #28]
 8004164:	6a03      	ldr	r3, [r0, #32]
 8004166:	429d      	cmp	r5, r3
 8004168:	d906      	bls.n	8004178 <USBD_LL_DataInStage+0x24>
      {
        pep->rem_length -=  pep->maxpacket;
 800416a:	1aeb      	subs	r3, r5, r3
        
        USBD_CtlContinueSendData (pdev, 
 800416c:	4611      	mov	r1, r2
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
 800416e:	61c3      	str	r3, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8004170:	b29a      	uxth	r2, r3
 8004172:	f000 fa29 	bl	80045c8 <USBD_CtlContinueSendData>
 8004176:	e01e      	b.n	80041b6 <USBD_LL_DataInStage+0x62>
                                  pdata, 
                                  pep->rem_length);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8004178:	6982      	ldr	r2, [r0, #24]
 800417a:	fbb2 f5f3 	udiv	r5, r2, r3
 800417e:	fb03 2515 	mls	r5, r3, r5, r2
 8004182:	b95d      	cbnz	r5, 800419c <USBD_LL_DataInStage+0x48>
 8004184:	429a      	cmp	r2, r3
 8004186:	d309      	bcc.n	800419c <USBD_LL_DataInStage+0x48>
           (pep->total_length >= pep->maxpacket) &&
 8004188:	f8d0 31f8 	ldr.w	r3, [r0, #504]	; 0x1f8
 800418c:	429a      	cmp	r2, r3
 800418e:	d205      	bcs.n	800419c <USBD_LL_DataInStage+0x48>
             (pep->total_length < pdev->ep0_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8004190:	462a      	mov	r2, r5
 8004192:	f000 fa19 	bl	80045c8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8004196:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
 800419a:	e00c      	b.n	80041b6 <USBD_LL_DataInStage+0x62>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800419c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	b12b      	cbz	r3, 80041b0 <USBD_LL_DataInStage+0x5c>
 80041a4:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 80041a8:	2a03      	cmp	r2, #3
 80041aa:	d101      	bne.n	80041b0 <USBD_LL_DataInStage+0x5c>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            pdev->pClass->EP0_TxSent(pdev); 
 80041ac:	4620      	mov	r0, r4
 80041ae:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 80041b0:	4620      	mov	r0, r4
 80041b2:	f000 fa36 	bl	8004622 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80041b6:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d10c      	bne.n	80041d8 <USBD_LL_DataInStage+0x84>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 80041be:	2300      	movs	r3, #0
 80041c0:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 80041c4:	e008      	b.n	80041d8 <USBD_LL_DataInStage+0x84>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 80041c6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	b123      	cbz	r3, 80041d8 <USBD_LL_DataInStage+0x84>
 80041ce:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80041d2:	2a03      	cmp	r2, #3
 80041d4:	d100      	bne.n	80041d8 <USBD_LL_DataInStage+0x84>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
 80041d6:	4798      	blx	r3
  }  
  return USBD_OK;
}
 80041d8:	2000      	movs	r0, #0
 80041da:	bd38      	pop	{r3, r4, r5, pc}

080041dc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80041dc:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80041de:	2100      	movs	r1, #0
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80041e0:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80041e2:	460a      	mov	r2, r1
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80041e4:	2540      	movs	r5, #64	; 0x40
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80041e6:	2340      	movs	r3, #64	; 0x40
 80041e8:	f000 fbff 	bl	80049ea <USBD_LL_OpenEP>
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80041ec:	462b      	mov	r3, r5
  USBD_LL_OpenEP(pdev,
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80041ee:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80041f2:	4620      	mov	r0, r4
 80041f4:	2180      	movs	r1, #128	; 0x80
 80041f6:	2200      	movs	r2, #0
 80041f8:	f000 fbf7 	bl	80049ea <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call usr call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80041fc:	2301      	movs	r3, #1
 80041fe:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8004202:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  USBD_LL_OpenEP(pdev,
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004206:	6225      	str	r5, [r4, #32]
  /* Upon Reset call usr call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  
  if (pdev->pClassData) 
 8004208:	b12b      	cbz	r3, 8004216 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800420a:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800420e:	7921      	ldrb	r1, [r4, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	4620      	mov	r0, r4
 8004214:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8004216:	2000      	movs	r0, #0
 8004218:	bd38      	pop	{r3, r4, r5, pc}

0800421a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800421a:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800421c:	2000      	movs	r0, #0
 800421e:	4770      	bx	lr

08004220 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8004220:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8004222:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8004226:	2a03      	cmp	r2, #3
 8004228:	d104      	bne.n	8004234 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 800422a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800422e:	69db      	ldr	r3, [r3, #28]
 8004230:	b103      	cbz	r3, 8004234 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8004232:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8004234:	2000      	movs	r0, #0
 8004236:	bd08      	pop	{r3, pc}

08004238 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest     = *(uint8_t *)  (pdata);
 8004238:	780b      	ldrb	r3, [r1, #0]
 800423a:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800423c:	784b      	ldrb	r3, [r1, #1]
 800423e:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8004240:	78ca      	ldrb	r2, [r1, #3]
 8004242:	788b      	ldrb	r3, [r1, #2]
 8004244:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004248:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800424a:	794a      	ldrb	r2, [r1, #5]
 800424c:	790b      	ldrb	r3, [r1, #4]
 800424e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004252:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8004254:	79ca      	ldrb	r2, [r1, #7]
 8004256:	798b      	ldrb	r3, [r1, #6]
 8004258:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800425c:	80c3      	strh	r3, [r0, #6]
 800425e:	4770      	bx	lr

08004260 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8004260:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80);
 8004262:	2180      	movs	r1, #128	; 0x80
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8004264:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8004266:	f000 fbd1 	bl	8004a0c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800426a:	4620      	mov	r0, r4
 800426c:	2100      	movs	r1, #0
}
 800426e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
  USBD_LL_StallEP(pdev , 0);
 8004272:	f000 bbcb 	b.w	8004a0c <USBD_LL_StallEP>
	...

08004278 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004278:	b573      	push	{r0, r1, r4, r5, r6, lr}
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 800427a:	784b      	ldrb	r3, [r1, #1]
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800427c:	4604      	mov	r4, r0
 800427e:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 8004280:	2b09      	cmp	r3, #9
 8004282:	f200 80fc 	bhi.w	800447e <USBD_StdDevReq+0x206>
 8004286:	e8df f013 	tbh	[pc, r3, lsl #1]
 800428a:	00ce      	.short	0x00ce
 800428c:	00fa00e5 	.word	0x00fa00e5
 8004290:	00fa00e1 	.word	0x00fa00e1
 8004294:	000a0077 	.word	0x000a0077
 8004298:	00bd00fa 	.word	0x00bd00fa
 800429c:	0093      	.short	0x0093
{
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 800429e:	884b      	ldrh	r3, [r1, #2]
 80042a0:	0a1a      	lsrs	r2, r3, #8
 80042a2:	3a01      	subs	r2, #1
 80042a4:	2a06      	cmp	r2, #6
 80042a6:	f200 80ea 	bhi.w	800447e <USBD_StdDevReq+0x206>
 80042aa:	e8df f012 	tbh	[pc, r2, lsl #1]
 80042ae:	0007      	.short	0x0007
 80042b0:	0018000b 	.word	0x0018000b
 80042b4:	00e800e8 	.word	0x00e800e8
 80042b8:	0049003d 	.word	0x0049003d
  {
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80042bc:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	e02c      	b.n	800431e <USBD_StdDevReq+0xa6>
    break;
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 80042c4:	7c02      	ldrb	r2, [r0, #16]
 80042c6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80042ca:	b90a      	cbnz	r2, 80042d0 <USBD_StdDevReq+0x58>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80042cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ce:	e000      	b.n	80042d2 <USBD_StdDevReq+0x5a>
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80042d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d2:	f10d 0006 	add.w	r0, sp, #6
 80042d6:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80042d8:	2302      	movs	r3, #2
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80042da:	4601      	mov	r1, r0
 80042dc:	e03c      	b.n	8004358 <USBD_StdDevReq+0xe0>
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	2b05      	cmp	r3, #5
 80042e2:	f200 80cc 	bhi.w	800447e <USBD_StdDevReq+0x206>
 80042e6:	e8df f003 	tbb	[pc, r3]
 80042ea:	0703      	.short	0x0703
 80042ec:	17130f0b 	.word	0x17130f0b
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80042f0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	e012      	b.n	800431e <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80042f8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	e00e      	b.n	800431e <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004300:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	e00a      	b.n	800431e <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004308:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	e006      	b.n	800431e <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004310:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	e002      	b.n	800431e <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004318:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	7c20      	ldrb	r0, [r4, #16]
 8004320:	f10d 0106 	add.w	r1, sp, #6
 8004324:	4798      	blx	r3
 8004326:	e009      	b.n	800433c <USBD_StdDevReq+0xc4>
#endif   
    }
    break;
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8004328:	7c03      	ldrb	r3, [r0, #16]
 800432a:	2b00      	cmp	r3, #0
 800432c:	f040 80a7 	bne.w	800447e <USBD_StdDevReq+0x206>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004330:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004334:	f10d 0006 	add.w	r0, sp, #6
 8004338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800433a:	4798      	blx	r3
 800433c:	4601      	mov	r1, r0
 800433e:	e00c      	b.n	800435a <USBD_StdDevReq+0xe2>
      USBD_CtlError(pdev , req);
      return;
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8004340:	7c03      	ldrb	r3, [r0, #16]
 8004342:	2b00      	cmp	r3, #0
 8004344:	f040 809b 	bne.w	800447e <USBD_StdDevReq+0x206>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004348:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800434c:	f10d 0006 	add.w	r0, sp, #6
 8004350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004352:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004354:	2307      	movs	r3, #7
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004356:	4601      	mov	r1, r0
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004358:	704b      	strb	r3, [r1, #1]
  default: 
     USBD_CtlError(pdev , req);
    return;
  }
  
  if((len != 0)&& (req->wLength != 0))
 800435a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800435e:	2b00      	cmp	r3, #0
 8004360:	f000 8091 	beq.w	8004486 <USBD_StdDevReq+0x20e>
 8004364:	88ea      	ldrh	r2, [r5, #6]
 8004366:	2a00      	cmp	r2, #0
 8004368:	f000 808d 	beq.w	8004486 <USBD_StdDevReq+0x20e>
  {
    
    len = MIN(len , req->wLength);
 800436c:	429a      	cmp	r2, r3
 800436e:	bf28      	it	cs
 8004370:	461a      	movcs	r2, r3
 8004372:	f8ad 2006 	strh.w	r2, [sp, #6]
 8004376:	e054      	b.n	8004422 <USBD_StdDevReq+0x1aa>
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8004378:	888b      	ldrh	r3, [r1, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d17f      	bne.n	800447e <USBD_StdDevReq+0x206>
 800437e:	88cb      	ldrh	r3, [r1, #6]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d17c      	bne.n	800447e <USBD_StdDevReq+0x206>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004384:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8004388:	788e      	ldrb	r6, [r1, #2]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800438a:	2b03      	cmp	r3, #3
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800438c:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004390:	d075      	beq.n	800447e <USBD_StdDevReq+0x206>
    {
      USBD_CtlError(pdev , req);
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8004392:	f880 61fe 	strb.w	r6, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8004396:	4631      	mov	r1, r6
 8004398:	f000 fb59 	bl	8004a4e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 800439c:	4620      	mov	r0, r4
 800439e:	f000 f935 	bl	800460c <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 80043a2:	b10e      	cbz	r6, 80043a8 <USBD_StdDevReq+0x130>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80043a4:	2302      	movs	r3, #2
 80043a6:	e000      	b.n	80043aa <USBD_StdDevReq+0x132>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80043a8:	2301      	movs	r3, #1
 80043aa:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 80043ae:	e06a      	b.n	8004486 <USBD_StdDevReq+0x20e>
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 80043b0:	7889      	ldrb	r1, [r1, #2]
 80043b2:	4e36      	ldr	r6, [pc, #216]	; (800448c <USBD_StdDevReq+0x214>)
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80043b4:	2901      	cmp	r1, #1
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 80043b6:	7031      	strb	r1, [r6, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80043b8:	d861      	bhi.n	800447e <USBD_StdDevReq+0x206>
  {            
     USBD_CtlError(pdev , req);                              
  } 
  else 
  {
    switch (pdev->dev_state) 
 80043ba:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d002      	beq.n	80043c8 <USBD_StdDevReq+0x150>
 80043c2:	2b03      	cmp	r3, #3
 80043c4:	d008      	beq.n	80043d8 <USBD_StdDevReq+0x160>
 80043c6:	e05a      	b.n	800447e <USBD_StdDevReq+0x206>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 80043c8:	2900      	cmp	r1, #0
 80043ca:	d054      	beq.n	8004476 <USBD_StdDevReq+0x1fe>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 80043cc:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80043ce:	2303      	movs	r3, #3
    switch (pdev->dev_state) 
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 80043d0:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80043d2:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
 80043d6:	e00f      	b.n	80043f8 <USBD_StdDevReq+0x180>
         USBD_CtlSendStatus(pdev);
      }
      break;
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 80043d8:	b931      	cbnz	r1, 80043e8 <USBD_StdDevReq+0x170>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80043da:	2302      	movs	r3, #2
 80043dc:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 80043e0:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 80043e2:	f7ff fe53 	bl	800408c <USBD_ClrClassConfig>
 80043e6:	e046      	b.n	8004476 <USBD_StdDevReq+0x1fe>
        USBD_CtlSendStatus(pdev);
        
      } 
      else  if (cfgidx != pdev->dev_config) 
 80043e8:	6841      	ldr	r1, [r0, #4]
 80043ea:	2901      	cmp	r1, #1
 80043ec:	d043      	beq.n	8004476 <USBD_StdDevReq+0x1fe>
      {
        /* Clear old configuration */
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 80043ee:	b2c9      	uxtb	r1, r1
 80043f0:	f7ff fe4c 	bl	800408c <USBD_ClrClassConfig>
        
        /* set new configuration */
        pdev->dev_config = cfgidx;
 80043f4:	7831      	ldrb	r1, [r6, #0]
 80043f6:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80043f8:	4620      	mov	r0, r4
 80043fa:	f7ff fe3c 	bl	8004076 <USBD_SetClassConfig>
 80043fe:	2802      	cmp	r0, #2
 8004400:	d139      	bne.n	8004476 <USBD_StdDevReq+0x1fe>
 8004402:	e03c      	b.n	800447e <USBD_StdDevReq+0x206>
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{

  if (req->wLength != 1) 
 8004404:	88ca      	ldrh	r2, [r1, #6]
 8004406:	2a01      	cmp	r2, #1
 8004408:	d139      	bne.n	800447e <USBD_StdDevReq+0x206>
  {                   
     USBD_CtlError(pdev , req);
  }
  else 
  {
    switch (pdev->dev_state )  
 800440a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800440e:	2b02      	cmp	r3, #2
 8004410:	d003      	beq.n	800441a <USBD_StdDevReq+0x1a2>
 8004412:	2b03      	cmp	r3, #3
 8004414:	d133      	bne.n	800447e <USBD_StdDevReq+0x206>
                        1);
      break;
      
    case USBD_STATE_CONFIGURED:   
      
      USBD_CtlSendData (pdev, 
 8004416:	1d01      	adds	r1, r0, #4
 8004418:	e015      	b.n	8004446 <USBD_StdDevReq+0x1ce>
  else 
  {
    switch (pdev->dev_state )  
    {
    case USBD_STATE_ADDRESSED:                     
      pdev->dev_default_config = 0;
 800441a:	4601      	mov	r1, r0
 800441c:	2300      	movs	r3, #0
 800441e:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, 
 8004422:	4620      	mov	r0, r4
 8004424:	e00f      	b.n	8004446 <USBD_StdDevReq+0x1ce>
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
  
    
  switch (pdev->dev_state) 
 8004426:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800442a:	3b02      	subs	r3, #2
 800442c:	2b01      	cmp	r3, #1
 800442e:	d826      	bhi.n	800447e <USBD_StdDevReq+0x206>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8004430:	2301      	movs	r3, #1
 8004432:	60c3      	str	r3, [r0, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8004434:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8004438:	b10b      	cbz	r3, 800443e <USBD_StdDevReq+0x1c6>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800443a:	2303      	movs	r3, #3
 800443c:	60c3      	str	r3, [r0, #12]
    }
    
    USBD_CtlSendData (pdev, 
 800443e:	4620      	mov	r0, r4
 8004440:	f104 010c 	add.w	r1, r4, #12
 8004444:	2202      	movs	r2, #2
 8004446:	f000 f8b1 	bl	80045ac <USBD_CtlSendData>
 800444a:	e01c      	b.n	8004486 <USBD_StdDevReq+0x20e>
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800444c:	884b      	ldrh	r3, [r1, #2]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d119      	bne.n	8004486 <USBD_StdDevReq+0x20e>
 8004452:	e008      	b.n	8004466 <USBD_StdDevReq+0x1ee>
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  switch (pdev->dev_state)
 8004454:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004458:	3b02      	subs	r3, #2
 800445a:	2b01      	cmp	r3, #1
 800445c:	d80f      	bhi.n	800447e <USBD_StdDevReq+0x206>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 800445e:	884b      	ldrh	r3, [r1, #2]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d110      	bne.n	8004486 <USBD_StdDevReq+0x20e>
    {
      pdev->dev_remote_wakeup = 0; 
 8004464:	2300      	movs	r3, #0
 8004466:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 800446a:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800446e:	4620      	mov	r0, r4
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	4629      	mov	r1, r5
 8004474:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8004476:	4620      	mov	r0, r4
 8004478:	f000 f8c8 	bl	800460c <USBD_CtlSendStatus>
 800447c:	e003      	b.n	8004486 <USBD_StdDevReq+0x20e>
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
    break;
    
  default:  
    USBD_CtlError(pdev , req);
 800447e:	4620      	mov	r0, r4
 8004480:	4629      	mov	r1, r5
 8004482:	f7ff feed 	bl	8004260 <USBD_CtlError>
    break;
  }
  
  return ret;
}
 8004486:	2000      	movs	r0, #0
 8004488:	b002      	add	sp, #8
 800448a:	bd70      	pop	{r4, r5, r6, pc}
 800448c:	20000ba4 	.word	0x20000ba4

08004490 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004490:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 8004492:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004496:	2b03      	cmp	r3, #3
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004498:	4604      	mov	r4, r0
 800449a:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 800449c:	d10c      	bne.n	80044b8 <USBD_StdItfReq+0x28>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800449e:	790b      	ldrb	r3, [r1, #4]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d809      	bhi.n	80044b8 <USBD_StdItfReq+0x28>
    {
      pdev->pClass->Setup (pdev, req); 
 80044a4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 80044ac:	88eb      	ldrh	r3, [r5, #6]
 80044ae:	b92b      	cbnz	r3, 80044bc <USBD_StdItfReq+0x2c>
      {
         USBD_CtlSendStatus(pdev);
 80044b0:	4620      	mov	r0, r4
 80044b2:	f000 f8ab 	bl	800460c <USBD_CtlSendStatus>
 80044b6:	e001      	b.n	80044bc <USBD_StdItfReq+0x2c>
       USBD_CtlError(pdev , req);
    }
    break;
    
  default:
     USBD_CtlError(pdev , req);
 80044b8:	f7ff fed2 	bl	8004260 <USBD_CtlError>
    break;
  }
  return USBD_OK;
}
 80044bc:	2000      	movs	r0, #0
 80044be:	bd38      	pop	{r3, r4, r5, pc}

080044c0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80044c0:	b570      	push	{r4, r5, r6, lr}
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
  
  switch (req->bRequest) 
 80044c2:	784e      	ldrb	r6, [r1, #1]
{
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 80044c4:	888a      	ldrh	r2, [r1, #4]
  
  switch (req->bRequest) 
 80044c6:	2e01      	cmp	r6, #1
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80044c8:	4604      	mov	r4, r0
 80044ca:	460d      	mov	r5, r1
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 80044cc:	b2d3      	uxtb	r3, r2
  
  switch (req->bRequest) 
 80044ce:	d010      	beq.n	80044f2 <USBD_StdEPReq+0x32>
 80044d0:	d326      	bcc.n	8004520 <USBD_StdEPReq+0x60>
 80044d2:	2e03      	cmp	r6, #3
 80044d4:	d14b      	bne.n	800456e <USBD_StdEPReq+0xae>
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev_state) 
 80044d6:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80044da:	2a02      	cmp	r2, #2
 80044dc:	d027      	beq.n	800452e <USBD_StdEPReq+0x6e>
 80044de:	2a03      	cmp	r2, #3
 80044e0:	d143      	bne.n	800456a <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 80044e2:	884a      	ldrh	r2, [r1, #2]
 80044e4:	b992      	cbnz	r2, 800450c <USBD_StdEPReq+0x4c>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80044e6:	065e      	lsls	r6, r3, #25
 80044e8:	d010      	beq.n	800450c <USBD_StdEPReq+0x4c>
        { 
          USBD_LL_StallEP(pdev , ep_addr);
 80044ea:	4619      	mov	r1, r3
 80044ec:	f000 fa8e 	bl	8004a0c <USBD_LL_StallEP>
 80044f0:	e00c      	b.n	800450c <USBD_StdEPReq+0x4c>
    }
    break;
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev_state) 
 80044f2:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80044f6:	2a02      	cmp	r2, #2
 80044f8:	d019      	beq.n	800452e <USBD_StdEPReq+0x6e>
 80044fa:	2a03      	cmp	r2, #3
 80044fc:	d135      	bne.n	800456a <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 80044fe:	884a      	ldrh	r2, [r1, #2]
 8004500:	bbaa      	cbnz	r2, 800456e <USBD_StdEPReq+0xae>
      {
        if ((ep_addr & 0x7F) != 0x00) 
 8004502:	0659      	lsls	r1, r3, #25
 8004504:	d008      	beq.n	8004518 <USBD_StdEPReq+0x58>
        {        
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8004506:	4619      	mov	r1, r3
 8004508:	f000 fa87 	bl	8004a1a <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 800450c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8004510:	4620      	mov	r0, r4
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	4629      	mov	r1, r5
 8004516:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004518:	4620      	mov	r0, r4
 800451a:	f000 f877 	bl	800460c <USBD_CtlSendStatus>
 800451e:	e026      	b.n	800456e <USBD_StdEPReq+0xae>
      break;    
    }
    break;
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev_state) 
 8004520:	f890 51fc 	ldrb.w	r5, [r0, #508]	; 0x1fc
 8004524:	2d02      	cmp	r5, #2
 8004526:	d002      	beq.n	800452e <USBD_StdEPReq+0x6e>
 8004528:	2d03      	cmp	r5, #3
 800452a:	d006      	beq.n	800453a <USBD_StdEPReq+0x7a>
 800452c:	e01d      	b.n	800456a <USBD_StdEPReq+0xaa>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr & 0x7F) != 0x00) 
 800452e:	065a      	lsls	r2, r3, #25
 8004530:	d01d      	beq.n	800456e <USBD_StdEPReq+0xae>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 8004532:	4619      	mov	r1, r3
 8004534:	f000 fa6a 	bl	8004a0c <USBD_LL_StallEP>
 8004538:	e019      	b.n	800456e <USBD_StdEPReq+0xae>
 800453a:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800453e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004542:	eb00 1505 	add.w	r5, r0, r5, lsl #4
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8004546:	4619      	mov	r1, r3
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8004548:	bf14      	ite	ne
 800454a:	3514      	addne	r5, #20
 800454c:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8004550:	f000 fa6a 	bl	8004a28 <USBD_LL_IsStallEP>
 8004554:	b110      	cbz	r0, 800455c <USBD_StdEPReq+0x9c>
      {
        pep->status = 0x0001;     
 8004556:	2301      	movs	r3, #1
 8004558:	602b      	str	r3, [r5, #0]
 800455a:	e000      	b.n	800455e <USBD_StdEPReq+0x9e>
      }
      else
      {
        pep->status = 0x0000;  
 800455c:	6028      	str	r0, [r5, #0]
      }
      
      USBD_CtlSendData (pdev,
 800455e:	4620      	mov	r0, r4
 8004560:	4629      	mov	r1, r5
 8004562:	2202      	movs	r2, #2
 8004564:	f000 f822 	bl	80045ac <USBD_CtlSendData>
                        (uint8_t *)&pep->status,
                        2);
      break;
 8004568:	e001      	b.n	800456e <USBD_StdEPReq+0xae>
      
    default:                         
      USBD_CtlError(pdev , req);
 800456a:	f7ff fe79 	bl	8004260 <USBD_CtlError>
    
  default:
    break;
  }
  return ret;
}
 800456e:	2000      	movs	r0, #0
 8004570:	bd70      	pop	{r4, r5, r6, pc}

08004572 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8004572:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8004574:	b1c8      	cbz	r0, 80045aa <USBD_GetString+0x38>
 8004576:	4604      	mov	r4, r0
 8004578:	1a23      	subs	r3, r4, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 800457a:	f814 5b01 	ldrb.w	r5, [r4], #1
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2d00      	cmp	r5, #0
 8004582:	d1f9      	bne.n	8004578 <USBD_GetString+0x6>
{
  uint8_t idx = 0;
  
  if (desc != NULL) 
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	3302      	adds	r3, #2
 8004588:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 800458a:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800458c:	2303      	movs	r3, #3
 800458e:	704b      	strb	r3, [r1, #1]
 8004590:	3801      	subs	r0, #1
 8004592:	2302      	movs	r3, #2
    
    while (*desc != '\0') 
 8004594:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8004598:	b13c      	cbz	r4, 80045aa <USBD_GetString+0x38>
    {
      unicode[idx++] = *desc++;
 800459a:	1c5a      	adds	r2, r3, #1
 800459c:	b2d2      	uxtb	r2, r2
 800459e:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0x00;
 80045a0:	3302      	adds	r3, #2
 80045a2:	2400      	movs	r4, #0
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	548c      	strb	r4, [r1, r2]
 80045a8:	e7f4      	b.n	8004594 <USBD_GetString+0x22>
 80045aa:	bd30      	pop	{r4, r5, pc}

080045ac <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80045ac:	b538      	push	{r3, r4, r5, lr}
 80045ae:	4613      	mov	r3, r2
 80045b0:	460d      	mov	r5, r1
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80045b2:	2202      	movs	r2, #2
 80045b4:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 80045b8:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 80045ba:	61c3      	str	r3, [r0, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80045bc:	2100      	movs	r1, #0
 80045be:	462a      	mov	r2, r5
 80045c0:	f000 fa4c 	bl	8004a5c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80045c4:	2000      	movs	r0, #0
 80045c6:	bd38      	pop	{r3, r4, r5, pc}

080045c8 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 80045c8:	b510      	push	{r4, lr}
 80045ca:	460c      	mov	r4, r1
 80045cc:	4613      	mov	r3, r2
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 80045ce:	2100      	movs	r1, #0
 80045d0:	4622      	mov	r2, r4
 80045d2:	f000 fa43 	bl	8004a5c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80045d6:	2000      	movs	r0, #0
 80045d8:	bd10      	pop	{r4, pc}

080045da <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 80045da:	b538      	push	{r3, r4, r5, lr}
 80045dc:	4613      	mov	r3, r2
 80045de:	460d      	mov	r5, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 80045e0:	2203      	movs	r2, #3
 80045e2:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 80045e6:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 80045ea:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 80045ee:	2100      	movs	r1, #0
 80045f0:	462a      	mov	r2, r5
 80045f2:	f000 fa3a 	bl	8004a6a <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 80045f6:	2000      	movs	r0, #0
 80045f8:	bd38      	pop	{r3, r4, r5, pc}

080045fa <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80045fa:	b510      	push	{r4, lr}
 80045fc:	460c      	mov	r4, r1
 80045fe:	4613      	mov	r3, r2

  USBD_LL_PrepareReceive (pdev,
 8004600:	2100      	movs	r1, #0
 8004602:	4622      	mov	r2, r4
 8004604:	f000 fa31 	bl	8004a6a <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8004608:	2000      	movs	r0, #0
 800460a:	bd10      	pop	{r4, pc}

0800460c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 800460c:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800460e:	2100      	movs	r1, #0
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004610:	2304      	movs	r3, #4
 8004612:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8004616:	460a      	mov	r2, r1
 8004618:	460b      	mov	r3, r1
 800461a:	f000 fa1f 	bl	8004a5c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800461e:	2000      	movs	r0, #0
 8004620:	bd08      	pop	{r3, pc}

08004622 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8004622:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8004624:	2100      	movs	r1, #0
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8004626:	2305      	movs	r3, #5
 8004628:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800462c:	460a      	mov	r2, r1
 800462e:	460b      	mov	r3, r1
 8004630:	f000 fa1b 	bl	8004a6a <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8004634:	2000      	movs	r0, #0
 8004636:	bd08      	pop	{r3, pc}

08004638 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 8004638:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 800463c:	b11b      	cbz	r3, 8004646 <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 800463e:	2000      	movs	r0, #0
 8004640:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8004644:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 8004646:	2002      	movs	r0, #2
  }
}
 8004648:	4770      	bx	lr

0800464a <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800464a:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 800464e:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 8004650:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8004654:	b15b      	cbz	r3, 800466e <USBD_CDC_EP0_RxReady+0x24>
 8004656:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800465a:	28ff      	cmp	r0, #255	; 0xff
 800465c:	d007      	beq.n	800466e <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8004664:	4621      	mov	r1, r4
 8004666:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 8004668:	23ff      	movs	r3, #255	; 0xff
 800466a:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 800466e:	2000      	movs	r0, #0
 8004670:	bd10      	pop	{r4, pc}
	...

08004674 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8004674:	2343      	movs	r3, #67	; 0x43
 8004676:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8004678:	4800      	ldr	r0, [pc, #0]	; (800467c <USBD_CDC_GetFSCfgDesc+0x8>)
 800467a:	4770      	bx	lr
 800467c:	20000018 	.word	0x20000018

08004680 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8004680:	2343      	movs	r3, #67	; 0x43
 8004682:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8004684:	4800      	ldr	r0, [pc, #0]	; (8004688 <USBD_CDC_GetHSCfgDesc+0x8>)
 8004686:	4770      	bx	lr
 8004688:	200000e4 	.word	0x200000e4

0800468c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800468c:	2343      	movs	r3, #67	; 0x43
 800468e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8004690:	4800      	ldr	r0, [pc, #0]	; (8004694 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8004692:	4770      	bx	lr
 8004694:	200000a0 	.word	0x200000a0

08004698 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8004698:	230a      	movs	r3, #10
 800469a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 800469c:	4800      	ldr	r0, [pc, #0]	; (80046a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800469e:	4770      	bx	lr
 80046a0:	20000094 	.word	0x20000094

080046a4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 80046a4:	b538      	push	{r3, r4, r5, lr}
 80046a6:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 80046a8:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80046ac:	f000 f9e4 	bl	8004a78 <USBD_LL_GetRxDataSize>
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80046b0:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80046b4:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80046b8:	b14b      	cbz	r3, 80046ce <USBD_CDC_DataOut+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80046ba:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 80046be:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 80046c8:	4798      	blx	r3

    return USBD_OK;
 80046ca:	2000      	movs	r0, #0
 80046cc:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    return USBD_FAIL;
 80046ce:	2002      	movs	r0, #2
  }
}
 80046d0:	bd38      	pop	{r3, r4, r5, pc}

080046d2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 80046d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046d4:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80046d6:	7809      	ldrb	r1, [r1, #0]
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 80046d8:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80046dc:	f001 0360 	and.w	r3, r1, #96	; 0x60
 80046e0:	2b20      	cmp	r3, #32
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 80046e2:	4606      	mov	r6, r0
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80046e4:	d120      	bne.n	8004728 <USBD_CDC_Setup+0x56>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80046e6:	88e2      	ldrh	r2, [r4, #6]
 80046e8:	7863      	ldrb	r3, [r4, #1]
 80046ea:	b1ba      	cbz	r2, 800471c <USBD_CDC_Setup+0x4a>
    {
      if (req->bmRequest & 0x80)
 80046ec:	0609      	lsls	r1, r1, #24
 80046ee:	d50b      	bpl.n	8004708 <USBD_CDC_Setup+0x36>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80046f0:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 80046f4:	4618      	mov	r0, r3
 80046f6:	688f      	ldr	r7, [r1, #8]
 80046f8:	4629      	mov	r1, r5
 80046fa:	47b8      	blx	r7
                                                          (uint8_t *)hcdc->data,
                                                          req->wLength);
          USBD_CtlSendData (pdev, 
 80046fc:	4630      	mov	r0, r6
 80046fe:	4629      	mov	r1, r5
 8004700:	88e2      	ldrh	r2, [r4, #6]
 8004702:	f7ff ff53 	bl	80045ac <USBD_CtlSendData>
 8004706:	e00f      	b.n	8004728 <USBD_CDC_Setup+0x56>
                            (uint8_t *)hcdc->data,
                            req->wLength);
      }
      else
      {
        hcdc->CmdOpCode = req->bRequest;
 8004708:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 800470c:	88e3      	ldrh	r3, [r4, #6]
 800470e:	f885 3201 	strb.w	r3, [r5, #513]	; 0x201
        
        USBD_CtlPrepareRx (pdev, 
 8004712:	4629      	mov	r1, r5
 8004714:	88e2      	ldrh	r2, [r4, #6]
 8004716:	f7ff ff60 	bl	80045da <USBD_CtlPrepareRx>
 800471a:	e005      	b.n	8004728 <USBD_CDC_Setup+0x56>
      }
      
    }
    else
    {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800471c:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 8004720:	4618      	mov	r0, r3
 8004722:	688c      	ldr	r4, [r1, #8]
 8004724:	4611      	mov	r1, r2
 8004726:	47a0      	blx	r4
 
  default: 
    break;
  }
  return USBD_OK;
}
 8004728:	2000      	movs	r0, #0
 800472a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800472c <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 800472c:	b510      	push	{r4, lr}
  uint8_t ret = 0;
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 800472e:	2181      	movs	r1, #129	; 0x81
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8004730:	4604      	mov	r4, r0
  uint8_t ret = 0;
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8004732:	f000 f964 	bl	80049fe <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8004736:	2101      	movs	r1, #1
 8004738:	4620      	mov	r0, r4
 800473a:	f000 f960 	bl	80049fe <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 800473e:	4620      	mov	r0, r4
 8004740:	2182      	movs	r1, #130	; 0x82
 8004742:	f000 f95c 	bl	80049fe <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8004746:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800474a:	b153      	cbz	r3, 8004762 <USBD_CDC_DeInit+0x36>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800474c:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004754:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8004758:	f000 f998 	bl	8004a8c <USBD_static_free>
    pdev->pClassData = NULL;
 800475c:	2300      	movs	r3, #0
 800475e:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
  }
  
  return ret;
}
 8004762:	2000      	movs	r0, #0
 8004764:	bd10      	pop	{r4, pc}

08004766 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8004766:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t ret = 0;
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004768:	7c03      	ldrb	r3, [r0, #16]
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 800476a:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 800476c:	2181      	movs	r1, #129	; 0x81
 800476e:	2202      	movs	r2, #2
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004770:	b94b      	cbnz	r3, 8004786 <USBD_CDC_Init+0x20>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8004772:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004776:	f000 f938 	bl	80049ea <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800477a:	4620      	mov	r0, r4
 800477c:	2101      	movs	r1, #1
 800477e:	2202      	movs	r2, #2
 8004780:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004784:	e006      	b.n	8004794 <USBD_CDC_Init+0x2e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8004786:	2340      	movs	r3, #64	; 0x40
 8004788:	f000 f92f 	bl	80049ea <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800478c:	4620      	mov	r0, r4
 800478e:	2101      	movs	r1, #1
 8004790:	2202      	movs	r2, #2
 8004792:	2340      	movs	r3, #64	; 0x40
 8004794:	f000 f929 	bl	80049ea <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 8004798:	2182      	movs	r1, #130	; 0x82
 800479a:	2203      	movs	r2, #3
 800479c:	2308      	movs	r3, #8
 800479e:	4620      	mov	r0, r4
 80047a0:	f000 f923 	bl	80049ea <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80047a4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80047a8:	f000 f96c 	bl	8004a84 <USBD_static_malloc>
 80047ac:	4606      	mov	r6, r0
 80047ae:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 80047b2:	b1c8      	cbz	r0, 80047e8 <USBD_CDC_Init+0x82>
  else
  {
    hcdc = pdev->pClassData;
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80047b4:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
    hcdc->RxState =0;
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80047bc:	7c27      	ldrb	r7, [r4, #16]
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80047be:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
    
    /* Init Xfer states */
    hcdc->TxState =0;
 80047c2:	2500      	movs	r5, #0
 80047c4:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80047c8:	4620      	mov	r0, r4
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
    
    /* Init Xfer states */
    hcdc->TxState =0;
    hcdc->RxState =0;
 80047ca:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80047ce:	2101      	movs	r1, #1
    
    /* Init Xfer states */
    hcdc->TxState =0;
    hcdc->RxState =0;
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80047d0:	b92f      	cbnz	r7, 80047de <USBD_CDC_Init+0x78>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80047d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047d6:	f000 f948 	bl	8004a6a <USBD_LL_PrepareReceive>
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
 80047da:	4638      	mov	r0, r7
 80047dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80047de:	2340      	movs	r3, #64	; 0x40
 80047e0:	f000 f943 	bl	8004a6a <USBD_LL_PrepareReceive>
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
 80047e4:	4628      	mov	r0, r5
 80047e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
  
  if(pdev->pClassData == NULL)
  {
    ret = 1; 
 80047e8:	2001      	movs	r0, #1
    }
    
    
  }
  return ret;
}
 80047ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080047ec <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 80047ec:	b119      	cbz	r1, 80047f6 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 80047ee:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 80047f2:	2000      	movs	r0, #0
 80047f4:	4770      	bx	lr
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
 80047f6:	2002      	movs	r0, #2
    pdev->pUserData= fops;
    ret = USBD_OK;    
  }
  
  return ret;
}
 80047f8:	4770      	bx	lr

080047fa <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 80047fa:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 80047fe:	2000      	movs	r0, #0
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  hcdc->TxBuffer = pbuff;
 8004800:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8004804:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
}
 8004808:	4770      	bx	lr

0800480a <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 800480a:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 800480e:	2000      	movs	r0, #0
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 8004810:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
  
  return USBD_OK;
}
 8004814:	4770      	bx	lr

08004816 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 8004816:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 8004818:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 800481c:	b175      	cbz	r5, 800483c <USBD_CDC_TransmitPacket+0x26>
  {
    if(hcdc->TxState == 0)
 800481e:	f8d5 4214 	ldr.w	r4, [r5, #532]	; 0x214
 8004822:	b96c      	cbnz	r4, 8004840 <USBD_CDC_TransmitPacket+0x2a>
    {
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8004824:	f8b5 3210 	ldrh.w	r3, [r5, #528]	; 0x210
 8004828:	f8d5 2208 	ldr.w	r2, [r5, #520]	; 0x208
 800482c:	2181      	movs	r1, #129	; 0x81
 800482e:	f000 f915 	bl	8004a5c <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 8004832:	2301      	movs	r3, #1
 8004834:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
      return USBD_OK;
 8004838:	4620      	mov	r0, r4
 800483a:	bd38      	pop	{r3, r4, r5, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 800483c:	2002      	movs	r0, #2
 800483e:	bd38      	pop	{r3, r4, r5, pc}
      hcdc->TxState = 1;
      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 8004840:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8004842:	bd38      	pop	{r3, r4, r5, pc}

08004844 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 8004844:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8004848:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800484a:	b163      	cbz	r3, 8004866 <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800484c:	7c04      	ldrb	r4, [r0, #16]
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800484e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004852:	2101      	movs	r1, #1
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004854:	b914      	cbnz	r4, 800485c <USBD_CDC_ReceivePacket+0x18>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004856:	f44f 7300 	mov.w	r3, #512	; 0x200
 800485a:	e000      	b.n	800485e <USBD_CDC_ReceivePacket+0x1a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800485c:	2340      	movs	r3, #64	; 0x40
 800485e:	f000 f904 	bl	8004a6a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004862:	2000      	movs	r0, #0
 8004864:	bd10      	pop	{r4, pc}
  }
  else
  {
    return USBD_FAIL;
 8004866:	2002      	movs	r0, #2
  }
}
 8004868:	bd10      	pop	{r4, pc}
	...

0800486c <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 800486c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIOA clock for USB DataLines */
  __GPIOA_CLK_ENABLE();
 8004870:	4c24      	ldr	r4, [pc, #144]	; (8004904 <HAL_PCD_MspInit+0x98>)
 8004872:	6963      	ldr	r3, [r4, #20]
 8004874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004878:	6163      	str	r3, [r4, #20]
  
  /* Enable the GPIOB clock for USB external Pull-Up */
  __GPIOB_CLK_ENABLE();
 800487a:	6963      	ldr	r3, [r4, #20]
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 800487c:	b086      	sub	sp, #24
  
  /* Enable the GPIOA clock for USB DataLines */
  __GPIOA_CLK_ENABLE();
  
  /* Enable the GPIOB clock for USB external Pull-Up */
  __GPIOB_CLK_ENABLE();
 800487e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004882:	6163      	str	r3, [r4, #20]

  /* Create a USB Disconnect signal for 1ms */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 8004884:	f44f 56c0 	mov.w	r6, #6144	; 0x1800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004888:	2311      	movs	r3, #17
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800488a:	2500      	movs	r5, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800488c:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8004890:	270e      	movs	r7, #14
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8004892:	a901      	add	r1, sp, #4
 8004894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  /* Enable the GPIOB clock for USB external Pull-Up */
  __GPIOB_CLK_ENABLE();

  /* Create a USB Disconnect signal for 1ms */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004898:	9302      	str	r3, [sp, #8]
  
  /* Enable the GPIOB clock for USB external Pull-Up */
  __GPIOB_CLK_ENABLE();

  /* Create a USB Disconnect signal for 1ms */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 800489a:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800489c:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800489e:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80048a2:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 80048a4:	f7fe fb88 	bl	8002fb8 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),0);
 80048a8:	4631      	mov	r1, r6
 80048aa:	462a      	mov	r2, r5
 80048ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048b0:	f7fe fc4c 	bl	800314c <HAL_GPIO_WritePin>
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBD_LL_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 80048b4:	2001      	movs	r0, #1
 80048b6:	f7fe fb0d 	bl	8002ed4 <HAL_Delay>
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 

  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),0);
  USBD_LL_Delay(1);
  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),1);
 80048ba:	4631      	mov	r1, r6
 80048bc:	2201      	movs	r2, #1
 80048be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048c2:	f7fe fc43 	bl	800314c <HAL_GPIO_WritePin>

  
  /* Configure USB DM and DP pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048c6:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 80048c8:	a901      	add	r1, sp, #4
 80048ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),1);

  
  /* Configure USB DM and DP pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ce:	9302      	str	r3, [sp, #8]
  USBD_LL_Delay(1);
  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),1);

  
  /* Configure USB DM and DP pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 80048d0:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d2:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80048d4:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80048d8:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 80048da:	f7fe fb6d 	bl	8002fb8 <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  HAL_GPIO_Init(USB_DISCONNECT_PORT, &GPIO_InitStruct); 
#endif  

  /* Enable USB FS Clock */
  __USB_CLK_ENABLE();
 80048de:	69e3      	ldr	r3, [r4, #28]
 80048e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80048e4:	61e3      	str	r3, [r4, #28]
  
  /* Enable SYSCFG Clock */
  __SYSCFG_CLK_ENABLE();
 80048e6:	69a3      	ldr	r3, [r4, #24]
 80048e8:	f043 0301 	orr.w	r3, r3, #1
 80048ec:	61a3      	str	r3, [r4, #24]
#endif
  
#if defined (USE_USB_INTERRUPT_DEFAULT)
  
  /* Set USB Default FS Interrupt priority */
  HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 5, 0);
 80048ee:	2105      	movs	r1, #5
 80048f0:	462a      	mov	r2, r5
 80048f2:	2014      	movs	r0, #20
 80048f4:	f7fe fb0e 	bl	8002f14 <HAL_NVIC_SetPriority>
  
  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn); 
 80048f8:	2014      	movs	r0, #20
 80048fa:	f7fe fb3b 	bl	8002f74 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
  
  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(USB_LP_IRQn); 
#endif
}
 80048fe:	b006      	add	sp, #24
 8004900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004904:	40021000 	.word	0x40021000

08004908 <HAL_PCD_SetupStageCallback>:
  * @brief  SetupStage callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8004908:	4601      	mov	r1, r0
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 800490a:	f501 71a2 	add.w	r1, r1, #324	; 0x144
 800490e:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 8004912:	f7ff bbc2 	b.w	800409a <USBD_LL_SetupStage>

08004916 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004916:	231c      	movs	r3, #28
 8004918:	fb03 0301 	mla	r3, r3, r1, r0
 800491c:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 8004920:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8004924:	f7ff bbe6 	b.w	80040f4 <USBD_LL_DataOutStage>

08004928 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004928:	231c      	movs	r3, #28
 800492a:	fb03 0301 	mla	r3, r3, r1, r0
 800492e:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 8004932:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004934:	f7ff bc0e 	b.w	8004154 <USBD_LL_DataInStage>

08004938 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF(hpcd->pData);
 8004938:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800493c:	f7ff bc70 	b.w	8004220 <USBD_LL_SOF>

08004940 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 8004940:	b510      	push	{r4, lr}
 8004942:	4604      	mov	r4, r0
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 8004944:	2101      	movs	r1, #1
 8004946:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800494a:	f7ff fc66 	bl	800421a <USBD_LL_SetSpeed>
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 800494e:	f8d4 0174 	ldr.w	r0, [r4, #372]	; 0x174
}
 8004952:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 8004956:	f7ff bc41 	b.w	80041dc <USBD_LL_Reset>

0800495a <HAL_PCD_SuspendCallback>:
  * @brief  Suspend callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800495a:	4770      	bx	lr

0800495c <HAL_PCD_ResumeCallback>:
  * @brief  Resume callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800495c:	4770      	bx	lr
	...

08004960 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{    
 8004960:	b538      	push	{r3, r4, r5, lr}
  /* Set LL Driver parameters */
  hpcd.Instance = USB;
  hpcd.Init.dev_endpoints = 8;
 8004962:	4a1c      	ldr	r2, [pc, #112]	; (80049d4 <USBD_LL_Init+0x74>)
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{    
 8004964:	4605      	mov	r5, r0
  /* Set LL Driver parameters */
  hpcd.Instance = USB;
 8004966:	481c      	ldr	r0, [pc, #112]	; (80049d8 <USBD_LL_Init+0x78>)
  hpcd.Init.ep0_mps = PCD_EP0MPS_64;
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd.Init.speed = PCD_SPEED_FULL;
  /* Link The driver to the stack */
  hpcd.pData = pdev;
  pdev->pData = &hpcd;
 8004968:	f8c5 0220 	str.w	r0, [r5, #544]	; 0x220
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{    
  /* Set LL Driver parameters */
  hpcd.Instance = USB;
  hpcd.Init.dev_endpoints = 8;
 800496c:	2308      	movs	r3, #8
  hpcd.Init.ep0_mps = PCD_EP0MPS_64;
 800496e:	2400      	movs	r4, #0
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{    
  /* Set LL Driver parameters */
  hpcd.Instance = USB;
  hpcd.Init.dev_endpoints = 8;
 8004970:	e880 000c 	stmia.w	r0, {r2, r3}
  hpcd.Init.ep0_mps = PCD_EP0MPS_64;
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004974:	2302      	movs	r3, #2
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{    
  /* Set LL Driver parameters */
  hpcd.Instance = USB;
  hpcd.Init.dev_endpoints = 8;
  hpcd.Init.ep0_mps = PCD_EP0MPS_64;
 8004976:	60c4      	str	r4, [r0, #12]
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004978:	6103      	str	r3, [r0, #16]
  hpcd.Init.speed = PCD_SPEED_FULL;
 800497a:	6083      	str	r3, [r0, #8]
  /* Link The driver to the stack */
  hpcd.pData = pdev;
 800497c:	f8c0 5174 	str.w	r5, [r0, #372]	; 0x174
  pdev->pData = &hpcd;
  /* Initialize LL Driver */
  HAL_PCD_Init(pdev->pData);
 8004980:	f7fe fbed 	bl	800315e <HAL_PCD_Init>
  
  HAL_PCDEx_PMAConfig(pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 8004984:	4621      	mov	r1, r4
 8004986:	4622      	mov	r2, r4
 8004988:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 800498c:	2340      	movs	r3, #64	; 0x40
 800498e:	f7ff fb0e 	bl	8003fae <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 8004992:	2180      	movs	r1, #128	; 0x80
 8004994:	4622      	mov	r2, r4
 8004996:	460b      	mov	r3, r1
 8004998:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 800499c:	f7ff fb07 	bl	8003fae <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0xC0);  
 80049a0:	4622      	mov	r2, r4
 80049a2:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 80049a6:	2181      	movs	r1, #129	; 0x81
 80049a8:	23c0      	movs	r3, #192	; 0xc0
 80049aa:	f7ff fb00 	bl	8003fae <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x110);
 80049ae:	4622      	mov	r2, r4
 80049b0:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 80049b4:	2101      	movs	r1, #1
 80049b6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80049ba:	f7ff faf8 	bl	8003fae <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x100); 
 80049be:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 80049c2:	2182      	movs	r1, #130	; 0x82
 80049c4:	4622      	mov	r2, r4
 80049c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049ca:	f7ff faf0 	bl	8003fae <HAL_PCDEx_PMAConfig>
    
  return USBD_OK;
}
 80049ce:	4620      	mov	r0, r4
 80049d0:	bd38      	pop	{r3, r4, r5, pc}
 80049d2:	bf00      	nop
 80049d4:	40005c00 	.word	0x40005c00
 80049d8:	200010e0 	.word	0x200010e0

080049dc <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80049dc:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 80049de:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80049e2:	f7fe fc09 	bl	80031f8 <HAL_PCD_Start>
  return USBD_OK;
}
 80049e6:	2000      	movs	r0, #0
 80049e8:	bd08      	pop	{r3, pc}

080049ea <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 80049ea:	b510      	push	{r4, lr}
 80049ec:	4614      	mov	r4, r2
  HAL_PCD_EP_Open(pdev->pData,
 80049ee:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80049f2:	461a      	mov	r2, r3
 80049f4:	4623      	mov	r3, r4
 80049f6:	f7fe fc1b 	bl	8003230 <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
}
 80049fa:	2000      	movs	r0, #0
 80049fc:	bd10      	pop	{r4, pc}

080049fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80049fe:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004a00:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004a04:	f7fe fdb0 	bl	8003568 <HAL_PCD_EP_Close>
  return USBD_OK;
}
 8004a08:	2000      	movs	r0, #0
 8004a0a:	bd08      	pop	{r3, pc}

08004a0c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004a0c:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004a0e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004a12:	f7ff fa17 	bl	8003e44 <HAL_PCD_EP_SetStall>
  return USBD_OK;
}
 8004a16:	2000      	movs	r0, #0
 8004a18:	bd08      	pop	{r3, pc}

08004a1a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004a1a:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8004a1c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004a20:	f7ff fa61 	bl	8003ee6 <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 8004a24:	2000      	movs	r0, #0
 8004a26:	bd08      	pop	{r3, pc}

08004a28 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8004a28:	f011 0f80 	tst.w	r1, #128	; 0x80
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004a2c:	f8d0 2220 	ldr.w	r2, [r0, #544]	; 0x220
  
  if((ep_addr & 0x80) == 0x80)
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004a30:	bf18      	it	ne
 8004a32:	f001 037f 	andne.w	r3, r1, #127	; 0x7f
 8004a36:	f04f 001c 	mov.w	r0, #28
 8004a3a:	bf15      	itete	ne
 8004a3c:	fb00 2103 	mlane	r1, r0, r3, r2
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004a40:	fb00 2101 	mlaeq	r1, r0, r1, r2
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004a44:	f891 002a 	ldrbne.w	r0, [r1, #42]	; 0x2a
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004a48:	f891 00b6 	ldrbeq.w	r0, [r1, #182]	; 0xb6
  }
}
 8004a4c:	4770      	bx	lr

08004a4e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8004a4e:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004a50:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004a54:	f7fe fbd6 	bl	8003204 <HAL_PCD_SetAddress>
  return USBD_OK; 
}
 8004a58:	2000      	movs	r0, #0
 8004a5a:	bd08      	pop	{r3, pc}

08004a5c <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint16_t size)
{
 8004a5c:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004a5e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004a62:	f7fe fedb 	bl	800381c <HAL_PCD_EP_Transmit>
  return USBD_OK;
}
 8004a66:	2000      	movs	r0, #0
 8004a68:	bd08      	pop	{r3, pc}

08004a6a <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint16_t size)
{
 8004a6a:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004a6c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004a70:	f7fe fe52 	bl	8003718 <HAL_PCD_EP_Receive>
  return USBD_OK;
}
 8004a74:	2000      	movs	r0, #0
 8004a76:	bd08      	pop	{r3, pc}

08004a78 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004a78:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 8004a7a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004a7e:	f7fe fec5 	bl	800380c <HAL_PCD_EP_GetRxCount>
}
 8004a82:	bd08      	pop	{r3, pc}

08004a84 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[MAX_STATIC_ALLOC_SIZE];
  return mem;
}
 8004a84:	4800      	ldr	r0, [pc, #0]	; (8004a88 <USBD_static_malloc+0x4>)
 8004a86:	4770      	bx	lr
 8004a88:	20000ba8 	.word	0x20000ba8

08004a8c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  *p pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8004a8c:	4770      	bx	lr
	...

08004a90 <USBD_VCP_DeviceDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(hUSBDDeviceDesc);
 8004a90:	2312      	movs	r3, #18
 8004a92:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)hUSBDDeviceDesc;
}
 8004a94:	4800      	ldr	r0, [pc, #0]	; (8004a98 <USBD_VCP_DeviceDescriptor+0x8>)
 8004a96:	4770      	bx	lr
 8004a98:	08018ec9 	.word	0x08018ec9

08004a9c <USBD_VCP_LangIDStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);  
 8004a9c:	2304      	movs	r3, #4
 8004a9e:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_LangIDDesc;
}
 8004aa0:	4800      	ldr	r0, [pc, #0]	; (8004aa4 <USBD_VCP_LangIDStrDescriptor+0x8>)
 8004aa2:	4770      	bx	lr
 8004aa4:	08018e78 	.word	0x08018e78

08004aa8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 8004aa8:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8004aaa:	2400      	movs	r4, #0
 8004aac:	b2e3      	uxtb	r3, r4
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d20d      	bcs.n	8004ace <IntToUnicode+0x26>
  {
    if( ((value >> 28)) < 0xA )
 8004ab2:	0f03      	lsrs	r3, r0, #28
 8004ab4:	2b09      	cmp	r3, #9
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8004ab6:	bf94      	ite	ls
 8004ab8:	3330      	addls	r3, #48	; 0x30
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8004aba:	3337      	addhi	r3, #55	; 0x37
 8004abc:	f801 3014 	strb.w	r3, [r1, r4, lsl #1]
 8004ac0:	eb01 0344 	add.w	r3, r1, r4, lsl #1
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8004ac4:	2500      	movs	r5, #0
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 8004ac6:	0100      	lsls	r0, r0, #4
    
    pbuf[ 2* idx + 1] = 0;
 8004ac8:	705d      	strb	r5, [r3, #1]
 8004aca:	3401      	adds	r4, #1
 8004acc:	e7ee      	b.n	8004aac <IntToUnicode+0x4>
  }
}
 8004ace:	bd30      	pop	{r4, r5, pc}

08004ad0 <USBD_VCP_SerialStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = USB_SIZ_STRING_SERIAL;
 8004ad0:	231a      	movs	r3, #26
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004ad2:	b510      	push	{r4, lr}
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;
  
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 8004ad4:	4a09      	ldr	r2, [pc, #36]	; (8004afc <USBD_VCP_SerialStrDescriptor+0x2c>)
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = USB_SIZ_STRING_SERIAL;
 8004ad6:	800b      	strh	r3, [r1, #0]
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;
  
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 8004ad8:	4b09      	ldr	r3, [pc, #36]	; (8004b00 <USBD_VCP_SerialStrDescriptor+0x30>)
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
  
  deviceserial0 += deviceserial2;
 8004ada:	6850      	ldr	r0, [r2, #4]
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;
  
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 8004adc:	681b      	ldr	r3, [r3, #0]
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 8004ade:	6814      	ldr	r4, [r2, #0]
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
  
  deviceserial0 += deviceserial2;
  
  if (deviceserial0 != 0)
 8004ae0:	1818      	adds	r0, r3, r0
 8004ae2:	d008      	beq.n	8004af6 <USBD_VCP_SerialStrDescriptor+0x26>
  {
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 8004ae4:	4907      	ldr	r1, [pc, #28]	; (8004b04 <USBD_VCP_SerialStrDescriptor+0x34>)
 8004ae6:	2208      	movs	r2, #8
 8004ae8:	f7ff ffde 	bl	8004aa8 <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 8004aec:	4620      	mov	r0, r4
 8004aee:	4906      	ldr	r1, [pc, #24]	; (8004b08 <USBD_VCP_SerialStrDescriptor+0x38>)
 8004af0:	2204      	movs	r2, #4
 8004af2:	f7ff ffd9 	bl	8004aa8 <IntToUnicode>
  
  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
  
  return USBD_StringSerial;
}
 8004af6:	4805      	ldr	r0, [pc, #20]	; (8004b0c <USBD_VCP_SerialStrDescriptor+0x3c>)
 8004af8:	bd10      	pop	{r4, pc}
 8004afa:	bf00      	nop
 8004afc:	1ffff7b0 	.word	0x1ffff7b0
 8004b00:	1ffff7ac 	.word	0x1ffff7ac
 8004b04:	20000146 	.word	0x20000146
 8004b08:	20000156 	.word	0x20000156
 8004b0c:	20000144 	.word	0x20000144

08004b10 <USBD_VCP_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004b10:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 8004b12:	4c04      	ldr	r4, [pc, #16]	; (8004b24 <USBD_VCP_ProductStrDescriptor+0x14>)
 8004b14:	4804      	ldr	r0, [pc, #16]	; (8004b28 <USBD_VCP_ProductStrDescriptor+0x18>)
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004b16:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 8004b18:	4621      	mov	r1, r4
 8004b1a:	f7ff fd2a 	bl	8004572 <USBD_GetString>
  return USBD_StrDesc;
}
 8004b1e:	4620      	mov	r0, r4
 8004b20:	bd10      	pop	{r4, pc}
 8004b22:	bf00      	nop
 8004b24:	20001258 	.word	0x20001258
 8004b28:	08018e7c 	.word	0x08018e7c

08004b2c <USBD_VCP_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004b2c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004b2e:	4c04      	ldr	r4, [pc, #16]	; (8004b40 <USBD_VCP_ManufacturerStrDescriptor+0x14>)
 8004b30:	4804      	ldr	r0, [pc, #16]	; (8004b44 <USBD_VCP_ManufacturerStrDescriptor+0x18>)
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004b32:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004b34:	4621      	mov	r1, r4
 8004b36:	f7ff fd1c 	bl	8004572 <USBD_GetString>
  return USBD_StrDesc;
}
 8004b3a:	4620      	mov	r0, r4
 8004b3c:	bd10      	pop	{r4, pc}
 8004b3e:	bf00      	nop
 8004b40:	20001258 	.word	0x20001258
 8004b44:	08018e9d 	.word	0x08018e9d

08004b48 <USBD_VCP_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004b48:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 8004b4a:	4c04      	ldr	r4, [pc, #16]	; (8004b5c <USBD_VCP_ConfigStrDescriptor+0x14>)
 8004b4c:	4804      	ldr	r0, [pc, #16]	; (8004b60 <USBD_VCP_ConfigStrDescriptor+0x18>)
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004b4e:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 8004b50:	4621      	mov	r1, r4
 8004b52:	f7ff fd0e 	bl	8004572 <USBD_GetString>
  return USBD_StrDesc;  
}
 8004b56:	4620      	mov	r0, r4
 8004b58:	bd10      	pop	{r4, pc}
 8004b5a:	bf00      	nop
 8004b5c:	20001258 	.word	0x20001258
 8004b60:	08018eb0 	.word	0x08018eb0

08004b64 <USBD_VCP_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004b64:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8004b66:	4c04      	ldr	r4, [pc, #16]	; (8004b78 <USBD_VCP_InterfaceStrDescriptor+0x14>)
 8004b68:	4804      	ldr	r0, [pc, #16]	; (8004b7c <USBD_VCP_InterfaceStrDescriptor+0x18>)
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004b6a:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8004b6c:	4621      	mov	r1, r4
 8004b6e:	f7ff fd00 	bl	8004572 <USBD_GetString>
  return USBD_StrDesc;  
}
 8004b72:	4620      	mov	r0, r4
 8004b74:	bd10      	pop	{r4, pc}
 8004b76:	bf00      	nop
 8004b78:	20001258 	.word	0x20001258
 8004b7c:	08018ebb 	.word	0x08018ebb

08004b80 <CDC_Itf_DeInit>:
  */
static int8_t CDC_Itf_DeInit(void)
{

  return (USBD_OK);
}
 8004b80:	2000      	movs	r0, #0
 8004b82:	4770      	bx	lr

08004b84 <CDC_Itf_Receive>:
  * @param  Buf: Buffer of data to be transmitted
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the opeartion: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Receive(uint8_t* Buf, uint32_t *Len)
{
 8004b84:	b508      	push	{r3, lr}
 8004b86:	460b      	mov	r3, r1
 8004b88:	4602      	mov	r2, r0
  /* Write data into Terminal Rx buffer */
  TerminalInputBufferWrite(INDEX_USB, (char *)Buf, *Len);
 8004b8a:	4611      	mov	r1, r2
 8004b8c:	2000      	movs	r0, #0
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	f7fd f9be 	bl	8001f10 <TerminalInputBufferWrite>
  USBD_CDC_ReceivePacket(&hUSBDDevice);  /* Reset for next packet */
 8004b94:	4802      	ldr	r0, [pc, #8]	; (8004ba0 <CDC_Itf_Receive+0x1c>)
 8004b96:	f7ff fe55 	bl	8004844 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
}
 8004b9a:	2000      	movs	r0, #0
 8004b9c:	bd08      	pop	{r3, pc}
 8004b9e:	bf00      	nop
 8004ba0:	20000eb8 	.word	0x20000eb8

08004ba4 <CDC_Itf_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the opeartion: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Init(void)
{
 8004ba4:	b508      	push	{r3, lr}
  //  USBD_CDC_SetTxBuffer(&hUSBDDevice, NULL, 0);
  USBD_CDC_SetRxBuffer(&hUSBDDevice, UserRxBuffer);
 8004ba6:	4903      	ldr	r1, [pc, #12]	; (8004bb4 <CDC_Itf_Init+0x10>)
 8004ba8:	4803      	ldr	r0, [pc, #12]	; (8004bb8 <CDC_Itf_Init+0x14>)
 8004baa:	f7ff fe2e 	bl	800480a <USBD_CDC_SetRxBuffer>


  return (USBD_OK);
}
 8004bae:	2000      	movs	r0, #0
 8004bb0:	bd08      	pop	{r3, pc}
 8004bb2:	bf00      	nop
 8004bb4:	200013c8 	.word	0x200013c8
 8004bb8:	20000eb8 	.word	0x20000eb8

08004bbc <CDC_Itf_Control>:
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the opeartion: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Control (uint8_t cmd, uint8_t* pbuf, uint16_t length)
{ 
  switch (cmd)
 8004bbc:	2820      	cmp	r0, #32
 8004bbe:	d012      	beq.n	8004be6 <CDC_Itf_Control+0x2a>
 8004bc0:	2821      	cmp	r0, #33	; 0x21
 8004bc2:	d122      	bne.n	8004c0a <CDC_Itf_Control+0x4e>
    /* Set the new configuration */

    break;

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8004bc4:	4b12      	ldr	r3, [pc, #72]	; (8004c10 <CDC_Itf_Control+0x54>)
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	700a      	strb	r2, [r1, #0]
    pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	0a12      	lsrs	r2, r2, #8
 8004bce:	704a      	strb	r2, [r1, #1]
    pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8004bd0:	885a      	ldrh	r2, [r3, #2]
 8004bd2:	708a      	strb	r2, [r1, #2]
    pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8004bd4:	78da      	ldrb	r2, [r3, #3]
 8004bd6:	70ca      	strb	r2, [r1, #3]
    pbuf[4] = LineCoding.format;
 8004bd8:	791a      	ldrb	r2, [r3, #4]
 8004bda:	710a      	strb	r2, [r1, #4]
    pbuf[5] = LineCoding.paritytype;
 8004bdc:	795a      	ldrb	r2, [r3, #5]
 8004bde:	714a      	strb	r2, [r1, #5]
    pbuf[6] = LineCoding.datatype;     
 8004be0:	799b      	ldrb	r3, [r3, #6]
 8004be2:	718b      	strb	r3, [r1, #6]
    
    /* Add your code here */
    break;
 8004be4:	e011      	b.n	8004c0a <CDC_Itf_Control+0x4e>
    /* Add your code here */
    break;

  case CDC_SET_LINE_CODING:
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 8004be6:	788b      	ldrb	r3, [r1, #2]
  case CDC_CLEAR_COMM_FEATURE:
    /* Add your code here */
    break;

  case CDC_SET_LINE_CODING:
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8004be8:	784a      	ldrb	r2, [r1, #1]
 8004bea:	4809      	ldr	r0, [pc, #36]	; (8004c10 <CDC_Itf_Control+0x54>)
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 8004bec:	041b      	lsls	r3, r3, #16
 8004bee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  case CDC_CLEAR_COMM_FEATURE:
    /* Add your code here */
    break;

  case CDC_SET_LINE_CODING:
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8004bf2:	780a      	ldrb	r2, [r1, #0]
 8004bf4:	4313      	orrs	r3, r2
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 8004bf6:	78ca      	ldrb	r2, [r1, #3]
 8004bf8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  case CDC_CLEAR_COMM_FEATURE:
    /* Add your code here */
    break;

  case CDC_SET_LINE_CODING:
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8004bfc:	6003      	str	r3, [r0, #0]
                            (pbuf[2] << 16) | (pbuf[3] << 24));
    LineCoding.format     = pbuf[4];
 8004bfe:	790b      	ldrb	r3, [r1, #4]
 8004c00:	7103      	strb	r3, [r0, #4]
    LineCoding.paritytype = pbuf[5];
 8004c02:	794b      	ldrb	r3, [r1, #5]
 8004c04:	7143      	strb	r3, [r0, #5]
    LineCoding.datatype   = pbuf[6];
 8004c06:	798b      	ldrb	r3, [r1, #6]
 8004c08:	7183      	strb	r3, [r0, #6]
  default:
    break;
  }
  
  return (USBD_OK);
}
 8004c0a:	2000      	movs	r0, #0
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	20000160 	.word	0x20000160

08004c14 <BSP_LED_Init>:
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8004c14:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8004c16:	4604      	mov	r4, r0
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8004c18:	b086      	sub	sp, #24
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8004c1a:	b168      	cbz	r0, 8004c38 <BSP_LED_Init+0x24>
 8004c1c:	2801      	cmp	r0, #1
 8004c1e:	d00b      	beq.n	8004c38 <BSP_LED_Init+0x24>
 8004c20:	2802      	cmp	r0, #2
 8004c22:	d009      	beq.n	8004c38 <BSP_LED_Init+0x24>
 8004c24:	2803      	cmp	r0, #3
 8004c26:	d007      	beq.n	8004c38 <BSP_LED_Init+0x24>
 8004c28:	2804      	cmp	r0, #4
 8004c2a:	d005      	beq.n	8004c38 <BSP_LED_Init+0x24>
 8004c2c:	2805      	cmp	r0, #5
 8004c2e:	d003      	beq.n	8004c38 <BSP_LED_Init+0x24>
 8004c30:	2806      	cmp	r0, #6
 8004c32:	d001      	beq.n	8004c38 <BSP_LED_Init+0x24>
 8004c34:	2807      	cmp	r0, #7
 8004c36:	d104      	bne.n	8004c42 <BSP_LED_Init+0x2e>
 8004c38:	4a0d      	ldr	r2, [pc, #52]	; (8004c70 <BSP_LED_Init+0x5c>)
 8004c3a:	6953      	ldr	r3, [r2, #20]
 8004c3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c40:	6153      	str	r3, [r2, #20]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8004c42:	4b0c      	ldr	r3, [pc, #48]	; (8004c74 <BSP_LED_Init+0x60>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8004c44:	4e0c      	ldr	r6, [pc, #48]	; (8004c78 <BSP_LED_Init+0x64>)
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8004c46:	f833 5014 	ldrh.w	r5, [r3, r4, lsl #1]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8004c4a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8004c4e:	9501      	str	r5, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c50:	2301      	movs	r3, #1
 8004c52:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c54:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8004c56:	a901      	add	r1, sp, #4

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8004c5c:	f7fe f9ac 	bl	8002fb8 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8004c60:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004c64:	4629      	mov	r1, r5
 8004c66:	2200      	movs	r2, #0
 8004c68:	f7fe fa70 	bl	800314c <HAL_GPIO_WritePin>
}
 8004c6c:	b006      	add	sp, #24
 8004c6e:	bd70      	pop	{r4, r5, r6, pc}
 8004c70:	40021000 	.word	0x40021000
 8004c74:	08018edc 	.word	0x08018edc
 8004c78:	2000017c 	.word	0x2000017c

08004c7c <BSP_LED_On>:
  *     @arg LED10
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 8004c7c:	4a04      	ldr	r2, [pc, #16]	; (8004c90 <BSP_LED_On+0x14>)
  *     @arg LED9
  *     @arg LED10
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8004c7e:	4603      	mov	r3, r0
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 8004c80:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8004c84:	4a03      	ldr	r2, [pc, #12]	; (8004c94 <BSP_LED_On+0x18>)
 8004c86:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f7fe ba5e 	b.w	800314c <HAL_GPIO_WritePin>
 8004c90:	2000017c 	.word	0x2000017c
 8004c94:	08018edc 	.word	0x08018edc

08004c98 <BSP_LED_Off>:
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8004c98:	4a04      	ldr	r2, [pc, #16]	; (8004cac <BSP_LED_Off+0x14>)
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8004c9a:	4603      	mov	r3, r0
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8004c9c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8004ca0:	4a03      	ldr	r2, [pc, #12]	; (8004cb0 <BSP_LED_Off+0x18>)
 8004ca2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f7fe ba50 	b.w	800314c <HAL_GPIO_WritePin>
 8004cac:	2000017c 	.word	0x2000017c
 8004cb0:	08018edc 	.word	0x08018edc

08004cb4 <BSP_LED_Toggle>:
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8004cb4:	4a04      	ldr	r2, [pc, #16]	; (8004cc8 <BSP_LED_Toggle+0x14>)
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8004cb6:	4603      	mov	r3, r0
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8004cb8:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8004cbc:	4a03      	ldr	r2, [pc, #12]	; (8004ccc <BSP_LED_Toggle+0x18>)
 8004cbe:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004cc2:	f7fe ba48 	b.w	8003156 <HAL_GPIO_TogglePin>
 8004cc6:	bf00      	nop
 8004cc8:	2000017c 	.word	0x2000017c
 8004ccc:	08018edc 	.word	0x08018edc

08004cd0 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8004cd0:	b510      	push	{r4, lr}
 8004cd2:	4b19      	ldr	r3, [pc, #100]	; (8004d38 <BSP_PB_Init+0x68>)
 8004cd4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8004cd6:	b918      	cbnz	r0, 8004ce0 <BSP_PB_Init+0x10>
 8004cd8:	695a      	ldr	r2, [r3, #20]
 8004cda:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004cde:	615a      	str	r2, [r3, #20]
  __SYSCFG_CLK_ENABLE();
 8004ce0:	699a      	ldr	r2, [r3, #24]
 8004ce2:	f042 0201 	orr.w	r2, r2, #1
 8004ce6:	619a      	str	r2, [r3, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8004ce8:	b969      	cbnz	r1, 8004d06 <BSP_PB_Init+0x36>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8004cea:	2301      	movs	r3, #1
 8004cec:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004cee:	2302      	movs	r3, #2
 8004cf0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8004cf6:	4b11      	ldr	r3, [pc, #68]	; (8004d3c <BSP_PB_Init+0x6c>)

  if (ButtonMode == BUTTON_MODE_GPIO)
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004cf8:	9102      	str	r1, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8004cfa:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8004cfe:	a901      	add	r1, sp, #4
 8004d00:	f7fe f95a 	bl	8002fb8 <HAL_GPIO_Init>
 8004d04:	e016      	b.n	8004d34 <BSP_PB_Init+0x64>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 8004d06:	2901      	cmp	r1, #1
 8004d08:	d114      	bne.n	8004d34 <BSP_PB_Init+0x64>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 8004d0e:	4b0c      	ldr	r3, [pc, #48]	; (8004d40 <BSP_PB_Init+0x70>)
 8004d10:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8004d12:	4b0a      	ldr	r3, [pc, #40]	; (8004d3c <BSP_PB_Init+0x6c>)
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8004d14:	9101      	str	r1, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8004d16:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

  if (ButtonMode == BUTTON_MODE_EXTI)
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d1a:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8004d1c:	a901      	add	r1, sp, #4

  if (ButtonMode == BUTTON_MODE_EXTI)
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d1e:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8004d20:	f7fe f94a 	bl	8002fb8 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8004d24:	2006      	movs	r0, #6
 8004d26:	210f      	movs	r1, #15
 8004d28:	4622      	mov	r2, r4
 8004d2a:	f7fe f8f3 	bl	8002f14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8004d2e:	2006      	movs	r0, #6
 8004d30:	f7fe f920 	bl	8002f74 <HAL_NVIC_EnableIRQ>
  }
}
 8004d34:	b006      	add	sp, #24
 8004d36:	bd10      	pop	{r4, pc}
 8004d38:	40021000 	.word	0x40021000
 8004d3c:	20000178 	.word	0x20000178
 8004d40:	10110000 	.word	0x10110000

08004d44 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8004d44:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8004d46:	4b03      	ldr	r3, [pc, #12]	; (8004d54 <BSP_PB_GetState+0x10>)
 8004d48:	2101      	movs	r1, #1
 8004d4a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8004d4e:	f7fe f9f7 	bl	8003140 <HAL_GPIO_ReadPin>
}
 8004d52:	bd08      	pop	{r3, pc}
 8004d54:	20000178 	.word	0x20000178

08004d58 <BSP_ACCELERO_GetXYZ>:
  *                 pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
* @retval None
*/
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
  if(AccelerometerDrv->GetXYZ!= NULL)
 8004d58:	4b02      	ldr	r3, [pc, #8]	; (8004d64 <BSP_ACCELERO_GetXYZ+0xc>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5e:	b103      	cbz	r3, 8004d62 <BSP_ACCELERO_GetXYZ+0xa>
  {   
    AccelerometerDrv->GetXYZ(pDataXYZ);
 8004d60:	4718      	bx	r3
 8004d62:	4770      	bx	lr
 8004d64:	20000dd8 	.word	0x20000dd8

08004d68 <BSP_GYRO_GetXYZ>:
  * @param pfData: pointer on floating array         
  * @retval None
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
  if(GyroscopeDrv->GetXYZ!= NULL)
 8004d68:	4b02      	ldr	r3, [pc, #8]	; (8004d74 <BSP_GYRO_GetXYZ+0xc>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6e:	b103      	cbz	r3, 8004d72 <BSP_GYRO_GetXYZ+0xa>
  {
	GyroscopeDrv->GetXYZ(pfData);
 8004d70:	4718      	bx	r3
 8004d72:	4770      	bx	lr
 8004d74:	20000ddc 	.word	0x20000ddc

08004d78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004d78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004db0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004d7c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004d7e:	e003      	b.n	8004d88 <LoopCopyDataInit>

08004d80 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004d80:	4b0c      	ldr	r3, [pc, #48]	; (8004db4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004d82:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004d84:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004d86:	3104      	adds	r1, #4

08004d88 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004d88:	480b      	ldr	r0, [pc, #44]	; (8004db8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004d8a:	4b0c      	ldr	r3, [pc, #48]	; (8004dbc <LoopForever+0xe>)
	adds	r2, r0, r1
 8004d8c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004d8e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004d90:	d3f6      	bcc.n	8004d80 <CopyDataInit>
	ldr	r2, =_sbss
 8004d92:	4a0b      	ldr	r2, [pc, #44]	; (8004dc0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004d94:	e002      	b.n	8004d9c <LoopFillZerobss>

08004d96 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004d96:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004d98:	f842 3b04 	str.w	r3, [r2], #4

08004d9c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004d9c:	4b09      	ldr	r3, [pc, #36]	; (8004dc4 <LoopForever+0x16>)
	cmp	r2, r3
 8004d9e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004da0:	d3f9      	bcc.n	8004d96 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004da2:	f7fd fb8d 	bl	80024c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004da6:	f000 f817 	bl	8004dd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004daa:	f7fc fad5 	bl	8001358 <main>

08004dae <LoopForever>:

LoopForever:
    b LoopForever
 8004dae:	e7fe      	b.n	8004dae <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004db0:	20008000 	.word	0x20008000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8004db4:	0801918c 	.word	0x0801918c
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004db8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004dbc:	20000a3c 	.word	0x20000a3c
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8004dc0:	20000a3c 	.word	0x20000a3c
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8004dc4:	20001c04 	.word	0x20001c04

08004dc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004dc8:	e7fe      	b.n	8004dc8 <ADC1_2_IRQHandler>
	...

08004dcc <__errno>:
 8004dcc:	4b01      	ldr	r3, [pc, #4]	; (8004dd4 <__errno+0x8>)
 8004dce:	6818      	ldr	r0, [r3, #0]
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	200005c8 	.word	0x200005c8

08004dd8 <__libc_init_array>:
 8004dd8:	b570      	push	{r4, r5, r6, lr}
 8004dda:	4e0f      	ldr	r6, [pc, #60]	; (8004e18 <__libc_init_array+0x40>)
 8004ddc:	4d0f      	ldr	r5, [pc, #60]	; (8004e1c <__libc_init_array+0x44>)
 8004dde:	1b76      	subs	r6, r6, r5
 8004de0:	10b6      	asrs	r6, r6, #2
 8004de2:	bf18      	it	ne
 8004de4:	2400      	movne	r4, #0
 8004de6:	d005      	beq.n	8004df4 <__libc_init_array+0x1c>
 8004de8:	3401      	adds	r4, #1
 8004dea:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dee:	4798      	blx	r3
 8004df0:	42a6      	cmp	r6, r4
 8004df2:	d1f9      	bne.n	8004de8 <__libc_init_array+0x10>
 8004df4:	4e0a      	ldr	r6, [pc, #40]	; (8004e20 <__libc_init_array+0x48>)
 8004df6:	4d0b      	ldr	r5, [pc, #44]	; (8004e24 <__libc_init_array+0x4c>)
 8004df8:	1b76      	subs	r6, r6, r5
 8004dfa:	f004 fcf7 	bl	80097ec <_init>
 8004dfe:	10b6      	asrs	r6, r6, #2
 8004e00:	bf18      	it	ne
 8004e02:	2400      	movne	r4, #0
 8004e04:	d006      	beq.n	8004e14 <__libc_init_array+0x3c>
 8004e06:	3401      	adds	r4, #1
 8004e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e0c:	4798      	blx	r3
 8004e0e:	42a6      	cmp	r6, r4
 8004e10:	d1f9      	bne.n	8004e06 <__libc_init_array+0x2e>
 8004e12:	bd70      	pop	{r4, r5, r6, pc}
 8004e14:	bd70      	pop	{r4, r5, r6, pc}
 8004e16:	bf00      	nop
 8004e18:	08019180 	.word	0x08019180
 8004e1c:	08019180 	.word	0x08019180
 8004e20:	08019188 	.word	0x08019188
 8004e24:	08019180 	.word	0x08019180

08004e28 <memset>:
 8004e28:	b470      	push	{r4, r5, r6}
 8004e2a:	0784      	lsls	r4, r0, #30
 8004e2c:	d046      	beq.n	8004ebc <memset+0x94>
 8004e2e:	1e54      	subs	r4, r2, #1
 8004e30:	2a00      	cmp	r2, #0
 8004e32:	d041      	beq.n	8004eb8 <memset+0x90>
 8004e34:	b2cd      	uxtb	r5, r1
 8004e36:	4603      	mov	r3, r0
 8004e38:	e002      	b.n	8004e40 <memset+0x18>
 8004e3a:	1e62      	subs	r2, r4, #1
 8004e3c:	b3e4      	cbz	r4, 8004eb8 <memset+0x90>
 8004e3e:	4614      	mov	r4, r2
 8004e40:	f803 5b01 	strb.w	r5, [r3], #1
 8004e44:	079a      	lsls	r2, r3, #30
 8004e46:	d1f8      	bne.n	8004e3a <memset+0x12>
 8004e48:	2c03      	cmp	r4, #3
 8004e4a:	d92e      	bls.n	8004eaa <memset+0x82>
 8004e4c:	b2cd      	uxtb	r5, r1
 8004e4e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8004e52:	2c0f      	cmp	r4, #15
 8004e54:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8004e58:	d919      	bls.n	8004e8e <memset+0x66>
 8004e5a:	f103 0210 	add.w	r2, r3, #16
 8004e5e:	4626      	mov	r6, r4
 8004e60:	3e10      	subs	r6, #16
 8004e62:	2e0f      	cmp	r6, #15
 8004e64:	f842 5c10 	str.w	r5, [r2, #-16]
 8004e68:	f842 5c0c 	str.w	r5, [r2, #-12]
 8004e6c:	f842 5c08 	str.w	r5, [r2, #-8]
 8004e70:	f842 5c04 	str.w	r5, [r2, #-4]
 8004e74:	f102 0210 	add.w	r2, r2, #16
 8004e78:	d8f2      	bhi.n	8004e60 <memset+0x38>
 8004e7a:	f1a4 0210 	sub.w	r2, r4, #16
 8004e7e:	f022 020f 	bic.w	r2, r2, #15
 8004e82:	f004 040f 	and.w	r4, r4, #15
 8004e86:	3210      	adds	r2, #16
 8004e88:	2c03      	cmp	r4, #3
 8004e8a:	4413      	add	r3, r2
 8004e8c:	d90d      	bls.n	8004eaa <memset+0x82>
 8004e8e:	461e      	mov	r6, r3
 8004e90:	4622      	mov	r2, r4
 8004e92:	3a04      	subs	r2, #4
 8004e94:	2a03      	cmp	r2, #3
 8004e96:	f846 5b04 	str.w	r5, [r6], #4
 8004e9a:	d8fa      	bhi.n	8004e92 <memset+0x6a>
 8004e9c:	1f22      	subs	r2, r4, #4
 8004e9e:	f022 0203 	bic.w	r2, r2, #3
 8004ea2:	3204      	adds	r2, #4
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f004 0403 	and.w	r4, r4, #3
 8004eaa:	b12c      	cbz	r4, 8004eb8 <memset+0x90>
 8004eac:	b2c9      	uxtb	r1, r1
 8004eae:	441c      	add	r4, r3
 8004eb0:	f803 1b01 	strb.w	r1, [r3], #1
 8004eb4:	42a3      	cmp	r3, r4
 8004eb6:	d1fb      	bne.n	8004eb0 <memset+0x88>
 8004eb8:	bc70      	pop	{r4, r5, r6}
 8004eba:	4770      	bx	lr
 8004ebc:	4614      	mov	r4, r2
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	e7c2      	b.n	8004e48 <memset+0x20>
 8004ec2:	bf00      	nop

08004ec4 <printf>:
 8004ec4:	b40f      	push	{r0, r1, r2, r3}
 8004ec6:	b500      	push	{lr}
 8004ec8:	4907      	ldr	r1, [pc, #28]	; (8004ee8 <printf+0x24>)
 8004eca:	b083      	sub	sp, #12
 8004ecc:	ab04      	add	r3, sp, #16
 8004ece:	6808      	ldr	r0, [r1, #0]
 8004ed0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ed4:	6881      	ldr	r1, [r0, #8]
 8004ed6:	9301      	str	r3, [sp, #4]
 8004ed8:	f000 fa4e 	bl	8005378 <_vfprintf_r>
 8004edc:	b003      	add	sp, #12
 8004ede:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ee2:	b004      	add	sp, #16
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	200005c8 	.word	0x200005c8

08004eec <putchar>:
 8004eec:	4b03      	ldr	r3, [pc, #12]	; (8004efc <putchar+0x10>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4601      	mov	r1, r0
 8004ef2:	689a      	ldr	r2, [r3, #8]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f003 bfe5 	b.w	8008ec4 <_putc_r>
 8004efa:	bf00      	nop
 8004efc:	200005c8 	.word	0x200005c8

08004f00 <_puts_r>:
 8004f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f02:	4604      	mov	r4, r0
 8004f04:	b089      	sub	sp, #36	; 0x24
 8004f06:	4608      	mov	r0, r1
 8004f08:	460d      	mov	r5, r1
 8004f0a:	f000 f92b 	bl	8005164 <strlen>
 8004f0e:	68a3      	ldr	r3, [r4, #8]
 8004f10:	4f11      	ldr	r7, [pc, #68]	; (8004f58 <_puts_r+0x58>)
 8004f12:	899a      	ldrh	r2, [r3, #12]
 8004f14:	9504      	str	r5, [sp, #16]
 8004f16:	2102      	movs	r1, #2
 8004f18:	f100 0e01 	add.w	lr, r0, #1
 8004f1c:	2601      	movs	r6, #1
 8004f1e:	ad04      	add	r5, sp, #16
 8004f20:	9102      	str	r1, [sp, #8]
 8004f22:	0491      	lsls	r1, r2, #18
 8004f24:	9005      	str	r0, [sp, #20]
 8004f26:	f8cd e00c 	str.w	lr, [sp, #12]
 8004f2a:	9706      	str	r7, [sp, #24]
 8004f2c:	9607      	str	r6, [sp, #28]
 8004f2e:	9501      	str	r5, [sp, #4]
 8004f30:	d406      	bmi.n	8004f40 <_puts_r+0x40>
 8004f32:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8004f34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f38:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8004f3c:	819a      	strh	r2, [r3, #12]
 8004f3e:	6659      	str	r1, [r3, #100]	; 0x64
 8004f40:	4620      	mov	r0, r4
 8004f42:	4619      	mov	r1, r3
 8004f44:	aa01      	add	r2, sp, #4
 8004f46:	f002 ff47 	bl	8007dd8 <__sfvwrite_r>
 8004f4a:	2800      	cmp	r0, #0
 8004f4c:	bf14      	ite	ne
 8004f4e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8004f52:	200a      	moveq	r0, #10
 8004f54:	b009      	add	sp, #36	; 0x24
 8004f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f58:	08018ff8 	.word	0x08018ff8

08004f5c <puts>:
 8004f5c:	4b02      	ldr	r3, [pc, #8]	; (8004f68 <puts+0xc>)
 8004f5e:	4601      	mov	r1, r0
 8004f60:	6818      	ldr	r0, [r3, #0]
 8004f62:	f7ff bfcd 	b.w	8004f00 <_puts_r>
 8004f66:	bf00      	nop
 8004f68:	200005c8 	.word	0x200005c8

08004f6c <setvbuf>:
 8004f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f70:	4c3a      	ldr	r4, [pc, #232]	; (800505c <setvbuf+0xf0>)
 8004f72:	6826      	ldr	r6, [r4, #0]
 8004f74:	460d      	mov	r5, r1
 8004f76:	4604      	mov	r4, r0
 8004f78:	4690      	mov	r8, r2
 8004f7a:	461f      	mov	r7, r3
 8004f7c:	b116      	cbz	r6, 8004f84 <setvbuf+0x18>
 8004f7e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d03c      	beq.n	8004ffe <setvbuf+0x92>
 8004f84:	f1b8 0f02 	cmp.w	r8, #2
 8004f88:	d82f      	bhi.n	8004fea <setvbuf+0x7e>
 8004f8a:	2f00      	cmp	r7, #0
 8004f8c:	db2d      	blt.n	8004fea <setvbuf+0x7e>
 8004f8e:	4621      	mov	r1, r4
 8004f90:	4630      	mov	r0, r6
 8004f92:	f002 fd47 	bl	8007a24 <_fflush_r>
 8004f96:	89a1      	ldrh	r1, [r4, #12]
 8004f98:	2300      	movs	r3, #0
 8004f9a:	6063      	str	r3, [r4, #4]
 8004f9c:	61a3      	str	r3, [r4, #24]
 8004f9e:	060b      	lsls	r3, r1, #24
 8004fa0:	d427      	bmi.n	8004ff2 <setvbuf+0x86>
 8004fa2:	f021 0183 	bic.w	r1, r1, #131	; 0x83
 8004fa6:	b289      	uxth	r1, r1
 8004fa8:	f1b8 0f02 	cmp.w	r8, #2
 8004fac:	81a1      	strh	r1, [r4, #12]
 8004fae:	d02a      	beq.n	8005006 <setvbuf+0x9a>
 8004fb0:	2d00      	cmp	r5, #0
 8004fb2:	d036      	beq.n	8005022 <setvbuf+0xb6>
 8004fb4:	f1b8 0f01 	cmp.w	r8, #1
 8004fb8:	d011      	beq.n	8004fde <setvbuf+0x72>
 8004fba:	b289      	uxth	r1, r1
 8004fbc:	f001 0008 	and.w	r0, r1, #8
 8004fc0:	4b27      	ldr	r3, [pc, #156]	; (8005060 <setvbuf+0xf4>)
 8004fc2:	63f3      	str	r3, [r6, #60]	; 0x3c
 8004fc4:	b280      	uxth	r0, r0
 8004fc6:	6025      	str	r5, [r4, #0]
 8004fc8:	6125      	str	r5, [r4, #16]
 8004fca:	6167      	str	r7, [r4, #20]
 8004fcc:	b178      	cbz	r0, 8004fee <setvbuf+0x82>
 8004fce:	f011 0f03 	tst.w	r1, #3
 8004fd2:	bf18      	it	ne
 8004fd4:	2700      	movne	r7, #0
 8004fd6:	60a7      	str	r7, [r4, #8]
 8004fd8:	2000      	movs	r0, #0
 8004fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fde:	f041 0101 	orr.w	r1, r1, #1
 8004fe2:	427b      	negs	r3, r7
 8004fe4:	81a1      	strh	r1, [r4, #12]
 8004fe6:	61a3      	str	r3, [r4, #24]
 8004fe8:	e7e7      	b.n	8004fba <setvbuf+0x4e>
 8004fea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ff2:	6921      	ldr	r1, [r4, #16]
 8004ff4:	4630      	mov	r0, r6
 8004ff6:	f002 fe17 	bl	8007c28 <_free_r>
 8004ffa:	89a1      	ldrh	r1, [r4, #12]
 8004ffc:	e7d1      	b.n	8004fa2 <setvbuf+0x36>
 8004ffe:	4630      	mov	r0, r6
 8005000:	f002 fda4 	bl	8007b4c <__sinit>
 8005004:	e7be      	b.n	8004f84 <setvbuf+0x18>
 8005006:	2000      	movs	r0, #0
 8005008:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800500c:	f041 0102 	orr.w	r1, r1, #2
 8005010:	2500      	movs	r5, #0
 8005012:	2201      	movs	r2, #1
 8005014:	81a1      	strh	r1, [r4, #12]
 8005016:	60a5      	str	r5, [r4, #8]
 8005018:	6023      	str	r3, [r4, #0]
 800501a:	6123      	str	r3, [r4, #16]
 800501c:	6162      	str	r2, [r4, #20]
 800501e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005022:	2f00      	cmp	r7, #0
 8005024:	bf08      	it	eq
 8005026:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 800502a:	4638      	mov	r0, r7
 800502c:	f003 f908 	bl	8008240 <malloc>
 8005030:	4605      	mov	r5, r0
 8005032:	b128      	cbz	r0, 8005040 <setvbuf+0xd4>
 8005034:	89a1      	ldrh	r1, [r4, #12]
 8005036:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800503a:	b289      	uxth	r1, r1
 800503c:	81a1      	strh	r1, [r4, #12]
 800503e:	e7b9      	b.n	8004fb4 <setvbuf+0x48>
 8005040:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005044:	f003 f8fc 	bl	8008240 <malloc>
 8005048:	4605      	mov	r5, r0
 800504a:	b918      	cbnz	r0, 8005054 <setvbuf+0xe8>
 800504c:	89a1      	ldrh	r1, [r4, #12]
 800504e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005052:	e7d9      	b.n	8005008 <setvbuf+0x9c>
 8005054:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8005058:	e7ec      	b.n	8005034 <setvbuf+0xc8>
 800505a:	bf00      	nop
 800505c:	200005c8 	.word	0x200005c8
 8005060:	08007a51 	.word	0x08007a51

08005064 <strcasecmp>:
 8005064:	4b0f      	ldr	r3, [pc, #60]	; (80050a4 <strcasecmp+0x40>)
 8005066:	b430      	push	{r4, r5}
 8005068:	681d      	ldr	r5, [r3, #0]
 800506a:	e002      	b.n	8005072 <strcasecmp+0xe>
 800506c:	1ad2      	subs	r2, r2, r3
 800506e:	d116      	bne.n	800509e <strcasecmp+0x3a>
 8005070:	b1ab      	cbz	r3, 800509e <strcasecmp+0x3a>
 8005072:	f810 4b01 	ldrb.w	r4, [r0], #1
 8005076:	192b      	adds	r3, r5, r4
 8005078:	4622      	mov	r2, r4
 800507a:	785b      	ldrb	r3, [r3, #1]
 800507c:	f003 0303 	and.w	r3, r3, #3
 8005080:	2b01      	cmp	r3, #1
 8005082:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005086:	bf08      	it	eq
 8005088:	f104 0220 	addeq.w	r2, r4, #32
 800508c:	18ec      	adds	r4, r5, r3
 800508e:	7864      	ldrb	r4, [r4, #1]
 8005090:	f004 0403 	and.w	r4, r4, #3
 8005094:	2c01      	cmp	r4, #1
 8005096:	d1e9      	bne.n	800506c <strcasecmp+0x8>
 8005098:	3320      	adds	r3, #32
 800509a:	1ad2      	subs	r2, r2, r3
 800509c:	d0e9      	beq.n	8005072 <strcasecmp+0xe>
 800509e:	4610      	mov	r0, r2
 80050a0:	bc30      	pop	{r4, r5}
 80050a2:	4770      	bx	lr
 80050a4:	2000019c 	.word	0x2000019c

080050a8 <strcpy>:
 80050a8:	ea80 0201 	eor.w	r2, r0, r1
 80050ac:	4684      	mov	ip, r0
 80050ae:	f012 0f03 	tst.w	r2, #3
 80050b2:	d14f      	bne.n	8005154 <strcpy+0xac>
 80050b4:	f011 0f03 	tst.w	r1, #3
 80050b8:	d132      	bne.n	8005120 <strcpy+0x78>
 80050ba:	f84d 4d04 	str.w	r4, [sp, #-4]!
 80050be:	f011 0f04 	tst.w	r1, #4
 80050c2:	f851 3b04 	ldr.w	r3, [r1], #4
 80050c6:	d00b      	beq.n	80050e0 <strcpy+0x38>
 80050c8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 80050cc:	439a      	bics	r2, r3
 80050ce:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80050d2:	bf04      	itt	eq
 80050d4:	f84c 3b04 	streq.w	r3, [ip], #4
 80050d8:	f851 3b04 	ldreq.w	r3, [r1], #4
 80050dc:	d116      	bne.n	800510c <strcpy+0x64>
 80050de:	bf00      	nop
 80050e0:	f851 4b04 	ldr.w	r4, [r1], #4
 80050e4:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 80050e8:	439a      	bics	r2, r3
 80050ea:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80050ee:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 80050f2:	d10b      	bne.n	800510c <strcpy+0x64>
 80050f4:	f84c 3b04 	str.w	r3, [ip], #4
 80050f8:	43a2      	bics	r2, r4
 80050fa:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80050fe:	bf04      	itt	eq
 8005100:	f851 3b04 	ldreq.w	r3, [r1], #4
 8005104:	f84c 4b04 	streq.w	r4, [ip], #4
 8005108:	d0ea      	beq.n	80050e0 <strcpy+0x38>
 800510a:	4623      	mov	r3, r4
 800510c:	f80c 3b01 	strb.w	r3, [ip], #1
 8005110:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005114:	ea4f 2333 	mov.w	r3, r3, ror #8
 8005118:	d1f8      	bne.n	800510c <strcpy+0x64>
 800511a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	f011 0f01 	tst.w	r1, #1
 8005124:	d006      	beq.n	8005134 <strcpy+0x8c>
 8005126:	f811 2b01 	ldrb.w	r2, [r1], #1
 800512a:	f80c 2b01 	strb.w	r2, [ip], #1
 800512e:	2a00      	cmp	r2, #0
 8005130:	bf08      	it	eq
 8005132:	4770      	bxeq	lr
 8005134:	f011 0f02 	tst.w	r1, #2
 8005138:	d0bf      	beq.n	80050ba <strcpy+0x12>
 800513a:	f831 2b02 	ldrh.w	r2, [r1], #2
 800513e:	f012 0fff 	tst.w	r2, #255	; 0xff
 8005142:	bf16      	itet	ne
 8005144:	f82c 2b02 	strhne.w	r2, [ip], #2
 8005148:	f88c 2000 	strbeq.w	r2, [ip]
 800514c:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 8005150:	d1b3      	bne.n	80050ba <strcpy+0x12>
 8005152:	4770      	bx	lr
 8005154:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005158:	f80c 2b01 	strb.w	r2, [ip], #1
 800515c:	2a00      	cmp	r2, #0
 800515e:	d1f9      	bne.n	8005154 <strcpy+0xac>
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop

08005164 <strlen>:
 8005164:	f020 0103 	bic.w	r1, r0, #3
 8005168:	f010 0003 	ands.w	r0, r0, #3
 800516c:	f1c0 0000 	rsb	r0, r0, #0
 8005170:	f851 3b04 	ldr.w	r3, [r1], #4
 8005174:	f100 0c04 	add.w	ip, r0, #4
 8005178:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800517c:	f06f 0200 	mvn.w	r2, #0
 8005180:	bf1c      	itt	ne
 8005182:	fa22 f20c 	lsrne.w	r2, r2, ip
 8005186:	4313      	orrne	r3, r2
 8005188:	f04f 0c01 	mov.w	ip, #1
 800518c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8005190:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8005194:	eba3 020c 	sub.w	r2, r3, ip
 8005198:	ea22 0203 	bic.w	r2, r2, r3
 800519c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 80051a0:	bf04      	itt	eq
 80051a2:	f851 3b04 	ldreq.w	r3, [r1], #4
 80051a6:	3004      	addeq	r0, #4
 80051a8:	d0f4      	beq.n	8005194 <strlen+0x30>
 80051aa:	f1c2 0100 	rsb	r1, r2, #0
 80051ae:	ea02 0201 	and.w	r2, r2, r1
 80051b2:	fab2 f282 	clz	r2, r2
 80051b6:	f1c2 021f 	rsb	r2, r2, #31
 80051ba:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80051be:	4770      	bx	lr

080051c0 <strtok>:
 80051c0:	4b02      	ldr	r3, [pc, #8]	; (80051cc <strtok+0xc>)
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	2301      	movs	r3, #1
 80051c6:	325c      	adds	r2, #92	; 0x5c
 80051c8:	f000 b802 	b.w	80051d0 <__strtok_r>
 80051cc:	200005c8 	.word	0x200005c8

080051d0 <__strtok_r>:
 80051d0:	b4f0      	push	{r4, r5, r6, r7}
 80051d2:	b320      	cbz	r0, 800521e <__strtok_r+0x4e>
 80051d4:	4607      	mov	r7, r0
 80051d6:	460d      	mov	r5, r1
 80051d8:	f817 6b01 	ldrb.w	r6, [r7], #1
 80051dc:	e001      	b.n	80051e2 <__strtok_r+0x12>
 80051de:	42a6      	cmp	r6, r4
 80051e0:	d016      	beq.n	8005210 <__strtok_r+0x40>
 80051e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80051e6:	2c00      	cmp	r4, #0
 80051e8:	d1f9      	bne.n	80051de <__strtok_r+0xe>
 80051ea:	b1ee      	cbz	r6, 8005228 <__strtok_r+0x58>
 80051ec:	463e      	mov	r6, r7
 80051ee:	460c      	mov	r4, r1
 80051f0:	f816 5b01 	ldrb.w	r5, [r6], #1
 80051f4:	e000      	b.n	80051f8 <__strtok_r+0x28>
 80051f6:	b173      	cbz	r3, 8005216 <__strtok_r+0x46>
 80051f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80051fc:	42ab      	cmp	r3, r5
 80051fe:	d1fa      	bne.n	80051f6 <__strtok_r+0x26>
 8005200:	b15d      	cbz	r5, 800521a <__strtok_r+0x4a>
 8005202:	2300      	movs	r3, #0
 8005204:	703b      	strb	r3, [r7, #0]
 8005206:	6016      	str	r6, [r2, #0]
 8005208:	4606      	mov	r6, r0
 800520a:	4630      	mov	r0, r6
 800520c:	bcf0      	pop	{r4, r5, r6, r7}
 800520e:	4770      	bx	lr
 8005210:	b163      	cbz	r3, 800522c <__strtok_r+0x5c>
 8005212:	4638      	mov	r0, r7
 8005214:	e7de      	b.n	80051d4 <__strtok_r+0x4>
 8005216:	4637      	mov	r7, r6
 8005218:	e7e8      	b.n	80051ec <__strtok_r+0x1c>
 800521a:	462e      	mov	r6, r5
 800521c:	e7f3      	b.n	8005206 <__strtok_r+0x36>
 800521e:	6810      	ldr	r0, [r2, #0]
 8005220:	2800      	cmp	r0, #0
 8005222:	d1d7      	bne.n	80051d4 <__strtok_r+0x4>
 8005224:	4606      	mov	r6, r0
 8005226:	e7f0      	b.n	800520a <__strtok_r+0x3a>
 8005228:	6016      	str	r6, [r2, #0]
 800522a:	e7ee      	b.n	800520a <__strtok_r+0x3a>
 800522c:	6017      	str	r7, [r2, #0]
 800522e:	4606      	mov	r6, r0
 8005230:	7003      	strb	r3, [r0, #0]
 8005232:	e7ea      	b.n	800520a <__strtok_r+0x3a>

08005234 <_strtoul_r>:
 8005234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005238:	4c46      	ldr	r4, [pc, #280]	; (8005354 <_strtoul_r+0x120>)
 800523a:	460f      	mov	r7, r1
 800523c:	f8d4 e000 	ldr.w	lr, [r4]
 8005240:	e000      	b.n	8005244 <_strtoul_r+0x10>
 8005242:	4627      	mov	r7, r4
 8005244:	463c      	mov	r4, r7
 8005246:	f814 5b01 	ldrb.w	r5, [r4], #1
 800524a:	eb0e 0605 	add.w	r6, lr, r5
 800524e:	7876      	ldrb	r6, [r6, #1]
 8005250:	f006 0608 	and.w	r6, r6, #8
 8005254:	f006 08ff 	and.w	r8, r6, #255	; 0xff
 8005258:	2e00      	cmp	r6, #0
 800525a:	d1f2      	bne.n	8005242 <_strtoul_r+0xe>
 800525c:	2d2d      	cmp	r5, #45	; 0x2d
 800525e:	d051      	beq.n	8005304 <_strtoul_r+0xd0>
 8005260:	2d2b      	cmp	r5, #43	; 0x2b
 8005262:	bf04      	itt	eq
 8005264:	787d      	ldrbeq	r5, [r7, #1]
 8005266:	1cbc      	addeq	r4, r7, #2
 8005268:	b15b      	cbz	r3, 8005282 <_strtoul_r+0x4e>
 800526a:	2b10      	cmp	r3, #16
 800526c:	d05b      	beq.n	8005326 <_strtoul_r+0xf2>
 800526e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8005272:	fbb9 f9f3 	udiv	r9, r9, r3
 8005276:	fb03 fb09 	mul.w	fp, r3, r9
 800527a:	ea6f 0b0b 	mvn.w	fp, fp
 800527e:	469a      	mov	sl, r3
 8005280:	e007      	b.n	8005292 <_strtoul_r+0x5e>
 8005282:	2d30      	cmp	r5, #48	; 0x30
 8005284:	d043      	beq.n	800530e <_strtoul_r+0xda>
 8005286:	230a      	movs	r3, #10
 8005288:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8005358 <_strtoul_r+0x124>
 800528c:	469a      	mov	sl, r3
 800528e:	f04f 0b05 	mov.w	fp, #5
 8005292:	2700      	movs	r7, #0
 8005294:	46bc      	mov	ip, r7
 8005296:	e00c      	b.n	80052b2 <_strtoul_r+0x7e>
 8005298:	3d30      	subs	r5, #48	; 0x30
 800529a:	42ab      	cmp	r3, r5
 800529c:	dd19      	ble.n	80052d2 <_strtoul_r+0x9e>
 800529e:	1c7e      	adds	r6, r7, #1
 80052a0:	d005      	beq.n	80052ae <_strtoul_r+0x7a>
 80052a2:	45cc      	cmp	ip, r9
 80052a4:	d824      	bhi.n	80052f0 <_strtoul_r+0xbc>
 80052a6:	d021      	beq.n	80052ec <_strtoul_r+0xb8>
 80052a8:	fb0a 5c0c 	mla	ip, sl, ip, r5
 80052ac:	2701      	movs	r7, #1
 80052ae:	f814 5b01 	ldrb.w	r5, [r4], #1
 80052b2:	eb0e 0605 	add.w	r6, lr, r5
 80052b6:	7876      	ldrb	r6, [r6, #1]
 80052b8:	f016 0f04 	tst.w	r6, #4
 80052bc:	d1ec      	bne.n	8005298 <_strtoul_r+0x64>
 80052be:	f016 0603 	ands.w	r6, r6, #3
 80052c2:	d006      	beq.n	80052d2 <_strtoul_r+0x9e>
 80052c4:	2e01      	cmp	r6, #1
 80052c6:	bf0c      	ite	eq
 80052c8:	2637      	moveq	r6, #55	; 0x37
 80052ca:	2657      	movne	r6, #87	; 0x57
 80052cc:	1bad      	subs	r5, r5, r6
 80052ce:	42ab      	cmp	r3, r5
 80052d0:	dce5      	bgt.n	800529e <_strtoul_r+0x6a>
 80052d2:	2f00      	cmp	r7, #0
 80052d4:	db11      	blt.n	80052fa <_strtoul_r+0xc6>
 80052d6:	f1c8 0000 	rsb	r0, r8, #0
 80052da:	ea8c 0000 	eor.w	r0, ip, r0
 80052de:	4440      	add	r0, r8
 80052e0:	b14a      	cbz	r2, 80052f6 <_strtoul_r+0xc2>
 80052e2:	b107      	cbz	r7, 80052e6 <_strtoul_r+0xb2>
 80052e4:	1e61      	subs	r1, r4, #1
 80052e6:	6011      	str	r1, [r2, #0]
 80052e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ec:	455d      	cmp	r5, fp
 80052ee:	dddb      	ble.n	80052a8 <_strtoul_r+0x74>
 80052f0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80052f4:	e7db      	b.n	80052ae <_strtoul_r+0x7a>
 80052f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052fa:	2322      	movs	r3, #34	; 0x22
 80052fc:	6003      	str	r3, [r0, #0]
 80052fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005302:	e7ed      	b.n	80052e0 <_strtoul_r+0xac>
 8005304:	1cbc      	adds	r4, r7, #2
 8005306:	787d      	ldrb	r5, [r7, #1]
 8005308:	f04f 0801 	mov.w	r8, #1
 800530c:	e7ac      	b.n	8005268 <_strtoul_r+0x34>
 800530e:	7823      	ldrb	r3, [r4, #0]
 8005310:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005314:	2b58      	cmp	r3, #88	; 0x58
 8005316:	d013      	beq.n	8005340 <_strtoul_r+0x10c>
 8005318:	2308      	movs	r3, #8
 800531a:	469a      	mov	sl, r3
 800531c:	f04f 0b07 	mov.w	fp, #7
 8005320:	f06f 4960 	mvn.w	r9, #3758096384	; 0xe0000000
 8005324:	e7b5      	b.n	8005292 <_strtoul_r+0x5e>
 8005326:	2d30      	cmp	r5, #48	; 0x30
 8005328:	d005      	beq.n	8005336 <_strtoul_r+0x102>
 800532a:	f04f 0b0f 	mov.w	fp, #15
 800532e:	f06f 4970 	mvn.w	r9, #4026531840	; 0xf0000000
 8005332:	469a      	mov	sl, r3
 8005334:	e7ad      	b.n	8005292 <_strtoul_r+0x5e>
 8005336:	7826      	ldrb	r6, [r4, #0]
 8005338:	f006 06df 	and.w	r6, r6, #223	; 0xdf
 800533c:	2e58      	cmp	r6, #88	; 0x58
 800533e:	d1f4      	bne.n	800532a <_strtoul_r+0xf6>
 8005340:	f04f 0a10 	mov.w	sl, #16
 8005344:	7865      	ldrb	r5, [r4, #1]
 8005346:	4653      	mov	r3, sl
 8005348:	f04f 0b0f 	mov.w	fp, #15
 800534c:	3402      	adds	r4, #2
 800534e:	f06f 4970 	mvn.w	r9, #4026531840	; 0xf0000000
 8005352:	e79e      	b.n	8005292 <_strtoul_r+0x5e>
 8005354:	2000019c 	.word	0x2000019c
 8005358:	19999999 	.word	0x19999999

0800535c <strtoul>:
 800535c:	b430      	push	{r4, r5}
 800535e:	4c04      	ldr	r4, [pc, #16]	; (8005370 <strtoul+0x14>)
 8005360:	460d      	mov	r5, r1
 8005362:	4613      	mov	r3, r2
 8005364:	4601      	mov	r1, r0
 8005366:	462a      	mov	r2, r5
 8005368:	6820      	ldr	r0, [r4, #0]
 800536a:	bc30      	pop	{r4, r5}
 800536c:	f7ff bf62 	b.w	8005234 <_strtoul_r>
 8005370:	200005c8 	.word	0x200005c8
 8005374:	00000000 	.word	0x00000000

08005378 <_vfprintf_r>:
 8005378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800537c:	b0bd      	sub	sp, #244	; 0xf4
 800537e:	461c      	mov	r4, r3
 8005380:	4689      	mov	r9, r1
 8005382:	9204      	str	r2, [sp, #16]
 8005384:	4607      	mov	r7, r0
 8005386:	f002 fee7 	bl	8008158 <_localeconv_r>
 800538a:	6803      	ldr	r3, [r0, #0]
 800538c:	9311      	str	r3, [sp, #68]	; 0x44
 800538e:	4618      	mov	r0, r3
 8005390:	f7ff fee8 	bl	8005164 <strlen>
 8005394:	9408      	str	r4, [sp, #32]
 8005396:	9012      	str	r0, [sp, #72]	; 0x48
 8005398:	b11f      	cbz	r7, 80053a2 <_vfprintf_r+0x2a>
 800539a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539c:	2b00      	cmp	r3, #0
 800539e:	f000 80f3 	beq.w	8005588 <_vfprintf_r+0x210>
 80053a2:	f8b9 200c 	ldrh.w	r2, [r9, #12]
 80053a6:	b293      	uxth	r3, r2
 80053a8:	049e      	lsls	r6, r3, #18
 80053aa:	d40a      	bmi.n	80053c2 <_vfprintf_r+0x4a>
 80053ac:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
 80053b0:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 80053b4:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 80053b8:	f8a9 300c 	strh.w	r3, [r9, #12]
 80053bc:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	071d      	lsls	r5, r3, #28
 80053c4:	f140 80aa 	bpl.w	800551c <_vfprintf_r+0x1a4>
 80053c8:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80053cc:	2a00      	cmp	r2, #0
 80053ce:	f000 80a5 	beq.w	800551c <_vfprintf_r+0x1a4>
 80053d2:	f003 031a 	and.w	r3, r3, #26
 80053d6:	2b0a      	cmp	r3, #10
 80053d8:	f000 80ac 	beq.w	8005534 <_vfprintf_r+0x1bc>
 80053dc:	ed9f 7b6e 	vldr	d7, [pc, #440]	; 8005598 <_vfprintf_r+0x220>
 80053e0:	2300      	movs	r3, #0
 80053e2:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80053e6:	930d      	str	r3, [sp, #52]	; 0x34
 80053e8:	9321      	str	r3, [sp, #132]	; 0x84
 80053ea:	9320      	str	r3, [sp, #128]	; 0x80
 80053ec:	9310      	str	r3, [sp, #64]	; 0x40
 80053ee:	9313      	str	r3, [sp, #76]	; 0x4c
 80053f0:	9305      	str	r3, [sp, #20]
 80053f2:	ab2c      	add	r3, sp, #176	; 0xb0
 80053f4:	931f      	str	r3, [sp, #124]	; 0x7c
 80053f6:	461c      	mov	r4, r3
 80053f8:	46b8      	mov	r8, r7
 80053fa:	9d04      	ldr	r5, [sp, #16]
 80053fc:	782b      	ldrb	r3, [r5, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	f000 80c6 	beq.w	8005590 <_vfprintf_r+0x218>
 8005404:	2b25      	cmp	r3, #37	; 0x25
 8005406:	d102      	bne.n	800540e <_vfprintf_r+0x96>
 8005408:	e0c2      	b.n	8005590 <_vfprintf_r+0x218>
 800540a:	2b25      	cmp	r3, #37	; 0x25
 800540c:	d003      	beq.n	8005416 <_vfprintf_r+0x9e>
 800540e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1f9      	bne.n	800540a <_vfprintf_r+0x92>
 8005416:	9b04      	ldr	r3, [sp, #16]
 8005418:	1aee      	subs	r6, r5, r3
 800541a:	b17e      	cbz	r6, 800543c <_vfprintf_r+0xc4>
 800541c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800541e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005420:	9904      	ldr	r1, [sp, #16]
 8005422:	6021      	str	r1, [r4, #0]
 8005424:	3301      	adds	r3, #1
 8005426:	4432      	add	r2, r6
 8005428:	2b07      	cmp	r3, #7
 800542a:	6066      	str	r6, [r4, #4]
 800542c:	9221      	str	r2, [sp, #132]	; 0x84
 800542e:	9320      	str	r3, [sp, #128]	; 0x80
 8005430:	f300 8093 	bgt.w	800555a <_vfprintf_r+0x1e2>
 8005434:	3408      	adds	r4, #8
 8005436:	9b05      	ldr	r3, [sp, #20]
 8005438:	4433      	add	r3, r6
 800543a:	9305      	str	r3, [sp, #20]
 800543c:	782b      	ldrb	r3, [r5, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	f000 8093 	beq.w	800556a <_vfprintf_r+0x1f2>
 8005444:	2300      	movs	r3, #0
 8005446:	1c69      	adds	r1, r5, #1
 8005448:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800544c:	786d      	ldrb	r5, [r5, #1]
 800544e:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8005452:	461a      	mov	r2, r3
 8005454:	9306      	str	r3, [sp, #24]
 8005456:	9302      	str	r3, [sp, #8]
 8005458:	4656      	mov	r6, sl
 800545a:	1c4b      	adds	r3, r1, #1
 800545c:	f1a5 0120 	sub.w	r1, r5, #32
 8005460:	2958      	cmp	r1, #88	; 0x58
 8005462:	f200 83cd 	bhi.w	8005c00 <_vfprintf_r+0x888>
 8005466:	e8df f011 	tbh	[pc, r1, lsl #1]
 800546a:	025c      	.short	0x025c
 800546c:	03cb03cb 	.word	0x03cb03cb
 8005470:	03cb0302 	.word	0x03cb0302
 8005474:	03cb03cb 	.word	0x03cb03cb
 8005478:	03cb03cb 	.word	0x03cb03cb
 800547c:	030903cb 	.word	0x030903cb
 8005480:	03cb02d2 	.word	0x03cb02d2
 8005484:	035301f8 	.word	0x035301f8
 8005488:	02d603cb 	.word	0x02d603cb
 800548c:	02dd02dd 	.word	0x02dd02dd
 8005490:	02dd02dd 	.word	0x02dd02dd
 8005494:	02dd02dd 	.word	0x02dd02dd
 8005498:	02dd02dd 	.word	0x02dd02dd
 800549c:	03cb02dd 	.word	0x03cb02dd
 80054a0:	03cb03cb 	.word	0x03cb03cb
 80054a4:	03cb03cb 	.word	0x03cb03cb
 80054a8:	03cb03cb 	.word	0x03cb03cb
 80054ac:	03cb03cb 	.word	0x03cb03cb
 80054b0:	027103cb 	.word	0x027103cb
 80054b4:	03cb0293 	.word	0x03cb0293
 80054b8:	03cb0293 	.word	0x03cb0293
 80054bc:	03cb03cb 	.word	0x03cb03cb
 80054c0:	02cb03cb 	.word	0x02cb03cb
 80054c4:	03cb03cb 	.word	0x03cb03cb
 80054c8:	03cb036e 	.word	0x03cb036e
 80054cc:	03cb03cb 	.word	0x03cb03cb
 80054d0:	03cb03cb 	.word	0x03cb03cb
 80054d4:	03cb03b5 	.word	0x03cb03b5
 80054d8:	038b03cb 	.word	0x038b03cb
 80054dc:	03cb03cb 	.word	0x03cb03cb
 80054e0:	03cb03cb 	.word	0x03cb03cb
 80054e4:	03cb03cb 	.word	0x03cb03cb
 80054e8:	03cb03cb 	.word	0x03cb03cb
 80054ec:	03cb03cb 	.word	0x03cb03cb
 80054f0:	031703a0 	.word	0x031703a0
 80054f4:	02930293 	.word	0x02930293
 80054f8:	03300293 	.word	0x03300293
 80054fc:	03cb0317 	.word	0x03cb0317
 8005500:	033703cb 	.word	0x033703cb
 8005504:	034103cb 	.word	0x034103cb
 8005508:	02ec01ff 	.word	0x02ec01ff
 800550c:	03cb0263 	.word	0x03cb0263
 8005510:	03cb0211 	.word	0x03cb0211
 8005514:	03cb009b 	.word	0x03cb009b
 8005518:	023603cb 	.word	0x023603cb
 800551c:	4638      	mov	r0, r7
 800551e:	4649      	mov	r1, r9
 8005520:	f001 f97a 	bl	8006818 <__swsetup_r>
 8005524:	b9a0      	cbnz	r0, 8005550 <_vfprintf_r+0x1d8>
 8005526:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800552a:	f003 031a 	and.w	r3, r3, #26
 800552e:	2b0a      	cmp	r3, #10
 8005530:	f47f af54 	bne.w	80053dc <_vfprintf_r+0x64>
 8005534:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
 8005538:	2b00      	cmp	r3, #0
 800553a:	f6ff af4f 	blt.w	80053dc <_vfprintf_r+0x64>
 800553e:	4638      	mov	r0, r7
 8005540:	4649      	mov	r1, r9
 8005542:	9a04      	ldr	r2, [sp, #16]
 8005544:	4623      	mov	r3, r4
 8005546:	f001 f92b 	bl	80067a0 <__sbprintf>
 800554a:	b03d      	add	sp, #244	; 0xf4
 800554c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005554:	b03d      	add	sp, #244	; 0xf4
 8005556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800555a:	4640      	mov	r0, r8
 800555c:	4649      	mov	r1, r9
 800555e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005560:	f003 ff7e 	bl	8009460 <__sprint_r>
 8005564:	b940      	cbnz	r0, 8005578 <_vfprintf_r+0x200>
 8005566:	ac2c      	add	r4, sp, #176	; 0xb0
 8005568:	e765      	b.n	8005436 <_vfprintf_r+0xbe>
 800556a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800556c:	b123      	cbz	r3, 8005578 <_vfprintf_r+0x200>
 800556e:	4640      	mov	r0, r8
 8005570:	4649      	mov	r1, r9
 8005572:	aa1f      	add	r2, sp, #124	; 0x7c
 8005574:	f003 ff74 	bl	8009460 <__sprint_r>
 8005578:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800557c:	065a      	lsls	r2, r3, #25
 800557e:	d4e7      	bmi.n	8005550 <_vfprintf_r+0x1d8>
 8005580:	9805      	ldr	r0, [sp, #20]
 8005582:	b03d      	add	sp, #244	; 0xf4
 8005584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005588:	4638      	mov	r0, r7
 800558a:	f002 fadf 	bl	8007b4c <__sinit>
 800558e:	e708      	b.n	80053a2 <_vfprintf_r+0x2a>
 8005590:	9d04      	ldr	r5, [sp, #16]
 8005592:	e753      	b.n	800543c <_vfprintf_r+0xc4>
 8005594:	f3af 8000 	nop.w
	...
 80055a0:	9304      	str	r3, [sp, #16]
 80055a2:	9b02      	ldr	r3, [sp, #8]
 80055a4:	46b2      	mov	sl, r6
 80055a6:	069e      	lsls	r6, r3, #26
 80055a8:	f140 831e 	bpl.w	8005be8 <_vfprintf_r+0x870>
 80055ac:	9f08      	ldr	r7, [sp, #32]
 80055ae:	3707      	adds	r7, #7
 80055b0:	f027 0307 	bic.w	r3, r7, #7
 80055b4:	f103 0208 	add.w	r2, r3, #8
 80055b8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80055bc:	9208      	str	r2, [sp, #32]
 80055be:	2301      	movs	r3, #1
 80055c0:	f04f 0c00 	mov.w	ip, #0
 80055c4:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
 80055c8:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 80055cc:	f1ba 0f00 	cmp.w	sl, #0
 80055d0:	db03      	blt.n	80055da <_vfprintf_r+0x262>
 80055d2:	9a02      	ldr	r2, [sp, #8]
 80055d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055d8:	9202      	str	r2, [sp, #8]
 80055da:	ea56 0207 	orrs.w	r2, r6, r7
 80055de:	f040 831f 	bne.w	8005c20 <_vfprintf_r+0x8a8>
 80055e2:	f1ba 0f00 	cmp.w	sl, #0
 80055e6:	f000 841c 	beq.w	8005e22 <_vfprintf_r+0xaaa>
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	f000 8320 	beq.w	8005c30 <_vfprintf_r+0x8b8>
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	f000 8452 	beq.w	8005e9a <_vfprintf_r+0xb22>
 80055f6:	a92c      	add	r1, sp, #176	; 0xb0
 80055f8:	08f2      	lsrs	r2, r6, #3
 80055fa:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 80055fe:	08f8      	lsrs	r0, r7, #3
 8005600:	f006 0307 	and.w	r3, r6, #7
 8005604:	4607      	mov	r7, r0
 8005606:	4616      	mov	r6, r2
 8005608:	3330      	adds	r3, #48	; 0x30
 800560a:	ea56 0207 	orrs.w	r2, r6, r7
 800560e:	f801 3d01 	strb.w	r3, [r1, #-1]!
 8005612:	d1f1      	bne.n	80055f8 <_vfprintf_r+0x280>
 8005614:	9a02      	ldr	r2, [sp, #8]
 8005616:	910a      	str	r1, [sp, #40]	; 0x28
 8005618:	07d0      	lsls	r0, r2, #31
 800561a:	f100 84f9 	bmi.w	8006010 <_vfprintf_r+0xc98>
 800561e:	ab2c      	add	r3, sp, #176	; 0xb0
 8005620:	1a5b      	subs	r3, r3, r1
 8005622:	9307      	str	r3, [sp, #28]
 8005624:	9a07      	ldr	r2, [sp, #28]
 8005626:	4592      	cmp	sl, r2
 8005628:	4653      	mov	r3, sl
 800562a:	bfb8      	it	lt
 800562c:	4613      	movlt	r3, r2
 800562e:	9303      	str	r3, [sp, #12]
 8005630:	2300      	movs	r3, #0
 8005632:	930c      	str	r3, [sp, #48]	; 0x30
 8005634:	f1bc 0f00 	cmp.w	ip, #0
 8005638:	d002      	beq.n	8005640 <_vfprintf_r+0x2c8>
 800563a:	9b03      	ldr	r3, [sp, #12]
 800563c:	3301      	adds	r3, #1
 800563e:	9303      	str	r3, [sp, #12]
 8005640:	9b02      	ldr	r3, [sp, #8]
 8005642:	f013 0302 	ands.w	r3, r3, #2
 8005646:	9309      	str	r3, [sp, #36]	; 0x24
 8005648:	d002      	beq.n	8005650 <_vfprintf_r+0x2d8>
 800564a:	9b03      	ldr	r3, [sp, #12]
 800564c:	3302      	adds	r3, #2
 800564e:	9303      	str	r3, [sp, #12]
 8005650:	9b02      	ldr	r3, [sp, #8]
 8005652:	f013 0684 	ands.w	r6, r3, #132	; 0x84
 8005656:	f040 82e0 	bne.w	8005c1a <_vfprintf_r+0x8a2>
 800565a:	9b06      	ldr	r3, [sp, #24]
 800565c:	9a03      	ldr	r2, [sp, #12]
 800565e:	ebc2 0a03 	rsb	sl, r2, r3
 8005662:	f1ba 0f00 	cmp.w	sl, #0
 8005666:	f340 82d8 	ble.w	8005c1a <_vfprintf_r+0x8a2>
 800566a:	f1ba 0f10 	cmp.w	sl, #16
 800566e:	9921      	ldr	r1, [sp, #132]	; 0x84
 8005670:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005672:	4fb3      	ldr	r7, [pc, #716]	; (8005940 <_vfprintf_r+0x5c8>)
 8005674:	bfc8      	it	gt
 8005676:	f04f 0b10 	movgt.w	fp, #16
 800567a:	dc07      	bgt.n	800568c <_vfprintf_r+0x314>
 800567c:	e01e      	b.n	80056bc <_vfprintf_r+0x344>
 800567e:	f1aa 0a10 	sub.w	sl, sl, #16
 8005682:	f1ba 0f10 	cmp.w	sl, #16
 8005686:	f104 0408 	add.w	r4, r4, #8
 800568a:	dd17      	ble.n	80056bc <_vfprintf_r+0x344>
 800568c:	3201      	adds	r2, #1
 800568e:	3110      	adds	r1, #16
 8005690:	2a07      	cmp	r2, #7
 8005692:	9121      	str	r1, [sp, #132]	; 0x84
 8005694:	9220      	str	r2, [sp, #128]	; 0x80
 8005696:	e884 0880 	stmia.w	r4, {r7, fp}
 800569a:	ddf0      	ble.n	800567e <_vfprintf_r+0x306>
 800569c:	4640      	mov	r0, r8
 800569e:	4649      	mov	r1, r9
 80056a0:	aa1f      	add	r2, sp, #124	; 0x7c
 80056a2:	f003 fedd 	bl	8009460 <__sprint_r>
 80056a6:	2800      	cmp	r0, #0
 80056a8:	f47f af66 	bne.w	8005578 <_vfprintf_r+0x200>
 80056ac:	f1aa 0a10 	sub.w	sl, sl, #16
 80056b0:	f1ba 0f10 	cmp.w	sl, #16
 80056b4:	9921      	ldr	r1, [sp, #132]	; 0x84
 80056b6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80056b8:	ac2c      	add	r4, sp, #176	; 0xb0
 80056ba:	dce7      	bgt.n	800568c <_vfprintf_r+0x314>
 80056bc:	3201      	adds	r2, #1
 80056be:	eb0a 0b01 	add.w	fp, sl, r1
 80056c2:	2a07      	cmp	r2, #7
 80056c4:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 80056c8:	9220      	str	r2, [sp, #128]	; 0x80
 80056ca:	e884 0480 	stmia.w	r4, {r7, sl}
 80056ce:	f300 844a 	bgt.w	8005f66 <_vfprintf_r+0xbee>
 80056d2:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 80056d6:	3408      	adds	r4, #8
 80056d8:	f1bc 0f00 	cmp.w	ip, #0
 80056dc:	d00f      	beq.n	80056fe <_vfprintf_r+0x386>
 80056de:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80056e0:	3301      	adds	r3, #1
 80056e2:	f10b 0b01 	add.w	fp, fp, #1
 80056e6:	f10d 015f 	add.w	r1, sp, #95	; 0x5f
 80056ea:	2201      	movs	r2, #1
 80056ec:	2b07      	cmp	r3, #7
 80056ee:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 80056f2:	9320      	str	r3, [sp, #128]	; 0x80
 80056f4:	e884 0006 	stmia.w	r4, {r1, r2}
 80056f8:	f300 83b1 	bgt.w	8005e5e <_vfprintf_r+0xae6>
 80056fc:	3408      	adds	r4, #8
 80056fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005700:	b173      	cbz	r3, 8005720 <_vfprintf_r+0x3a8>
 8005702:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005704:	3301      	adds	r3, #1
 8005706:	f10b 0b02 	add.w	fp, fp, #2
 800570a:	a918      	add	r1, sp, #96	; 0x60
 800570c:	2202      	movs	r2, #2
 800570e:	2b07      	cmp	r3, #7
 8005710:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8005714:	9320      	str	r3, [sp, #128]	; 0x80
 8005716:	e884 0006 	stmia.w	r4, {r1, r2}
 800571a:	f300 83ac 	bgt.w	8005e76 <_vfprintf_r+0xafe>
 800571e:	3408      	adds	r4, #8
 8005720:	2e80      	cmp	r6, #128	; 0x80
 8005722:	f000 82f0 	beq.w	8005d06 <_vfprintf_r+0x98e>
 8005726:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005728:	9a07      	ldr	r2, [sp, #28]
 800572a:	ebc2 0a03 	rsb	sl, r2, r3
 800572e:	f1ba 0f00 	cmp.w	sl, #0
 8005732:	dd32      	ble.n	800579a <_vfprintf_r+0x422>
 8005734:	f1ba 0f10 	cmp.w	sl, #16
 8005738:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800573a:	4f82      	ldr	r7, [pc, #520]	; (8005944 <_vfprintf_r+0x5cc>)
 800573c:	dd22      	ble.n	8005784 <_vfprintf_r+0x40c>
 800573e:	2610      	movs	r6, #16
 8005740:	465b      	mov	r3, fp
 8005742:	e006      	b.n	8005752 <_vfprintf_r+0x3da>
 8005744:	f1aa 0a10 	sub.w	sl, sl, #16
 8005748:	f1ba 0f10 	cmp.w	sl, #16
 800574c:	f104 0408 	add.w	r4, r4, #8
 8005750:	dd17      	ble.n	8005782 <_vfprintf_r+0x40a>
 8005752:	3201      	adds	r2, #1
 8005754:	3310      	adds	r3, #16
 8005756:	2a07      	cmp	r2, #7
 8005758:	9321      	str	r3, [sp, #132]	; 0x84
 800575a:	9220      	str	r2, [sp, #128]	; 0x80
 800575c:	6027      	str	r7, [r4, #0]
 800575e:	6066      	str	r6, [r4, #4]
 8005760:	ddf0      	ble.n	8005744 <_vfprintf_r+0x3cc>
 8005762:	4640      	mov	r0, r8
 8005764:	4649      	mov	r1, r9
 8005766:	aa1f      	add	r2, sp, #124	; 0x7c
 8005768:	f003 fe7a 	bl	8009460 <__sprint_r>
 800576c:	2800      	cmp	r0, #0
 800576e:	f47f af03 	bne.w	8005578 <_vfprintf_r+0x200>
 8005772:	f1aa 0a10 	sub.w	sl, sl, #16
 8005776:	f1ba 0f10 	cmp.w	sl, #16
 800577a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800577c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800577e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005780:	dce7      	bgt.n	8005752 <_vfprintf_r+0x3da>
 8005782:	469b      	mov	fp, r3
 8005784:	3201      	adds	r2, #1
 8005786:	44d3      	add	fp, sl
 8005788:	2a07      	cmp	r2, #7
 800578a:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 800578e:	9220      	str	r2, [sp, #128]	; 0x80
 8005790:	e884 0480 	stmia.w	r4, {r7, sl}
 8005794:	f300 8357 	bgt.w	8005e46 <_vfprintf_r+0xace>
 8005798:	3408      	adds	r4, #8
 800579a:	9b02      	ldr	r3, [sp, #8]
 800579c:	05db      	lsls	r3, r3, #23
 800579e:	f100 825b 	bmi.w	8005c58 <_vfprintf_r+0x8e0>
 80057a2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80057a4:	9907      	ldr	r1, [sp, #28]
 80057a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057a8:	6022      	str	r2, [r4, #0]
 80057aa:	3301      	adds	r3, #1
 80057ac:	448b      	add	fp, r1
 80057ae:	2b07      	cmp	r3, #7
 80057b0:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 80057b4:	6061      	str	r1, [r4, #4]
 80057b6:	9320      	str	r3, [sp, #128]	; 0x80
 80057b8:	f300 831d 	bgt.w	8005df6 <_vfprintf_r+0xa7e>
 80057bc:	3408      	adds	r4, #8
 80057be:	9b02      	ldr	r3, [sp, #8]
 80057c0:	0759      	lsls	r1, r3, #29
 80057c2:	d53a      	bpl.n	800583a <_vfprintf_r+0x4c2>
 80057c4:	9b06      	ldr	r3, [sp, #24]
 80057c6:	9a03      	ldr	r2, [sp, #12]
 80057c8:	1a9d      	subs	r5, r3, r2
 80057ca:	2d00      	cmp	r5, #0
 80057cc:	dd35      	ble.n	800583a <_vfprintf_r+0x4c2>
 80057ce:	2d10      	cmp	r5, #16
 80057d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80057d2:	4f5b      	ldr	r7, [pc, #364]	; (8005940 <_vfprintf_r+0x5c8>)
 80057d4:	dd1e      	ble.n	8005814 <_vfprintf_r+0x49c>
 80057d6:	2610      	movs	r6, #16
 80057d8:	465a      	mov	r2, fp
 80057da:	e004      	b.n	80057e6 <_vfprintf_r+0x46e>
 80057dc:	3d10      	subs	r5, #16
 80057de:	2d10      	cmp	r5, #16
 80057e0:	f104 0408 	add.w	r4, r4, #8
 80057e4:	dd15      	ble.n	8005812 <_vfprintf_r+0x49a>
 80057e6:	3301      	adds	r3, #1
 80057e8:	3210      	adds	r2, #16
 80057ea:	2b07      	cmp	r3, #7
 80057ec:	9221      	str	r2, [sp, #132]	; 0x84
 80057ee:	9320      	str	r3, [sp, #128]	; 0x80
 80057f0:	6027      	str	r7, [r4, #0]
 80057f2:	6066      	str	r6, [r4, #4]
 80057f4:	ddf2      	ble.n	80057dc <_vfprintf_r+0x464>
 80057f6:	4640      	mov	r0, r8
 80057f8:	4649      	mov	r1, r9
 80057fa:	aa1f      	add	r2, sp, #124	; 0x7c
 80057fc:	f003 fe30 	bl	8009460 <__sprint_r>
 8005800:	2800      	cmp	r0, #0
 8005802:	f47f aeb9 	bne.w	8005578 <_vfprintf_r+0x200>
 8005806:	3d10      	subs	r5, #16
 8005808:	2d10      	cmp	r5, #16
 800580a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800580c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800580e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005810:	dce9      	bgt.n	80057e6 <_vfprintf_r+0x46e>
 8005812:	4693      	mov	fp, r2
 8005814:	3301      	adds	r3, #1
 8005816:	44ab      	add	fp, r5
 8005818:	2b07      	cmp	r3, #7
 800581a:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 800581e:	9320      	str	r3, [sp, #128]	; 0x80
 8005820:	6027      	str	r7, [r4, #0]
 8005822:	6065      	str	r5, [r4, #4]
 8005824:	dd09      	ble.n	800583a <_vfprintf_r+0x4c2>
 8005826:	4640      	mov	r0, r8
 8005828:	4649      	mov	r1, r9
 800582a:	aa1f      	add	r2, sp, #124	; 0x7c
 800582c:	f003 fe18 	bl	8009460 <__sprint_r>
 8005830:	2800      	cmp	r0, #0
 8005832:	f47f aea1 	bne.w	8005578 <_vfprintf_r+0x200>
 8005836:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 800583a:	9b05      	ldr	r3, [sp, #20]
 800583c:	9a03      	ldr	r2, [sp, #12]
 800583e:	9906      	ldr	r1, [sp, #24]
 8005840:	428a      	cmp	r2, r1
 8005842:	bfac      	ite	ge
 8005844:	189b      	addge	r3, r3, r2
 8005846:	185b      	addlt	r3, r3, r1
 8005848:	9305      	str	r3, [sp, #20]
 800584a:	f1bb 0f00 	cmp.w	fp, #0
 800584e:	f040 82de 	bne.w	8005e0e <_vfprintf_r+0xa96>
 8005852:	2300      	movs	r3, #0
 8005854:	9320      	str	r3, [sp, #128]	; 0x80
 8005856:	ac2c      	add	r4, sp, #176	; 0xb0
 8005858:	e5cf      	b.n	80053fa <_vfprintf_r+0x82>
 800585a:	4619      	mov	r1, r3
 800585c:	9802      	ldr	r0, [sp, #8]
 800585e:	781d      	ldrb	r5, [r3, #0]
 8005860:	f040 0004 	orr.w	r0, r0, #4
 8005864:	9002      	str	r0, [sp, #8]
 8005866:	e5f8      	b.n	800545a <_vfprintf_r+0xe2>
 8005868:	9304      	str	r3, [sp, #16]
 800586a:	9b02      	ldr	r3, [sp, #8]
 800586c:	f013 0320 	ands.w	r3, r3, #32
 8005870:	46b2      	mov	sl, r6
 8005872:	f000 8173 	beq.w	8005b5c <_vfprintf_r+0x7e4>
 8005876:	9f08      	ldr	r7, [sp, #32]
 8005878:	3707      	adds	r7, #7
 800587a:	f027 0307 	bic.w	r3, r7, #7
 800587e:	f103 0208 	add.w	r2, r3, #8
 8005882:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005886:	9208      	str	r2, [sp, #32]
 8005888:	2300      	movs	r3, #0
 800588a:	e699      	b.n	80055c0 <_vfprintf_r+0x248>
 800588c:	9a08      	ldr	r2, [sp, #32]
 800588e:	9304      	str	r3, [sp, #16]
 8005890:	6813      	ldr	r3, [r2, #0]
 8005892:	930a      	str	r3, [sp, #40]	; 0x28
 8005894:	f04f 0b00 	mov.w	fp, #0
 8005898:	f88d b05f 	strb.w	fp, [sp, #95]	; 0x5f
 800589c:	1d17      	adds	r7, r2, #4
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f000 865e 	beq.w	8006560 <_vfprintf_r+0x11e8>
 80058a4:	2e00      	cmp	r6, #0
 80058a6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80058a8:	f2c0 8612 	blt.w	80064d0 <_vfprintf_r+0x1158>
 80058ac:	4659      	mov	r1, fp
 80058ae:	4632      	mov	r2, r6
 80058b0:	f002 ff60 	bl	8008774 <memchr>
 80058b4:	2800      	cmp	r0, #0
 80058b6:	f000 868f 	beq.w	80065d8 <_vfprintf_r+0x1260>
 80058ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058bc:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80058c0:	1ac3      	subs	r3, r0, r3
 80058c2:	9307      	str	r3, [sp, #28]
 80058c4:	9708      	str	r7, [sp, #32]
 80058c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80058ca:	9303      	str	r3, [sp, #12]
 80058cc:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80058d0:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 80058d4:	e6ae      	b.n	8005634 <_vfprintf_r+0x2bc>
 80058d6:	9304      	str	r3, [sp, #16]
 80058d8:	4b1b      	ldr	r3, [pc, #108]	; (8005948 <_vfprintf_r+0x5d0>)
 80058da:	9310      	str	r3, [sp, #64]	; 0x40
 80058dc:	9b02      	ldr	r3, [sp, #8]
 80058de:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80058e2:	0699      	lsls	r1, r3, #26
 80058e4:	46b2      	mov	sl, r6
 80058e6:	f140 8155 	bpl.w	8005b94 <_vfprintf_r+0x81c>
 80058ea:	9f08      	ldr	r7, [sp, #32]
 80058ec:	3707      	adds	r7, #7
 80058ee:	f027 0307 	bic.w	r3, r7, #7
 80058f2:	e9d3 6700 	ldrd	r6, r7, [r3]
 80058f6:	f103 0208 	add.w	r2, r3, #8
 80058fa:	9208      	str	r2, [sp, #32]
 80058fc:	9b02      	ldr	r3, [sp, #8]
 80058fe:	07db      	lsls	r3, r3, #31
 8005900:	f140 82e4 	bpl.w	8005ecc <_vfprintf_r+0xb54>
 8005904:	ea56 0307 	orrs.w	r3, r6, r7
 8005908:	f000 82e0 	beq.w	8005ecc <_vfprintf_r+0xb54>
 800590c:	9a02      	ldr	r2, [sp, #8]
 800590e:	f88d 5061 	strb.w	r5, [sp, #97]	; 0x61
 8005912:	2330      	movs	r3, #48	; 0x30
 8005914:	f042 0202 	orr.w	r2, r2, #2
 8005918:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800591c:	9202      	str	r2, [sp, #8]
 800591e:	2302      	movs	r3, #2
 8005920:	e64e      	b.n	80055c0 <_vfprintf_r+0x248>
 8005922:	781d      	ldrb	r5, [r3, #0]
 8005924:	4619      	mov	r1, r3
 8005926:	2a00      	cmp	r2, #0
 8005928:	f47f ad97 	bne.w	800545a <_vfprintf_r+0xe2>
 800592c:	2220      	movs	r2, #32
 800592e:	e594      	b.n	800545a <_vfprintf_r+0xe2>
 8005930:	9902      	ldr	r1, [sp, #8]
 8005932:	f041 0120 	orr.w	r1, r1, #32
 8005936:	9102      	str	r1, [sp, #8]
 8005938:	781d      	ldrb	r5, [r3, #0]
 800593a:	4619      	mov	r1, r3
 800593c:	e58d      	b.n	800545a <_vfprintf_r+0xe2>
 800593e:	bf00      	nop
 8005940:	08019050 	.word	0x08019050
 8005944:	08018ffc 	.word	0x08018ffc
 8005948:	08019030 	.word	0x08019030
 800594c:	9304      	str	r3, [sp, #16]
 800594e:	9b02      	ldr	r3, [sp, #8]
 8005950:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005954:	f043 0310 	orr.w	r3, r3, #16
 8005958:	9302      	str	r3, [sp, #8]
 800595a:	9b02      	ldr	r3, [sp, #8]
 800595c:	0698      	lsls	r0, r3, #26
 800595e:	46b2      	mov	sl, r6
 8005960:	f140 80a2 	bpl.w	8005aa8 <_vfprintf_r+0x730>
 8005964:	9f08      	ldr	r7, [sp, #32]
 8005966:	3707      	adds	r7, #7
 8005968:	f027 0707 	bic.w	r7, r7, #7
 800596c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005970:	f107 0108 	add.w	r1, r7, #8
 8005974:	9108      	str	r1, [sp, #32]
 8005976:	4616      	mov	r6, r2
 8005978:	461f      	mov	r7, r3
 800597a:	2a00      	cmp	r2, #0
 800597c:	f173 0300 	sbcs.w	r3, r3, #0
 8005980:	f2c0 841c 	blt.w	80061bc <_vfprintf_r+0xe44>
 8005984:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 8005988:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 800598c:	2301      	movs	r3, #1
 800598e:	e61d      	b.n	80055cc <_vfprintf_r+0x254>
 8005990:	9304      	str	r3, [sp, #16]
 8005992:	9b02      	ldr	r3, [sp, #8]
 8005994:	9f08      	ldr	r7, [sp, #32]
 8005996:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800599a:	071b      	lsls	r3, r3, #28
 800599c:	46b2      	mov	sl, r6
 800599e:	46b3      	mov	fp, r6
 80059a0:	f107 0707 	add.w	r7, r7, #7
 80059a4:	f140 849b 	bpl.w	80062de <_vfprintf_r+0xf66>
 80059a8:	f027 0307 	bic.w	r3, r7, #7
 80059ac:	ed93 7b00 	vldr	d7, [r3]
 80059b0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80059b4:	f103 0208 	add.w	r2, r3, #8
 80059b8:	9208      	str	r2, [sp, #32]
 80059ba:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 80059be:	f003 fca3 	bl	8009308 <__fpclassifyd>
 80059c2:	2801      	cmp	r0, #1
 80059c4:	f040 8408 	bne.w	80061d8 <_vfprintf_r+0xe60>
 80059c8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80059cc:	2200      	movs	r2, #0
 80059ce:	2300      	movs	r3, #0
 80059d0:	f7fb f91c 	bl	8000c0c <__aeabi_dcmplt>
 80059d4:	2800      	cmp	r0, #0
 80059d6:	f040 85ec 	bne.w	80065b2 <_vfprintf_r+0x123a>
 80059da:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 80059de:	9e02      	ldr	r6, [sp, #8]
 80059e0:	4a99      	ldr	r2, [pc, #612]	; (8005c48 <_vfprintf_r+0x8d0>)
 80059e2:	4b9a      	ldr	r3, [pc, #616]	; (8005c4c <_vfprintf_r+0x8d4>)
 80059e4:	2103      	movs	r1, #3
 80059e6:	2000      	movs	r0, #0
 80059e8:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 80059ec:	2d47      	cmp	r5, #71	; 0x47
 80059ee:	bfd8      	it	le
 80059f0:	461a      	movle	r2, r3
 80059f2:	9103      	str	r1, [sp, #12]
 80059f4:	900b      	str	r0, [sp, #44]	; 0x2c
 80059f6:	9602      	str	r6, [sp, #8]
 80059f8:	920a      	str	r2, [sp, #40]	; 0x28
 80059fa:	9107      	str	r1, [sp, #28]
 80059fc:	900c      	str	r0, [sp, #48]	; 0x30
 80059fe:	e619      	b.n	8005634 <_vfprintf_r+0x2bc>
 8005a00:	9902      	ldr	r1, [sp, #8]
 8005a02:	f041 0108 	orr.w	r1, r1, #8
 8005a06:	9102      	str	r1, [sp, #8]
 8005a08:	781d      	ldrb	r5, [r3, #0]
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	e525      	b.n	800545a <_vfprintf_r+0xe2>
 8005a0e:	781d      	ldrb	r5, [r3, #0]
 8005a10:	4619      	mov	r1, r3
 8005a12:	222b      	movs	r2, #43	; 0x2b
 8005a14:	e521      	b.n	800545a <_vfprintf_r+0xe2>
 8005a16:	9902      	ldr	r1, [sp, #8]
 8005a18:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8005a1c:	9102      	str	r1, [sp, #8]
 8005a1e:	781d      	ldrb	r5, [r3, #0]
 8005a20:	4619      	mov	r1, r3
 8005a22:	e51a      	b.n	800545a <_vfprintf_r+0xe2>
 8005a24:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8005a28:	2100      	movs	r1, #0
 8005a2a:	f813 5b01 	ldrb.w	r5, [r3], #1
 8005a2e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005a32:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8005a36:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8005a3a:	2809      	cmp	r0, #9
 8005a3c:	d9f5      	bls.n	8005a2a <_vfprintf_r+0x6b2>
 8005a3e:	9106      	str	r1, [sp, #24]
 8005a40:	e50c      	b.n	800545c <_vfprintf_r+0xe4>
 8005a42:	9908      	ldr	r1, [sp, #32]
 8005a44:	9304      	str	r3, [sp, #16]
 8005a46:	2330      	movs	r3, #48	; 0x30
 8005a48:	9a02      	ldr	r2, [sp, #8]
 8005a4a:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8005a4e:	460b      	mov	r3, r1
 8005a50:	3304      	adds	r3, #4
 8005a52:	2578      	movs	r5, #120	; 0x78
 8005a54:	f042 0202 	orr.w	r2, r2, #2
 8005a58:	9308      	str	r3, [sp, #32]
 8005a5a:	4b7d      	ldr	r3, [pc, #500]	; (8005c50 <_vfprintf_r+0x8d8>)
 8005a5c:	9310      	str	r3, [sp, #64]	; 0x40
 8005a5e:	46b2      	mov	sl, r6
 8005a60:	9202      	str	r2, [sp, #8]
 8005a62:	680e      	ldr	r6, [r1, #0]
 8005a64:	f88d 5061 	strb.w	r5, [sp, #97]	; 0x61
 8005a68:	2700      	movs	r7, #0
 8005a6a:	2302      	movs	r3, #2
 8005a6c:	e5a8      	b.n	80055c0 <_vfprintf_r+0x248>
 8005a6e:	9902      	ldr	r1, [sp, #8]
 8005a70:	f041 0101 	orr.w	r1, r1, #1
 8005a74:	9102      	str	r1, [sp, #8]
 8005a76:	781d      	ldrb	r5, [r3, #0]
 8005a78:	4619      	mov	r1, r3
 8005a7a:	e4ee      	b.n	800545a <_vfprintf_r+0xe2>
 8005a7c:	9d08      	ldr	r5, [sp, #32]
 8005a7e:	6829      	ldr	r1, [r5, #0]
 8005a80:	9106      	str	r1, [sp, #24]
 8005a82:	4608      	mov	r0, r1
 8005a84:	2800      	cmp	r0, #0
 8005a86:	4629      	mov	r1, r5
 8005a88:	f101 0104 	add.w	r1, r1, #4
 8005a8c:	f2c0 84ee 	blt.w	800646c <_vfprintf_r+0x10f4>
 8005a90:	9108      	str	r1, [sp, #32]
 8005a92:	781d      	ldrb	r5, [r3, #0]
 8005a94:	4619      	mov	r1, r3
 8005a96:	e4e0      	b.n	800545a <_vfprintf_r+0xe2>
 8005a98:	9304      	str	r3, [sp, #16]
 8005a9a:	9b02      	ldr	r3, [sp, #8]
 8005a9c:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005aa0:	0698      	lsls	r0, r3, #26
 8005aa2:	46b2      	mov	sl, r6
 8005aa4:	f53f af5e 	bmi.w	8005964 <_vfprintf_r+0x5ec>
 8005aa8:	9b02      	ldr	r3, [sp, #8]
 8005aaa:	06d9      	lsls	r1, r3, #27
 8005aac:	f100 829b 	bmi.w	8005fe6 <_vfprintf_r+0xc6e>
 8005ab0:	9b02      	ldr	r3, [sp, #8]
 8005ab2:	065a      	lsls	r2, r3, #25
 8005ab4:	f140 8297 	bpl.w	8005fe6 <_vfprintf_r+0xc6e>
 8005ab8:	9908      	ldr	r1, [sp, #32]
 8005aba:	f9b1 6000 	ldrsh.w	r6, [r1]
 8005abe:	3104      	adds	r1, #4
 8005ac0:	17f7      	asrs	r7, r6, #31
 8005ac2:	4632      	mov	r2, r6
 8005ac4:	463b      	mov	r3, r7
 8005ac6:	9108      	str	r1, [sp, #32]
 8005ac8:	e757      	b.n	800597a <_vfprintf_r+0x602>
 8005aca:	9902      	ldr	r1, [sp, #8]
 8005acc:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8005ad0:	9102      	str	r1, [sp, #8]
 8005ad2:	781d      	ldrb	r5, [r3, #0]
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	e4c0      	b.n	800545a <_vfprintf_r+0xe2>
 8005ad8:	781d      	ldrb	r5, [r3, #0]
 8005ada:	9902      	ldr	r1, [sp, #8]
 8005adc:	2d6c      	cmp	r5, #108	; 0x6c
 8005ade:	f000 84be 	beq.w	800645e <_vfprintf_r+0x10e6>
 8005ae2:	f041 0110 	orr.w	r1, r1, #16
 8005ae6:	9102      	str	r1, [sp, #8]
 8005ae8:	4619      	mov	r1, r3
 8005aea:	e4b6      	b.n	800545a <_vfprintf_r+0xe2>
 8005aec:	9304      	str	r3, [sp, #16]
 8005aee:	9b02      	ldr	r3, [sp, #8]
 8005af0:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005af4:	069a      	lsls	r2, r3, #26
 8005af6:	f140 83fd 	bpl.w	80062f4 <_vfprintf_r+0xf7c>
 8005afa:	9a08      	ldr	r2, [sp, #32]
 8005afc:	9905      	ldr	r1, [sp, #20]
 8005afe:	6813      	ldr	r3, [r2, #0]
 8005b00:	17cf      	asrs	r7, r1, #31
 8005b02:	4608      	mov	r0, r1
 8005b04:	3204      	adds	r2, #4
 8005b06:	4639      	mov	r1, r7
 8005b08:	9208      	str	r2, [sp, #32]
 8005b0a:	e9c3 0100 	strd	r0, r1, [r3]
 8005b0e:	e474      	b.n	80053fa <_vfprintf_r+0x82>
 8005b10:	781d      	ldrb	r5, [r3, #0]
 8005b12:	2d2a      	cmp	r5, #42	; 0x2a
 8005b14:	f103 0101 	add.w	r1, r3, #1
 8005b18:	f000 862a 	beq.w	8006770 <_vfprintf_r+0x13f8>
 8005b1c:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8005b20:	2809      	cmp	r0, #9
 8005b22:	460b      	mov	r3, r1
 8005b24:	f04f 0600 	mov.w	r6, #0
 8005b28:	f63f ac98 	bhi.w	800545c <_vfprintf_r+0xe4>
 8005b2c:	f813 5b01 	ldrb.w	r5, [r3], #1
 8005b30:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8005b34:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8005b38:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8005b3c:	2809      	cmp	r0, #9
 8005b3e:	d9f5      	bls.n	8005b2c <_vfprintf_r+0x7b4>
 8005b40:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 8005b44:	e48a      	b.n	800545c <_vfprintf_r+0xe4>
 8005b46:	9304      	str	r3, [sp, #16]
 8005b48:	9b02      	ldr	r3, [sp, #8]
 8005b4a:	f043 0310 	orr.w	r3, r3, #16
 8005b4e:	9302      	str	r3, [sp, #8]
 8005b50:	9b02      	ldr	r3, [sp, #8]
 8005b52:	f013 0320 	ands.w	r3, r3, #32
 8005b56:	46b2      	mov	sl, r6
 8005b58:	f47f ae8d 	bne.w	8005876 <_vfprintf_r+0x4fe>
 8005b5c:	9a02      	ldr	r2, [sp, #8]
 8005b5e:	f012 0210 	ands.w	r2, r2, #16
 8005b62:	f040 8238 	bne.w	8005fd6 <_vfprintf_r+0xc5e>
 8005b66:	9b02      	ldr	r3, [sp, #8]
 8005b68:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8005b6c:	f000 8233 	beq.w	8005fd6 <_vfprintf_r+0xc5e>
 8005b70:	9908      	ldr	r1, [sp, #32]
 8005b72:	4613      	mov	r3, r2
 8005b74:	460a      	mov	r2, r1
 8005b76:	3204      	adds	r2, #4
 8005b78:	880e      	ldrh	r6, [r1, #0]
 8005b7a:	9208      	str	r2, [sp, #32]
 8005b7c:	2700      	movs	r7, #0
 8005b7e:	e51f      	b.n	80055c0 <_vfprintf_r+0x248>
 8005b80:	9304      	str	r3, [sp, #16]
 8005b82:	4b34      	ldr	r3, [pc, #208]	; (8005c54 <_vfprintf_r+0x8dc>)
 8005b84:	9310      	str	r3, [sp, #64]	; 0x40
 8005b86:	9b02      	ldr	r3, [sp, #8]
 8005b88:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005b8c:	0699      	lsls	r1, r3, #26
 8005b8e:	46b2      	mov	sl, r6
 8005b90:	f53f aeab 	bmi.w	80058ea <_vfprintf_r+0x572>
 8005b94:	9b02      	ldr	r3, [sp, #8]
 8005b96:	06da      	lsls	r2, r3, #27
 8005b98:	f140 83d1 	bpl.w	800633e <_vfprintf_r+0xfc6>
 8005b9c:	9a08      	ldr	r2, [sp, #32]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	3304      	adds	r3, #4
 8005ba2:	6816      	ldr	r6, [r2, #0]
 8005ba4:	9308      	str	r3, [sp, #32]
 8005ba6:	2700      	movs	r7, #0
 8005ba8:	e6a8      	b.n	80058fc <_vfprintf_r+0x584>
 8005baa:	9908      	ldr	r1, [sp, #32]
 8005bac:	9304      	str	r3, [sp, #16]
 8005bae:	680a      	ldr	r2, [r1, #0]
 8005bb0:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	3104      	adds	r1, #4
 8005bba:	469c      	mov	ip, r3
 8005bbc:	9203      	str	r2, [sp, #12]
 8005bbe:	9108      	str	r1, [sp, #32]
 8005bc0:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8005bc4:	ab22      	add	r3, sp, #136	; 0x88
 8005bc6:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8005bca:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8005bce:	9207      	str	r2, [sp, #28]
 8005bd0:	930a      	str	r3, [sp, #40]	; 0x28
 8005bd2:	e535      	b.n	8005640 <_vfprintf_r+0x2c8>
 8005bd4:	9304      	str	r3, [sp, #16]
 8005bd6:	9b02      	ldr	r3, [sp, #8]
 8005bd8:	f043 0310 	orr.w	r3, r3, #16
 8005bdc:	9302      	str	r3, [sp, #8]
 8005bde:	9b02      	ldr	r3, [sp, #8]
 8005be0:	46b2      	mov	sl, r6
 8005be2:	069e      	lsls	r6, r3, #26
 8005be4:	f53f ace2 	bmi.w	80055ac <_vfprintf_r+0x234>
 8005be8:	9b02      	ldr	r3, [sp, #8]
 8005bea:	06d8      	lsls	r0, r3, #27
 8005bec:	f140 8399 	bpl.w	8006322 <_vfprintf_r+0xfaa>
 8005bf0:	9a08      	ldr	r2, [sp, #32]
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	3204      	adds	r2, #4
 8005bf6:	681e      	ldr	r6, [r3, #0]
 8005bf8:	9208      	str	r2, [sp, #32]
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	2700      	movs	r7, #0
 8005bfe:	e4df      	b.n	80055c0 <_vfprintf_r+0x248>
 8005c00:	9304      	str	r3, [sp, #16]
 8005c02:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005c06:	2d00      	cmp	r5, #0
 8005c08:	f43f acaf 	beq.w	800556a <_vfprintf_r+0x1f2>
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	2201      	movs	r2, #1
 8005c10:	469c      	mov	ip, r3
 8005c12:	9203      	str	r2, [sp, #12]
 8005c14:	f88d 5088 	strb.w	r5, [sp, #136]	; 0x88
 8005c18:	e7d2      	b.n	8005bc0 <_vfprintf_r+0x848>
 8005c1a:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8005c1e:	e55b      	b.n	80056d8 <_vfprintf_r+0x360>
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	f47f ace5 	bne.w	80055f0 <_vfprintf_r+0x278>
 8005c26:	2f00      	cmp	r7, #0
 8005c28:	bf08      	it	eq
 8005c2a:	2e0a      	cmpeq	r6, #10
 8005c2c:	f080 81ff 	bcs.w	800602e <_vfprintf_r+0xcb6>
 8005c30:	f10d 0bf0 	add.w	fp, sp, #240	; 0xf0
 8005c34:	3630      	adds	r6, #48	; 0x30
 8005c36:	f80b 6d41 	strb.w	r6, [fp, #-65]!
 8005c3a:	ab2c      	add	r3, sp, #176	; 0xb0
 8005c3c:	ebcb 0303 	rsb	r3, fp, r3
 8005c40:	9307      	str	r3, [sp, #28]
 8005c42:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8005c46:	e4ed      	b.n	8005624 <_vfprintf_r+0x2ac>
 8005c48:	08019010 	.word	0x08019010
 8005c4c:	0801900c 	.word	0x0801900c
 8005c50:	08019030 	.word	0x08019030
 8005c54:	0801901c 	.word	0x0801901c
 8005c58:	2d65      	cmp	r5, #101	; 0x65
 8005c5a:	f340 808a 	ble.w	8005d72 <_vfprintf_r+0x9fa>
 8005c5e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005c62:	2200      	movs	r2, #0
 8005c64:	2300      	movs	r3, #0
 8005c66:	f7fa ffc7 	bl	8000bf8 <__aeabi_dcmpeq>
 8005c6a:	2800      	cmp	r0, #0
 8005c6c:	f000 8131 	beq.w	8005ed2 <_vfprintf_r+0xb5a>
 8005c70:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005c72:	4aae      	ldr	r2, [pc, #696]	; (8005f2c <_vfprintf_r+0xbb4>)
 8005c74:	6022      	str	r2, [r4, #0]
 8005c76:	3301      	adds	r3, #1
 8005c78:	f10b 0b01 	add.w	fp, fp, #1
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	2b07      	cmp	r3, #7
 8005c80:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8005c84:	9320      	str	r3, [sp, #128]	; 0x80
 8005c86:	6062      	str	r2, [r4, #4]
 8005c88:	f300 8372 	bgt.w	8006370 <_vfprintf_r+0xff8>
 8005c8c:	3408      	adds	r4, #8
 8005c8e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c92:	4293      	cmp	r3, r2
 8005c94:	db03      	blt.n	8005c9e <_vfprintf_r+0x926>
 8005c96:	9b02      	ldr	r3, [sp, #8]
 8005c98:	07df      	lsls	r7, r3, #31
 8005c9a:	f57f ad90 	bpl.w	80057be <_vfprintf_r+0x446>
 8005c9e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005ca0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005ca2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005ca4:	6022      	str	r2, [r4, #0]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	448b      	add	fp, r1
 8005caa:	2b07      	cmp	r3, #7
 8005cac:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8005cb0:	6061      	str	r1, [r4, #4]
 8005cb2:	9320      	str	r3, [sp, #128]	; 0x80
 8005cb4:	f300 83e1 	bgt.w	800647a <_vfprintf_r+0x1102>
 8005cb8:	3408      	adds	r4, #8
 8005cba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cbc:	1e5d      	subs	r5, r3, #1
 8005cbe:	2d00      	cmp	r5, #0
 8005cc0:	f77f ad7d 	ble.w	80057be <_vfprintf_r+0x446>
 8005cc4:	2d10      	cmp	r5, #16
 8005cc6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005cc8:	4f99      	ldr	r7, [pc, #612]	; (8005f30 <_vfprintf_r+0xbb8>)
 8005cca:	f340 8196 	ble.w	8005ffa <_vfprintf_r+0xc82>
 8005cce:	2610      	movs	r6, #16
 8005cd0:	465a      	mov	r2, fp
 8005cd2:	e004      	b.n	8005cde <_vfprintf_r+0x966>
 8005cd4:	3408      	adds	r4, #8
 8005cd6:	3d10      	subs	r5, #16
 8005cd8:	2d10      	cmp	r5, #16
 8005cda:	f340 818d 	ble.w	8005ff8 <_vfprintf_r+0xc80>
 8005cde:	3301      	adds	r3, #1
 8005ce0:	3210      	adds	r2, #16
 8005ce2:	2b07      	cmp	r3, #7
 8005ce4:	9221      	str	r2, [sp, #132]	; 0x84
 8005ce6:	9320      	str	r3, [sp, #128]	; 0x80
 8005ce8:	6027      	str	r7, [r4, #0]
 8005cea:	6066      	str	r6, [r4, #4]
 8005cec:	ddf2      	ble.n	8005cd4 <_vfprintf_r+0x95c>
 8005cee:	4640      	mov	r0, r8
 8005cf0:	4649      	mov	r1, r9
 8005cf2:	aa1f      	add	r2, sp, #124	; 0x7c
 8005cf4:	f003 fbb4 	bl	8009460 <__sprint_r>
 8005cf8:	2800      	cmp	r0, #0
 8005cfa:	f47f ac3d 	bne.w	8005578 <_vfprintf_r+0x200>
 8005cfe:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005d00:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005d02:	ac2c      	add	r4, sp, #176	; 0xb0
 8005d04:	e7e7      	b.n	8005cd6 <_vfprintf_r+0x95e>
 8005d06:	9b06      	ldr	r3, [sp, #24]
 8005d08:	9a03      	ldr	r2, [sp, #12]
 8005d0a:	1a9e      	subs	r6, r3, r2
 8005d0c:	2e00      	cmp	r6, #0
 8005d0e:	f77f ad0a 	ble.w	8005726 <_vfprintf_r+0x3ae>
 8005d12:	2e10      	cmp	r6, #16
 8005d14:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005d16:	4f86      	ldr	r7, [pc, #536]	; (8005f30 <_vfprintf_r+0xbb8>)
 8005d18:	dd1f      	ble.n	8005d5a <_vfprintf_r+0x9e2>
 8005d1a:	f04f 0a10 	mov.w	sl, #16
 8005d1e:	465b      	mov	r3, fp
 8005d20:	e004      	b.n	8005d2c <_vfprintf_r+0x9b4>
 8005d22:	3e10      	subs	r6, #16
 8005d24:	2e10      	cmp	r6, #16
 8005d26:	f104 0408 	add.w	r4, r4, #8
 8005d2a:	dd15      	ble.n	8005d58 <_vfprintf_r+0x9e0>
 8005d2c:	3201      	adds	r2, #1
 8005d2e:	3310      	adds	r3, #16
 8005d30:	2a07      	cmp	r2, #7
 8005d32:	9321      	str	r3, [sp, #132]	; 0x84
 8005d34:	9220      	str	r2, [sp, #128]	; 0x80
 8005d36:	e884 0480 	stmia.w	r4, {r7, sl}
 8005d3a:	ddf2      	ble.n	8005d22 <_vfprintf_r+0x9aa>
 8005d3c:	4640      	mov	r0, r8
 8005d3e:	4649      	mov	r1, r9
 8005d40:	aa1f      	add	r2, sp, #124	; 0x7c
 8005d42:	f003 fb8d 	bl	8009460 <__sprint_r>
 8005d46:	2800      	cmp	r0, #0
 8005d48:	f47f ac16 	bne.w	8005578 <_vfprintf_r+0x200>
 8005d4c:	3e10      	subs	r6, #16
 8005d4e:	2e10      	cmp	r6, #16
 8005d50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d52:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005d54:	ac2c      	add	r4, sp, #176	; 0xb0
 8005d56:	dce9      	bgt.n	8005d2c <_vfprintf_r+0x9b4>
 8005d58:	469b      	mov	fp, r3
 8005d5a:	3201      	adds	r2, #1
 8005d5c:	44b3      	add	fp, r6
 8005d5e:	2a07      	cmp	r2, #7
 8005d60:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8005d64:	9220      	str	r2, [sp, #128]	; 0x80
 8005d66:	6027      	str	r7, [r4, #0]
 8005d68:	6066      	str	r6, [r4, #4]
 8005d6a:	f300 821a 	bgt.w	80061a2 <_vfprintf_r+0xe2a>
 8005d6e:	3408      	adds	r4, #8
 8005d70:	e4d9      	b.n	8005726 <_vfprintf_r+0x3ae>
 8005d72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d74:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	f340 81d5 	ble.w	8006126 <_vfprintf_r+0xdae>
 8005d7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d7e:	6023      	str	r3, [r4, #0]
 8005d80:	3501      	adds	r5, #1
 8005d82:	f10b 0601 	add.w	r6, fp, #1
 8005d86:	2301      	movs	r3, #1
 8005d88:	2d07      	cmp	r5, #7
 8005d8a:	9621      	str	r6, [sp, #132]	; 0x84
 8005d8c:	9520      	str	r5, [sp, #128]	; 0x80
 8005d8e:	6063      	str	r3, [r4, #4]
 8005d90:	f300 81e5 	bgt.w	800615e <_vfprintf_r+0xde6>
 8005d94:	3408      	adds	r4, #8
 8005d96:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005d98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d9a:	6023      	str	r3, [r4, #0]
 8005d9c:	3501      	adds	r5, #1
 8005d9e:	4416      	add	r6, r2
 8005da0:	2d07      	cmp	r5, #7
 8005da2:	9621      	str	r6, [sp, #132]	; 0x84
 8005da4:	9520      	str	r5, [sp, #128]	; 0x80
 8005da6:	6062      	str	r2, [r4, #4]
 8005da8:	f300 81ef 	bgt.w	800618a <_vfprintf_r+0xe12>
 8005dac:	3408      	adds	r4, #8
 8005dae:	2300      	movs	r3, #0
 8005db0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005db4:	2200      	movs	r2, #0
 8005db6:	f7fa ff1f 	bl	8000bf8 <__aeabi_dcmpeq>
 8005dba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005dbc:	2800      	cmp	r0, #0
 8005dbe:	f040 80e1 	bne.w	8005f84 <_vfprintf_r+0xc0c>
 8005dc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	3501      	adds	r5, #1
 8005dc8:	3201      	adds	r2, #1
 8005dca:	441e      	add	r6, r3
 8005dcc:	2d07      	cmp	r5, #7
 8005dce:	9520      	str	r5, [sp, #128]	; 0x80
 8005dd0:	9621      	str	r6, [sp, #132]	; 0x84
 8005dd2:	6022      	str	r2, [r4, #0]
 8005dd4:	6063      	str	r3, [r4, #4]
 8005dd6:	f300 81b6 	bgt.w	8006146 <_vfprintf_r+0xdce>
 8005dda:	3408      	adds	r4, #8
 8005ddc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005dde:	6062      	str	r2, [r4, #4]
 8005de0:	3501      	adds	r5, #1
 8005de2:	eb06 0b02 	add.w	fp, r6, r2
 8005de6:	ab1b      	add	r3, sp, #108	; 0x6c
 8005de8:	2d07      	cmp	r5, #7
 8005dea:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8005dee:	9520      	str	r5, [sp, #128]	; 0x80
 8005df0:	6023      	str	r3, [r4, #0]
 8005df2:	f77f ace3 	ble.w	80057bc <_vfprintf_r+0x444>
 8005df6:	4640      	mov	r0, r8
 8005df8:	4649      	mov	r1, r9
 8005dfa:	aa1f      	add	r2, sp, #124	; 0x7c
 8005dfc:	f003 fb30 	bl	8009460 <__sprint_r>
 8005e00:	2800      	cmp	r0, #0
 8005e02:	f47f abb9 	bne.w	8005578 <_vfprintf_r+0x200>
 8005e06:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8005e0a:	ac2c      	add	r4, sp, #176	; 0xb0
 8005e0c:	e4d7      	b.n	80057be <_vfprintf_r+0x446>
 8005e0e:	4640      	mov	r0, r8
 8005e10:	4649      	mov	r1, r9
 8005e12:	aa1f      	add	r2, sp, #124	; 0x7c
 8005e14:	f003 fb24 	bl	8009460 <__sprint_r>
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	f43f ad1a 	beq.w	8005852 <_vfprintf_r+0x4da>
 8005e1e:	f7ff bbab 	b.w	8005578 <_vfprintf_r+0x200>
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d133      	bne.n	8005e8e <_vfprintf_r+0xb16>
 8005e26:	9b02      	ldr	r3, [sp, #8]
 8005e28:	07da      	lsls	r2, r3, #31
 8005e2a:	d530      	bpl.n	8005e8e <_vfprintf_r+0xb16>
 8005e2c:	f10d 0bf0 	add.w	fp, sp, #240	; 0xf0
 8005e30:	2330      	movs	r3, #48	; 0x30
 8005e32:	f80b 3d41 	strb.w	r3, [fp, #-65]!
 8005e36:	ab2c      	add	r3, sp, #176	; 0xb0
 8005e38:	ebcb 0303 	rsb	r3, fp, r3
 8005e3c:	9307      	str	r3, [sp, #28]
 8005e3e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8005e42:	f7ff bbef 	b.w	8005624 <_vfprintf_r+0x2ac>
 8005e46:	4640      	mov	r0, r8
 8005e48:	4649      	mov	r1, r9
 8005e4a:	aa1f      	add	r2, sp, #124	; 0x7c
 8005e4c:	f003 fb08 	bl	8009460 <__sprint_r>
 8005e50:	2800      	cmp	r0, #0
 8005e52:	f47f ab91 	bne.w	8005578 <_vfprintf_r+0x200>
 8005e56:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8005e5a:	ac2c      	add	r4, sp, #176	; 0xb0
 8005e5c:	e49d      	b.n	800579a <_vfprintf_r+0x422>
 8005e5e:	4640      	mov	r0, r8
 8005e60:	4649      	mov	r1, r9
 8005e62:	aa1f      	add	r2, sp, #124	; 0x7c
 8005e64:	f003 fafc 	bl	8009460 <__sprint_r>
 8005e68:	2800      	cmp	r0, #0
 8005e6a:	f47f ab85 	bne.w	8005578 <_vfprintf_r+0x200>
 8005e6e:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8005e72:	ac2c      	add	r4, sp, #176	; 0xb0
 8005e74:	e443      	b.n	80056fe <_vfprintf_r+0x386>
 8005e76:	4640      	mov	r0, r8
 8005e78:	4649      	mov	r1, r9
 8005e7a:	aa1f      	add	r2, sp, #124	; 0x7c
 8005e7c:	f003 faf0 	bl	8009460 <__sprint_r>
 8005e80:	2800      	cmp	r0, #0
 8005e82:	f47f ab79 	bne.w	8005578 <_vfprintf_r+0x200>
 8005e86:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8005e8a:	ac2c      	add	r4, sp, #176	; 0xb0
 8005e8c:	e448      	b.n	8005720 <_vfprintf_r+0x3a8>
 8005e8e:	ab2c      	add	r3, sp, #176	; 0xb0
 8005e90:	f8cd a01c 	str.w	sl, [sp, #28]
 8005e94:	930a      	str	r3, [sp, #40]	; 0x28
 8005e96:	f7ff bbc5 	b.w	8005624 <_vfprintf_r+0x2ac>
 8005e9a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005e9c:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
 8005ea0:	0933      	lsrs	r3, r6, #4
 8005ea2:	f006 010f 	and.w	r1, r6, #15
 8005ea6:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8005eaa:	093a      	lsrs	r2, r7, #4
 8005eac:	461e      	mov	r6, r3
 8005eae:	4617      	mov	r7, r2
 8005eb0:	5c43      	ldrb	r3, [r0, r1]
 8005eb2:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 8005eb6:	ea56 0307 	orrs.w	r3, r6, r7
 8005eba:	d1f1      	bne.n	8005ea0 <_vfprintf_r+0xb28>
 8005ebc:	465a      	mov	r2, fp
 8005ebe:	ab2c      	add	r3, sp, #176	; 0xb0
 8005ec0:	1a9b      	subs	r3, r3, r2
 8005ec2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8005ec6:	9307      	str	r3, [sp, #28]
 8005ec8:	f7ff bbac 	b.w	8005624 <_vfprintf_r+0x2ac>
 8005ecc:	2302      	movs	r3, #2
 8005ece:	f7ff bb77 	b.w	80055c0 <_vfprintf_r+0x248>
 8005ed2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8005ed4:	2d00      	cmp	r5, #0
 8005ed6:	f340 8257 	ble.w	8006388 <_vfprintf_r+0x1010>
 8005eda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005edc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005ede:	428a      	cmp	r2, r1
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	bfa8      	it	ge
 8005ee4:	460b      	movge	r3, r1
 8005ee6:	461d      	mov	r5, r3
 8005ee8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005eea:	2d00      	cmp	r5, #0
 8005eec:	eb01 0a02 	add.w	sl, r1, r2
 8005ef0:	dd0b      	ble.n	8005f0a <_vfprintf_r+0xb92>
 8005ef2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005ef4:	6021      	str	r1, [r4, #0]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	44ab      	add	fp, r5
 8005efa:	2b07      	cmp	r3, #7
 8005efc:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8005f00:	6065      	str	r5, [r4, #4]
 8005f02:	9320      	str	r3, [sp, #128]	; 0x80
 8005f04:	f300 8309 	bgt.w	800651a <_vfprintf_r+0x11a2>
 8005f08:	3408      	adds	r4, #8
 8005f0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f0c:	2d00      	cmp	r5, #0
 8005f0e:	bfa8      	it	ge
 8005f10:	1b5b      	subge	r3, r3, r5
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	461d      	mov	r5, r3
 8005f16:	f340 80b0 	ble.w	800607a <_vfprintf_r+0xd02>
 8005f1a:	2d10      	cmp	r5, #16
 8005f1c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005f1e:	4f04      	ldr	r7, [pc, #16]	; (8005f30 <_vfprintf_r+0xbb8>)
 8005f20:	f340 821a 	ble.w	8006358 <_vfprintf_r+0xfe0>
 8005f24:	2610      	movs	r6, #16
 8005f26:	465a      	mov	r2, fp
 8005f28:	e009      	b.n	8005f3e <_vfprintf_r+0xbc6>
 8005f2a:	bf00      	nop
 8005f2c:	0801904c 	.word	0x0801904c
 8005f30:	08018ffc 	.word	0x08018ffc
 8005f34:	3408      	adds	r4, #8
 8005f36:	3d10      	subs	r5, #16
 8005f38:	2d10      	cmp	r5, #16
 8005f3a:	f340 820c 	ble.w	8006356 <_vfprintf_r+0xfde>
 8005f3e:	3301      	adds	r3, #1
 8005f40:	3210      	adds	r2, #16
 8005f42:	2b07      	cmp	r3, #7
 8005f44:	9221      	str	r2, [sp, #132]	; 0x84
 8005f46:	9320      	str	r3, [sp, #128]	; 0x80
 8005f48:	6027      	str	r7, [r4, #0]
 8005f4a:	6066      	str	r6, [r4, #4]
 8005f4c:	ddf2      	ble.n	8005f34 <_vfprintf_r+0xbbc>
 8005f4e:	4640      	mov	r0, r8
 8005f50:	4649      	mov	r1, r9
 8005f52:	aa1f      	add	r2, sp, #124	; 0x7c
 8005f54:	f003 fa84 	bl	8009460 <__sprint_r>
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	f47f ab0d 	bne.w	8005578 <_vfprintf_r+0x200>
 8005f5e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005f60:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005f62:	ac2c      	add	r4, sp, #176	; 0xb0
 8005f64:	e7e7      	b.n	8005f36 <_vfprintf_r+0xbbe>
 8005f66:	4640      	mov	r0, r8
 8005f68:	4649      	mov	r1, r9
 8005f6a:	aa1f      	add	r2, sp, #124	; 0x7c
 8005f6c:	f003 fa78 	bl	8009460 <__sprint_r>
 8005f70:	2800      	cmp	r0, #0
 8005f72:	f47f ab01 	bne.w	8005578 <_vfprintf_r+0x200>
 8005f76:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 8005f7a:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8005f7e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005f80:	f7ff bbaa 	b.w	80056d8 <_vfprintf_r+0x360>
 8005f84:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8005f88:	f1ba 0f00 	cmp.w	sl, #0
 8005f8c:	f77f af26 	ble.w	8005ddc <_vfprintf_r+0xa64>
 8005f90:	f1ba 0f10 	cmp.w	sl, #16
 8005f94:	4f8f      	ldr	r7, [pc, #572]	; (80061d4 <_vfprintf_r+0xe5c>)
 8005f96:	bfc8      	it	gt
 8005f98:	f04f 0b10 	movgt.w	fp, #16
 8005f9c:	dc07      	bgt.n	8005fae <_vfprintf_r+0xc36>
 8005f9e:	e0ea      	b.n	8006176 <_vfprintf_r+0xdfe>
 8005fa0:	3408      	adds	r4, #8
 8005fa2:	f1aa 0a10 	sub.w	sl, sl, #16
 8005fa6:	f1ba 0f10 	cmp.w	sl, #16
 8005faa:	f340 80e4 	ble.w	8006176 <_vfprintf_r+0xdfe>
 8005fae:	3501      	adds	r5, #1
 8005fb0:	3610      	adds	r6, #16
 8005fb2:	2d07      	cmp	r5, #7
 8005fb4:	9621      	str	r6, [sp, #132]	; 0x84
 8005fb6:	9520      	str	r5, [sp, #128]	; 0x80
 8005fb8:	e884 0880 	stmia.w	r4, {r7, fp}
 8005fbc:	ddf0      	ble.n	8005fa0 <_vfprintf_r+0xc28>
 8005fbe:	4640      	mov	r0, r8
 8005fc0:	4649      	mov	r1, r9
 8005fc2:	aa1f      	add	r2, sp, #124	; 0x7c
 8005fc4:	f003 fa4c 	bl	8009460 <__sprint_r>
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	f47f aad5 	bne.w	8005578 <_vfprintf_r+0x200>
 8005fce:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8005fd0:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8005fd2:	ac2c      	add	r4, sp, #176	; 0xb0
 8005fd4:	e7e5      	b.n	8005fa2 <_vfprintf_r+0xc2a>
 8005fd6:	9908      	ldr	r1, [sp, #32]
 8005fd8:	460a      	mov	r2, r1
 8005fda:	3204      	adds	r2, #4
 8005fdc:	680e      	ldr	r6, [r1, #0]
 8005fde:	9208      	str	r2, [sp, #32]
 8005fe0:	2700      	movs	r7, #0
 8005fe2:	f7ff baed 	b.w	80055c0 <_vfprintf_r+0x248>
 8005fe6:	9a08      	ldr	r2, [sp, #32]
 8005fe8:	6816      	ldr	r6, [r2, #0]
 8005fea:	4613      	mov	r3, r2
 8005fec:	3304      	adds	r3, #4
 8005fee:	17f7      	asrs	r7, r6, #31
 8005ff0:	9308      	str	r3, [sp, #32]
 8005ff2:	4632      	mov	r2, r6
 8005ff4:	463b      	mov	r3, r7
 8005ff6:	e4c0      	b.n	800597a <_vfprintf_r+0x602>
 8005ff8:	4693      	mov	fp, r2
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	44ab      	add	fp, r5
 8005ffe:	2b07      	cmp	r3, #7
 8006000:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8006004:	9320      	str	r3, [sp, #128]	; 0x80
 8006006:	6027      	str	r7, [r4, #0]
 8006008:	6065      	str	r5, [r4, #4]
 800600a:	f77f abd7 	ble.w	80057bc <_vfprintf_r+0x444>
 800600e:	e6f2      	b.n	8005df6 <_vfprintf_r+0xa7e>
 8006010:	2b30      	cmp	r3, #48	; 0x30
 8006012:	f000 823e 	beq.w	8006492 <_vfprintf_r+0x111a>
 8006016:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006018:	3b01      	subs	r3, #1
 800601a:	461a      	mov	r2, r3
 800601c:	a82c      	add	r0, sp, #176	; 0xb0
 800601e:	930a      	str	r3, [sp, #40]	; 0x28
 8006020:	1a82      	subs	r2, r0, r2
 8006022:	2330      	movs	r3, #48	; 0x30
 8006024:	9207      	str	r2, [sp, #28]
 8006026:	f801 3c01 	strb.w	r3, [r1, #-1]
 800602a:	f7ff bafb 	b.w	8005624 <_vfprintf_r+0x2ac>
 800602e:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
 8006032:	f8cd c00c 	str.w	ip, [sp, #12]
 8006036:	4630      	mov	r0, r6
 8006038:	4639      	mov	r1, r7
 800603a:	220a      	movs	r2, #10
 800603c:	2300      	movs	r3, #0
 800603e:	f7fa fe35 	bl	8000cac <__aeabi_uldivmod>
 8006042:	3230      	adds	r2, #48	; 0x30
 8006044:	4630      	mov	r0, r6
 8006046:	4639      	mov	r1, r7
 8006048:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 800604c:	2300      	movs	r3, #0
 800604e:	220a      	movs	r2, #10
 8006050:	f7fa fe2c 	bl	8000cac <__aeabi_uldivmod>
 8006054:	4606      	mov	r6, r0
 8006056:	460f      	mov	r7, r1
 8006058:	ea56 0307 	orrs.w	r3, r6, r7
 800605c:	d1eb      	bne.n	8006036 <_vfprintf_r+0xcbe>
 800605e:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006062:	e72b      	b.n	8005ebc <_vfprintf_r+0xb44>
 8006064:	4640      	mov	r0, r8
 8006066:	4649      	mov	r1, r9
 8006068:	aa1f      	add	r2, sp, #124	; 0x7c
 800606a:	f003 f9f9 	bl	8009460 <__sprint_r>
 800606e:	2800      	cmp	r0, #0
 8006070:	f47f aa82 	bne.w	8005578 <_vfprintf_r+0x200>
 8006074:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8006078:	ac2c      	add	r4, sp, #176	; 0xb0
 800607a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800607c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800607e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006080:	440a      	add	r2, r1
 8006082:	4616      	mov	r6, r2
 8006084:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006086:	4293      	cmp	r3, r2
 8006088:	db3e      	blt.n	8006108 <_vfprintf_r+0xd90>
 800608a:	9a02      	ldr	r2, [sp, #8]
 800608c:	07d5      	lsls	r5, r2, #31
 800608e:	d43b      	bmi.n	8006108 <_vfprintf_r+0xd90>
 8006090:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006092:	ebc6 050a 	rsb	r5, r6, sl
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	429d      	cmp	r5, r3
 800609a:	bfa8      	it	ge
 800609c:	461d      	movge	r5, r3
 800609e:	2d00      	cmp	r5, #0
 80060a0:	462f      	mov	r7, r5
 80060a2:	dd0b      	ble.n	80060bc <_vfprintf_r+0xd44>
 80060a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80060a6:	6026      	str	r6, [r4, #0]
 80060a8:	3201      	adds	r2, #1
 80060aa:	44ab      	add	fp, r5
 80060ac:	2a07      	cmp	r2, #7
 80060ae:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 80060b2:	6065      	str	r5, [r4, #4]
 80060b4:	9220      	str	r2, [sp, #128]	; 0x80
 80060b6:	f300 8266 	bgt.w	8006586 <_vfprintf_r+0x120e>
 80060ba:	3408      	adds	r4, #8
 80060bc:	2f00      	cmp	r7, #0
 80060be:	bfac      	ite	ge
 80060c0:	1bdd      	subge	r5, r3, r7
 80060c2:	461d      	movlt	r5, r3
 80060c4:	2d00      	cmp	r5, #0
 80060c6:	f77f ab7a 	ble.w	80057be <_vfprintf_r+0x446>
 80060ca:	2d10      	cmp	r5, #16
 80060cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80060ce:	4f41      	ldr	r7, [pc, #260]	; (80061d4 <_vfprintf_r+0xe5c>)
 80060d0:	dd93      	ble.n	8005ffa <_vfprintf_r+0xc82>
 80060d2:	2610      	movs	r6, #16
 80060d4:	465a      	mov	r2, fp
 80060d6:	e003      	b.n	80060e0 <_vfprintf_r+0xd68>
 80060d8:	3408      	adds	r4, #8
 80060da:	3d10      	subs	r5, #16
 80060dc:	2d10      	cmp	r5, #16
 80060de:	dd8b      	ble.n	8005ff8 <_vfprintf_r+0xc80>
 80060e0:	3301      	adds	r3, #1
 80060e2:	3210      	adds	r2, #16
 80060e4:	2b07      	cmp	r3, #7
 80060e6:	9221      	str	r2, [sp, #132]	; 0x84
 80060e8:	9320      	str	r3, [sp, #128]	; 0x80
 80060ea:	6027      	str	r7, [r4, #0]
 80060ec:	6066      	str	r6, [r4, #4]
 80060ee:	ddf3      	ble.n	80060d8 <_vfprintf_r+0xd60>
 80060f0:	4640      	mov	r0, r8
 80060f2:	4649      	mov	r1, r9
 80060f4:	aa1f      	add	r2, sp, #124	; 0x7c
 80060f6:	f003 f9b3 	bl	8009460 <__sprint_r>
 80060fa:	2800      	cmp	r0, #0
 80060fc:	f47f aa3c 	bne.w	8005578 <_vfprintf_r+0x200>
 8006100:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006102:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006104:	ac2c      	add	r4, sp, #176	; 0xb0
 8006106:	e7e8      	b.n	80060da <_vfprintf_r+0xd62>
 8006108:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800610a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800610c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800610e:	6021      	str	r1, [r4, #0]
 8006110:	3201      	adds	r2, #1
 8006112:	4483      	add	fp, r0
 8006114:	2a07      	cmp	r2, #7
 8006116:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 800611a:	6060      	str	r0, [r4, #4]
 800611c:	9220      	str	r2, [sp, #128]	; 0x80
 800611e:	f300 8208 	bgt.w	8006532 <_vfprintf_r+0x11ba>
 8006122:	3408      	adds	r4, #8
 8006124:	e7b4      	b.n	8006090 <_vfprintf_r+0xd18>
 8006126:	9b02      	ldr	r3, [sp, #8]
 8006128:	07d8      	lsls	r0, r3, #31
 800612a:	f53f ae27 	bmi.w	8005d7c <_vfprintf_r+0xa04>
 800612e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006130:	6023      	str	r3, [r4, #0]
 8006132:	3501      	adds	r5, #1
 8006134:	f10b 0601 	add.w	r6, fp, #1
 8006138:	2301      	movs	r3, #1
 800613a:	2d07      	cmp	r5, #7
 800613c:	9621      	str	r6, [sp, #132]	; 0x84
 800613e:	9520      	str	r5, [sp, #128]	; 0x80
 8006140:	6063      	str	r3, [r4, #4]
 8006142:	f77f ae4a 	ble.w	8005dda <_vfprintf_r+0xa62>
 8006146:	4640      	mov	r0, r8
 8006148:	4649      	mov	r1, r9
 800614a:	aa1f      	add	r2, sp, #124	; 0x7c
 800614c:	f003 f988 	bl	8009460 <__sprint_r>
 8006150:	2800      	cmp	r0, #0
 8006152:	f47f aa11 	bne.w	8005578 <_vfprintf_r+0x200>
 8006156:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8006158:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800615a:	ac2c      	add	r4, sp, #176	; 0xb0
 800615c:	e63e      	b.n	8005ddc <_vfprintf_r+0xa64>
 800615e:	4640      	mov	r0, r8
 8006160:	4649      	mov	r1, r9
 8006162:	aa1f      	add	r2, sp, #124	; 0x7c
 8006164:	f003 f97c 	bl	8009460 <__sprint_r>
 8006168:	2800      	cmp	r0, #0
 800616a:	f47f aa05 	bne.w	8005578 <_vfprintf_r+0x200>
 800616e:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8006170:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8006172:	ac2c      	add	r4, sp, #176	; 0xb0
 8006174:	e60f      	b.n	8005d96 <_vfprintf_r+0xa1e>
 8006176:	3501      	adds	r5, #1
 8006178:	4456      	add	r6, sl
 800617a:	2d07      	cmp	r5, #7
 800617c:	9621      	str	r6, [sp, #132]	; 0x84
 800617e:	9520      	str	r5, [sp, #128]	; 0x80
 8006180:	e884 0480 	stmia.w	r4, {r7, sl}
 8006184:	f77f ae29 	ble.w	8005dda <_vfprintf_r+0xa62>
 8006188:	e7dd      	b.n	8006146 <_vfprintf_r+0xdce>
 800618a:	4640      	mov	r0, r8
 800618c:	4649      	mov	r1, r9
 800618e:	aa1f      	add	r2, sp, #124	; 0x7c
 8006190:	f003 f966 	bl	8009460 <__sprint_r>
 8006194:	2800      	cmp	r0, #0
 8006196:	f47f a9ef 	bne.w	8005578 <_vfprintf_r+0x200>
 800619a:	9e21      	ldr	r6, [sp, #132]	; 0x84
 800619c:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800619e:	ac2c      	add	r4, sp, #176	; 0xb0
 80061a0:	e605      	b.n	8005dae <_vfprintf_r+0xa36>
 80061a2:	4640      	mov	r0, r8
 80061a4:	4649      	mov	r1, r9
 80061a6:	aa1f      	add	r2, sp, #124	; 0x7c
 80061a8:	f003 f95a 	bl	8009460 <__sprint_r>
 80061ac:	2800      	cmp	r0, #0
 80061ae:	f47f a9e3 	bne.w	8005578 <_vfprintf_r+0x200>
 80061b2:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 80061b6:	ac2c      	add	r4, sp, #176	; 0xb0
 80061b8:	f7ff bab5 	b.w	8005726 <_vfprintf_r+0x3ae>
 80061bc:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 80061c0:	4276      	negs	r6, r6
 80061c2:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80061c6:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
 80061ca:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 80061ce:	2301      	movs	r3, #1
 80061d0:	f7ff b9fc 	b.w	80055cc <_vfprintf_r+0x254>
 80061d4:	08018ffc 	.word	0x08018ffc
 80061d8:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 80061dc:	f003 f894 	bl	8009308 <__fpclassifyd>
 80061e0:	2800      	cmp	r0, #0
 80061e2:	f000 8116 	beq.w	8006412 <_vfprintf_r+0x109a>
 80061e6:	f025 0320 	bic.w	r3, r5, #32
 80061ea:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80061ee:	9303      	str	r3, [sp, #12]
 80061f0:	f000 8260 	beq.w	80066b4 <_vfprintf_r+0x133c>
 80061f4:	2b47      	cmp	r3, #71	; 0x47
 80061f6:	d105      	bne.n	8006204 <_vfprintf_r+0xe8c>
 80061f8:	f1ba 0f00 	cmp.w	sl, #0
 80061fc:	bf14      	ite	ne
 80061fe:	46d3      	movne	fp, sl
 8006200:	f04f 0b01 	moveq.w	fp, #1
 8006204:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006206:	9a02      	ldr	r2, [sp, #8]
 8006208:	2b00      	cmp	r3, #0
 800620a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800620e:	9209      	str	r2, [sp, #36]	; 0x24
 8006210:	f2c0 8260 	blt.w	80066d4 <_vfprintf_r+0x135c>
 8006214:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 8006218:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800621c:	f04f 0a00 	mov.w	sl, #0
 8006220:	2d66      	cmp	r5, #102	; 0x66
 8006222:	f000 815e 	beq.w	80064e2 <_vfprintf_r+0x116a>
 8006226:	2d46      	cmp	r5, #70	; 0x46
 8006228:	f000 815b 	beq.w	80064e2 <_vfprintf_r+0x116a>
 800622c:	9b03      	ldr	r3, [sp, #12]
 800622e:	2b45      	cmp	r3, #69	; 0x45
 8006230:	bf0c      	ite	eq
 8006232:	f10b 0701 	addeq.w	r7, fp, #1
 8006236:	465f      	movne	r7, fp
 8006238:	aa1a      	add	r2, sp, #104	; 0x68
 800623a:	ab1d      	add	r3, sp, #116	; 0x74
 800623c:	e88d 000c 	stmia.w	sp, {r2, r3}
 8006240:	4640      	mov	r0, r8
 8006242:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8006246:	2102      	movs	r1, #2
 8006248:	463a      	mov	r2, r7
 800624a:	ab19      	add	r3, sp, #100	; 0x64
 800624c:	f000 fbec 	bl	8006a28 <_dtoa_r>
 8006250:	2d67      	cmp	r5, #103	; 0x67
 8006252:	900a      	str	r0, [sp, #40]	; 0x28
 8006254:	d002      	beq.n	800625c <_vfprintf_r+0xee4>
 8006256:	2d47      	cmp	r5, #71	; 0x47
 8006258:	f040 8151 	bne.w	80064fe <_vfprintf_r+0x1186>
 800625c:	9b02      	ldr	r3, [sp, #8]
 800625e:	07db      	lsls	r3, r3, #31
 8006260:	f140 8241 	bpl.w	80066e6 <_vfprintf_r+0x136e>
 8006264:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006266:	19de      	adds	r6, r3, r7
 8006268:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800626c:	2200      	movs	r2, #0
 800626e:	2300      	movs	r3, #0
 8006270:	f7fa fcc2 	bl	8000bf8 <__aeabi_dcmpeq>
 8006274:	2800      	cmp	r0, #0
 8006276:	f040 81ad 	bne.w	80065d4 <_vfprintf_r+0x125c>
 800627a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800627c:	429e      	cmp	r6, r3
 800627e:	d906      	bls.n	800628e <_vfprintf_r+0xf16>
 8006280:	2130      	movs	r1, #48	; 0x30
 8006282:	1c5a      	adds	r2, r3, #1
 8006284:	921d      	str	r2, [sp, #116]	; 0x74
 8006286:	7019      	strb	r1, [r3, #0]
 8006288:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800628a:	429e      	cmp	r6, r3
 800628c:	d8f9      	bhi.n	8006282 <_vfprintf_r+0xf0a>
 800628e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006290:	1a9b      	subs	r3, r3, r2
 8006292:	930d      	str	r3, [sp, #52]	; 0x34
 8006294:	9b03      	ldr	r3, [sp, #12]
 8006296:	2b47      	cmp	r3, #71	; 0x47
 8006298:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800629a:	f000 8183 	beq.w	80065a4 <_vfprintf_r+0x122c>
 800629e:	2d65      	cmp	r5, #101	; 0x65
 80062a0:	f340 81a6 	ble.w	80065f0 <_vfprintf_r+0x1278>
 80062a4:	2d66      	cmp	r5, #102	; 0x66
 80062a6:	930c      	str	r3, [sp, #48]	; 0x30
 80062a8:	f000 821f 	beq.w	80066ea <_vfprintf_r+0x1372>
 80062ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80062b0:	4293      	cmp	r3, r2
 80062b2:	f300 8202 	bgt.w	80066ba <_vfprintf_r+0x1342>
 80062b6:	9b02      	ldr	r3, [sp, #8]
 80062b8:	07d9      	lsls	r1, r3, #31
 80062ba:	f100 8239 	bmi.w	8006730 <_vfprintf_r+0x13b8>
 80062be:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80062c2:	9207      	str	r2, [sp, #28]
 80062c4:	f1ba 0f00 	cmp.w	sl, #0
 80062c8:	f040 8179 	bne.w	80065be <_vfprintf_r+0x1246>
 80062cc:	9303      	str	r3, [sp, #12]
 80062ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062d0:	9302      	str	r3, [sp, #8]
 80062d2:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 80062d6:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 80062da:	f7ff b9ab 	b.w	8005634 <_vfprintf_r+0x2bc>
 80062de:	f027 0707 	bic.w	r7, r7, #7
 80062e2:	ed97 7b00 	vldr	d7, [r7]
 80062e6:	f107 0308 	add.w	r3, r7, #8
 80062ea:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80062ee:	9308      	str	r3, [sp, #32]
 80062f0:	f7ff bb63 	b.w	80059ba <_vfprintf_r+0x642>
 80062f4:	9b02      	ldr	r3, [sp, #8]
 80062f6:	06db      	lsls	r3, r3, #27
 80062f8:	d40b      	bmi.n	8006312 <_vfprintf_r+0xf9a>
 80062fa:	9b02      	ldr	r3, [sp, #8]
 80062fc:	065f      	lsls	r7, r3, #25
 80062fe:	d508      	bpl.n	8006312 <_vfprintf_r+0xf9a>
 8006300:	9a08      	ldr	r2, [sp, #32]
 8006302:	6813      	ldr	r3, [r2, #0]
 8006304:	3204      	adds	r2, #4
 8006306:	9208      	str	r2, [sp, #32]
 8006308:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800630c:	801a      	strh	r2, [r3, #0]
 800630e:	f7ff b874 	b.w	80053fa <_vfprintf_r+0x82>
 8006312:	9a08      	ldr	r2, [sp, #32]
 8006314:	6813      	ldr	r3, [r2, #0]
 8006316:	3204      	adds	r2, #4
 8006318:	9208      	str	r2, [sp, #32]
 800631a:	9a05      	ldr	r2, [sp, #20]
 800631c:	601a      	str	r2, [r3, #0]
 800631e:	f7ff b86c 	b.w	80053fa <_vfprintf_r+0x82>
 8006322:	9b02      	ldr	r3, [sp, #8]
 8006324:	9a08      	ldr	r2, [sp, #32]
 8006326:	f013 0f40 	tst.w	r3, #64	; 0x40
 800632a:	4613      	mov	r3, r2
 800632c:	f43f ac62 	beq.w	8005bf4 <_vfprintf_r+0x87c>
 8006330:	8816      	ldrh	r6, [r2, #0]
 8006332:	3204      	adds	r2, #4
 8006334:	2700      	movs	r7, #0
 8006336:	2301      	movs	r3, #1
 8006338:	9208      	str	r2, [sp, #32]
 800633a:	f7ff b941 	b.w	80055c0 <_vfprintf_r+0x248>
 800633e:	9b02      	ldr	r3, [sp, #8]
 8006340:	9a08      	ldr	r2, [sp, #32]
 8006342:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006346:	4613      	mov	r3, r2
 8006348:	d076      	beq.n	8006438 <_vfprintf_r+0x10c0>
 800634a:	3304      	adds	r3, #4
 800634c:	8816      	ldrh	r6, [r2, #0]
 800634e:	9308      	str	r3, [sp, #32]
 8006350:	2700      	movs	r7, #0
 8006352:	f7ff bad3 	b.w	80058fc <_vfprintf_r+0x584>
 8006356:	4693      	mov	fp, r2
 8006358:	3301      	adds	r3, #1
 800635a:	44ab      	add	fp, r5
 800635c:	2b07      	cmp	r3, #7
 800635e:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8006362:	9320      	str	r3, [sp, #128]	; 0x80
 8006364:	6027      	str	r7, [r4, #0]
 8006366:	6065      	str	r5, [r4, #4]
 8006368:	f73f ae7c 	bgt.w	8006064 <_vfprintf_r+0xcec>
 800636c:	3408      	adds	r4, #8
 800636e:	e684      	b.n	800607a <_vfprintf_r+0xd02>
 8006370:	4640      	mov	r0, r8
 8006372:	4649      	mov	r1, r9
 8006374:	aa1f      	add	r2, sp, #124	; 0x7c
 8006376:	f003 f873 	bl	8009460 <__sprint_r>
 800637a:	2800      	cmp	r0, #0
 800637c:	f47f a8fc 	bne.w	8005578 <_vfprintf_r+0x200>
 8006380:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8006384:	ac2c      	add	r4, sp, #176	; 0xb0
 8006386:	e482      	b.n	8005c8e <_vfprintf_r+0x916>
 8006388:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800638a:	4ab0      	ldr	r2, [pc, #704]	; (800664c <_vfprintf_r+0x12d4>)
 800638c:	6022      	str	r2, [r4, #0]
 800638e:	3301      	adds	r3, #1
 8006390:	f10b 0b01 	add.w	fp, fp, #1
 8006394:	2201      	movs	r2, #1
 8006396:	2b07      	cmp	r3, #7
 8006398:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 800639c:	9320      	str	r3, [sp, #128]	; 0x80
 800639e:	6062      	str	r2, [r4, #4]
 80063a0:	dc50      	bgt.n	8006444 <_vfprintf_r+0x10cc>
 80063a2:	3408      	adds	r4, #8
 80063a4:	b92d      	cbnz	r5, 80063b2 <_vfprintf_r+0x103a>
 80063a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063a8:	b91b      	cbnz	r3, 80063b2 <_vfprintf_r+0x103a>
 80063aa:	9b02      	ldr	r3, [sp, #8]
 80063ac:	07de      	lsls	r6, r3, #31
 80063ae:	f57f aa06 	bpl.w	80057be <_vfprintf_r+0x446>
 80063b2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80063b4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80063b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80063b8:	6022      	str	r2, [r4, #0]
 80063ba:	3301      	adds	r3, #1
 80063bc:	eb0b 0201 	add.w	r2, fp, r1
 80063c0:	2b07      	cmp	r3, #7
 80063c2:	9221      	str	r2, [sp, #132]	; 0x84
 80063c4:	6061      	str	r1, [r4, #4]
 80063c6:	9320      	str	r3, [sp, #128]	; 0x80
 80063c8:	f300 8167 	bgt.w	800669a <_vfprintf_r+0x1322>
 80063cc:	3408      	adds	r4, #8
 80063ce:	426d      	negs	r5, r5
 80063d0:	2d00      	cmp	r5, #0
 80063d2:	dd6f      	ble.n	80064b4 <_vfprintf_r+0x113c>
 80063d4:	2d10      	cmp	r5, #16
 80063d6:	4f9e      	ldr	r7, [pc, #632]	; (8006650 <_vfprintf_r+0x12d8>)
 80063d8:	bfc8      	it	gt
 80063da:	2610      	movgt	r6, #16
 80063dc:	dc05      	bgt.n	80063ea <_vfprintf_r+0x1072>
 80063de:	e0b5      	b.n	800654c <_vfprintf_r+0x11d4>
 80063e0:	3408      	adds	r4, #8
 80063e2:	3d10      	subs	r5, #16
 80063e4:	2d10      	cmp	r5, #16
 80063e6:	f340 80b1 	ble.w	800654c <_vfprintf_r+0x11d4>
 80063ea:	3301      	adds	r3, #1
 80063ec:	3210      	adds	r2, #16
 80063ee:	2b07      	cmp	r3, #7
 80063f0:	9221      	str	r2, [sp, #132]	; 0x84
 80063f2:	9320      	str	r3, [sp, #128]	; 0x80
 80063f4:	6027      	str	r7, [r4, #0]
 80063f6:	6066      	str	r6, [r4, #4]
 80063f8:	ddf2      	ble.n	80063e0 <_vfprintf_r+0x1068>
 80063fa:	4640      	mov	r0, r8
 80063fc:	4649      	mov	r1, r9
 80063fe:	aa1f      	add	r2, sp, #124	; 0x7c
 8006400:	f003 f82e 	bl	8009460 <__sprint_r>
 8006404:	2800      	cmp	r0, #0
 8006406:	f47f a8b7 	bne.w	8005578 <_vfprintf_r+0x200>
 800640a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800640c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800640e:	ac2c      	add	r4, sp, #176	; 0xb0
 8006410:	e7e7      	b.n	80063e2 <_vfprintf_r+0x106a>
 8006412:	9e02      	ldr	r6, [sp, #8]
 8006414:	4a8f      	ldr	r2, [pc, #572]	; (8006654 <_vfprintf_r+0x12dc>)
 8006416:	4b90      	ldr	r3, [pc, #576]	; (8006658 <_vfprintf_r+0x12e0>)
 8006418:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 800641c:	900b      	str	r0, [sp, #44]	; 0x2c
 800641e:	2103      	movs	r1, #3
 8006420:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8006424:	2d47      	cmp	r5, #71	; 0x47
 8006426:	bfd8      	it	le
 8006428:	461a      	movle	r2, r3
 800642a:	9103      	str	r1, [sp, #12]
 800642c:	9602      	str	r6, [sp, #8]
 800642e:	900c      	str	r0, [sp, #48]	; 0x30
 8006430:	920a      	str	r2, [sp, #40]	; 0x28
 8006432:	9107      	str	r1, [sp, #28]
 8006434:	f7ff b8fe 	b.w	8005634 <_vfprintf_r+0x2bc>
 8006438:	3304      	adds	r3, #4
 800643a:	6816      	ldr	r6, [r2, #0]
 800643c:	9308      	str	r3, [sp, #32]
 800643e:	2700      	movs	r7, #0
 8006440:	f7ff ba5c 	b.w	80058fc <_vfprintf_r+0x584>
 8006444:	4640      	mov	r0, r8
 8006446:	4649      	mov	r1, r9
 8006448:	aa1f      	add	r2, sp, #124	; 0x7c
 800644a:	f003 f809 	bl	8009460 <__sprint_r>
 800644e:	2800      	cmp	r0, #0
 8006450:	f47f a892 	bne.w	8005578 <_vfprintf_r+0x200>
 8006454:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006456:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 800645a:	ac2c      	add	r4, sp, #176	; 0xb0
 800645c:	e7a2      	b.n	80063a4 <_vfprintf_r+0x102c>
 800645e:	f041 0120 	orr.w	r1, r1, #32
 8006462:	9102      	str	r1, [sp, #8]
 8006464:	785d      	ldrb	r5, [r3, #1]
 8006466:	1c59      	adds	r1, r3, #1
 8006468:	f7fe bff7 	b.w	800545a <_vfprintf_r+0xe2>
 800646c:	9806      	ldr	r0, [sp, #24]
 800646e:	9108      	str	r1, [sp, #32]
 8006470:	4240      	negs	r0, r0
 8006472:	9006      	str	r0, [sp, #24]
 8006474:	4619      	mov	r1, r3
 8006476:	f7ff b9f1 	b.w	800585c <_vfprintf_r+0x4e4>
 800647a:	4640      	mov	r0, r8
 800647c:	4649      	mov	r1, r9
 800647e:	aa1f      	add	r2, sp, #124	; 0x7c
 8006480:	f002 ffee 	bl	8009460 <__sprint_r>
 8006484:	2800      	cmp	r0, #0
 8006486:	f47f a877 	bne.w	8005578 <_vfprintf_r+0x200>
 800648a:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 800648e:	ac2c      	add	r4, sp, #176	; 0xb0
 8006490:	e413      	b.n	8005cba <_vfprintf_r+0x942>
 8006492:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006494:	ab2c      	add	r3, sp, #176	; 0xb0
 8006496:	1a9b      	subs	r3, r3, r2
 8006498:	9307      	str	r3, [sp, #28]
 800649a:	f7ff b8c3 	b.w	8005624 <_vfprintf_r+0x2ac>
 800649e:	4640      	mov	r0, r8
 80064a0:	4649      	mov	r1, r9
 80064a2:	aa1f      	add	r2, sp, #124	; 0x7c
 80064a4:	f002 ffdc 	bl	8009460 <__sprint_r>
 80064a8:	2800      	cmp	r0, #0
 80064aa:	f47f a865 	bne.w	8005578 <_vfprintf_r+0x200>
 80064ae:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80064b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80064b2:	ac2c      	add	r4, sp, #176	; 0xb0
 80064b4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80064b6:	6060      	str	r0, [r4, #4]
 80064b8:	3301      	adds	r3, #1
 80064ba:	eb02 0b00 	add.w	fp, r2, r0
 80064be:	2b07      	cmp	r3, #7
 80064c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064c2:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 80064c6:	9320      	str	r3, [sp, #128]	; 0x80
 80064c8:	6022      	str	r2, [r4, #0]
 80064ca:	f77f a977 	ble.w	80057bc <_vfprintf_r+0x444>
 80064ce:	e492      	b.n	8005df6 <_vfprintf_r+0xa7e>
 80064d0:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80064d4:	f7fe fe46 	bl	8005164 <strlen>
 80064d8:	9708      	str	r7, [sp, #32]
 80064da:	9007      	str	r0, [sp, #28]
 80064dc:	4603      	mov	r3, r0
 80064de:	f7ff b9f2 	b.w	80058c6 <_vfprintf_r+0x54e>
 80064e2:	aa1a      	add	r2, sp, #104	; 0x68
 80064e4:	ab1d      	add	r3, sp, #116	; 0x74
 80064e6:	e88d 000c 	stmia.w	sp, {r2, r3}
 80064ea:	4640      	mov	r0, r8
 80064ec:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 80064f0:	2103      	movs	r1, #3
 80064f2:	465a      	mov	r2, fp
 80064f4:	ab19      	add	r3, sp, #100	; 0x64
 80064f6:	f000 fa97 	bl	8006a28 <_dtoa_r>
 80064fa:	465f      	mov	r7, fp
 80064fc:	900a      	str	r0, [sp, #40]	; 0x28
 80064fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006500:	19de      	adds	r6, r3, r7
 8006502:	9b03      	ldr	r3, [sp, #12]
 8006504:	2b46      	cmp	r3, #70	; 0x46
 8006506:	f47f aeaf 	bne.w	8006268 <_vfprintf_r+0xef0>
 800650a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	2b30      	cmp	r3, #48	; 0x30
 8006510:	f000 8100 	beq.w	8006714 <_vfprintf_r+0x139c>
 8006514:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8006516:	443e      	add	r6, r7
 8006518:	e6a6      	b.n	8006268 <_vfprintf_r+0xef0>
 800651a:	4640      	mov	r0, r8
 800651c:	4649      	mov	r1, r9
 800651e:	aa1f      	add	r2, sp, #124	; 0x7c
 8006520:	f002 ff9e 	bl	8009460 <__sprint_r>
 8006524:	2800      	cmp	r0, #0
 8006526:	f47f a827 	bne.w	8005578 <_vfprintf_r+0x200>
 800652a:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 800652e:	ac2c      	add	r4, sp, #176	; 0xb0
 8006530:	e4eb      	b.n	8005f0a <_vfprintf_r+0xb92>
 8006532:	4640      	mov	r0, r8
 8006534:	4649      	mov	r1, r9
 8006536:	aa1f      	add	r2, sp, #124	; 0x7c
 8006538:	f002 ff92 	bl	8009460 <__sprint_r>
 800653c:	2800      	cmp	r0, #0
 800653e:	f47f a81b 	bne.w	8005578 <_vfprintf_r+0x200>
 8006542:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006544:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8006548:	ac2c      	add	r4, sp, #176	; 0xb0
 800654a:	e5a1      	b.n	8006090 <_vfprintf_r+0xd18>
 800654c:	3301      	adds	r3, #1
 800654e:	442a      	add	r2, r5
 8006550:	2b07      	cmp	r3, #7
 8006552:	9221      	str	r2, [sp, #132]	; 0x84
 8006554:	9320      	str	r3, [sp, #128]	; 0x80
 8006556:	6027      	str	r7, [r4, #0]
 8006558:	6065      	str	r5, [r4, #4]
 800655a:	dca0      	bgt.n	800649e <_vfprintf_r+0x1126>
 800655c:	3408      	adds	r4, #8
 800655e:	e7a9      	b.n	80064b4 <_vfprintf_r+0x113c>
 8006560:	2e06      	cmp	r6, #6
 8006562:	4633      	mov	r3, r6
 8006564:	bf28      	it	cs
 8006566:	2306      	movcs	r3, #6
 8006568:	9307      	str	r3, [sp, #28]
 800656a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800656e:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8006572:	9303      	str	r3, [sp, #12]
 8006574:	4b39      	ldr	r3, [pc, #228]	; (800665c <_vfprintf_r+0x12e4>)
 8006576:	9708      	str	r7, [sp, #32]
 8006578:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800657c:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8006580:	930a      	str	r3, [sp, #40]	; 0x28
 8006582:	f7ff b857 	b.w	8005634 <_vfprintf_r+0x2bc>
 8006586:	4640      	mov	r0, r8
 8006588:	4649      	mov	r1, r9
 800658a:	aa1f      	add	r2, sp, #124	; 0x7c
 800658c:	f002 ff68 	bl	8009460 <__sprint_r>
 8006590:	2800      	cmp	r0, #0
 8006592:	f47e aff1 	bne.w	8005578 <_vfprintf_r+0x200>
 8006596:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006598:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800659a:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	ac2c      	add	r4, sp, #176	; 0xb0
 80065a2:	e58b      	b.n	80060bc <_vfprintf_r+0xd44>
 80065a4:	1cdf      	adds	r7, r3, #3
 80065a6:	db22      	blt.n	80065ee <_vfprintf_r+0x1276>
 80065a8:	459b      	cmp	fp, r3
 80065aa:	db20      	blt.n	80065ee <_vfprintf_r+0x1276>
 80065ac:	930c      	str	r3, [sp, #48]	; 0x30
 80065ae:	2567      	movs	r5, #103	; 0x67
 80065b0:	e67c      	b.n	80062ac <_vfprintf_r+0xf34>
 80065b2:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 80065b6:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
 80065ba:	f7ff ba10 	b.w	80059de <_vfprintf_r+0x666>
 80065be:	9303      	str	r3, [sp, #12]
 80065c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065c2:	9302      	str	r3, [sp, #8]
 80065c4:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 80065c8:	2300      	movs	r3, #0
 80065ca:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
 80065ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80065d0:	f7ff b833 	b.w	800563a <_vfprintf_r+0x2c2>
 80065d4:	4633      	mov	r3, r6
 80065d6:	e65a      	b.n	800628e <_vfprintf_r+0xf16>
 80065d8:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 80065dc:	900b      	str	r0, [sp, #44]	; 0x2c
 80065de:	9708      	str	r7, [sp, #32]
 80065e0:	900c      	str	r0, [sp, #48]	; 0x30
 80065e2:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 80065e6:	9303      	str	r3, [sp, #12]
 80065e8:	9607      	str	r6, [sp, #28]
 80065ea:	f7ff b823 	b.w	8005634 <_vfprintf_r+0x2bc>
 80065ee:	3d02      	subs	r5, #2
 80065f0:	3b01      	subs	r3, #1
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	9319      	str	r3, [sp, #100]	; 0x64
 80065f6:	bfba      	itte	lt
 80065f8:	425b      	neglt	r3, r3
 80065fa:	222d      	movlt	r2, #45	; 0x2d
 80065fc:	222b      	movge	r2, #43	; 0x2b
 80065fe:	2b09      	cmp	r3, #9
 8006600:	f88d 506c 	strb.w	r5, [sp, #108]	; 0x6c
 8006604:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8006608:	f340 8098 	ble.w	800673c <_vfprintf_r+0x13c4>
 800660c:	f10d 067b 	add.w	r6, sp, #123	; 0x7b
 8006610:	4630      	mov	r0, r6
 8006612:	4a13      	ldr	r2, [pc, #76]	; (8006660 <_vfprintf_r+0x12e8>)
 8006614:	fb82 2103 	smull	r2, r1, r2, r3
 8006618:	17da      	asrs	r2, r3, #31
 800661a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 800661e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8006622:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8006626:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800662a:	2a09      	cmp	r2, #9
 800662c:	4613      	mov	r3, r2
 800662e:	f800 1d01 	strb.w	r1, [r0, #-1]!
 8006632:	dcee      	bgt.n	8006612 <_vfprintf_r+0x129a>
 8006634:	4602      	mov	r2, r0
 8006636:	3330      	adds	r3, #48	; 0x30
 8006638:	b2d9      	uxtb	r1, r3
 800663a:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800663e:	4296      	cmp	r6, r2
 8006640:	f240 80a9 	bls.w	8006796 <_vfprintf_r+0x141e>
 8006644:	f10d 026e 	add.w	r2, sp, #110	; 0x6e
 8006648:	4603      	mov	r3, r0
 800664a:	e00d      	b.n	8006668 <_vfprintf_r+0x12f0>
 800664c:	0801904c 	.word	0x0801904c
 8006650:	08018ffc 	.word	0x08018ffc
 8006654:	08019018 	.word	0x08019018
 8006658:	08019014 	.word	0x08019014
 800665c:	08019044 	.word	0x08019044
 8006660:	66666667 	.word	0x66666667
 8006664:	f813 1b01 	ldrb.w	r1, [r3], #1
 8006668:	f802 1b01 	strb.w	r1, [r2], #1
 800666c:	42b3      	cmp	r3, r6
 800666e:	d1f9      	bne.n	8006664 <_vfprintf_r+0x12ec>
 8006670:	ab1f      	add	r3, sp, #124	; 0x7c
 8006672:	1a1b      	subs	r3, r3, r0
 8006674:	f10d 026e 	add.w	r2, sp, #110	; 0x6e
 8006678:	4413      	add	r3, r2
 800667a:	aa1b      	add	r2, sp, #108	; 0x6c
 800667c:	1a9b      	subs	r3, r3, r2
 800667e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006680:	9313      	str	r3, [sp, #76]	; 0x4c
 8006682:	2a01      	cmp	r2, #1
 8006684:	4413      	add	r3, r2
 8006686:	9307      	str	r3, [sp, #28]
 8006688:	dd69      	ble.n	800675e <_vfprintf_r+0x13e6>
 800668a:	9b07      	ldr	r3, [sp, #28]
 800668c:	2200      	movs	r2, #0
 800668e:	3301      	adds	r3, #1
 8006690:	9307      	str	r3, [sp, #28]
 8006692:	920c      	str	r2, [sp, #48]	; 0x30
 8006694:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006698:	e614      	b.n	80062c4 <_vfprintf_r+0xf4c>
 800669a:	4640      	mov	r0, r8
 800669c:	4649      	mov	r1, r9
 800669e:	aa1f      	add	r2, sp, #124	; 0x7c
 80066a0:	f002 fede 	bl	8009460 <__sprint_r>
 80066a4:	2800      	cmp	r0, #0
 80066a6:	f47e af67 	bne.w	8005578 <_vfprintf_r+0x200>
 80066aa:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80066ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80066ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80066b0:	ac2c      	add	r4, sp, #176	; 0xb0
 80066b2:	e68c      	b.n	80063ce <_vfprintf_r+0x1056>
 80066b4:	f04f 0b06 	mov.w	fp, #6
 80066b8:	e5a4      	b.n	8006204 <_vfprintf_r+0xe8c>
 80066ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066bc:	2b00      	cmp	r3, #0
 80066be:	bfd8      	it	le
 80066c0:	f1c3 0602 	rsble	r6, r3, #2
 80066c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066c6:	bfc8      	it	gt
 80066c8:	2601      	movgt	r6, #1
 80066ca:	18f3      	adds	r3, r6, r3
 80066cc:	9307      	str	r3, [sp, #28]
 80066ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80066d2:	e5f7      	b.n	80062c4 <_vfprintf_r+0xf4c>
 80066d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80066d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80066dc:	9014      	str	r0, [sp, #80]	; 0x50
 80066de:	9315      	str	r3, [sp, #84]	; 0x54
 80066e0:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 80066e4:	e59c      	b.n	8006220 <_vfprintf_r+0xea8>
 80066e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80066e8:	e5d1      	b.n	800628e <_vfprintf_r+0xf16>
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	dd2e      	ble.n	800674c <_vfprintf_r+0x13d4>
 80066ee:	f1bb 0f00 	cmp.w	fp, #0
 80066f2:	d107      	bne.n	8006704 <_vfprintf_r+0x138c>
 80066f4:	9b02      	ldr	r3, [sp, #8]
 80066f6:	07de      	lsls	r6, r3, #31
 80066f8:	d404      	bmi.n	8006704 <_vfprintf_r+0x138c>
 80066fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066fc:	9207      	str	r2, [sp, #28]
 80066fe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006702:	e5df      	b.n	80062c4 <_vfprintf_r+0xf4c>
 8006704:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006706:	f10b 0601 	add.w	r6, fp, #1
 800670a:	4433      	add	r3, r6
 800670c:	9307      	str	r3, [sp, #28]
 800670e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006712:	e5d7      	b.n	80062c4 <_vfprintf_r+0xf4c>
 8006714:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8006718:	2200      	movs	r2, #0
 800671a:	2300      	movs	r3, #0
 800671c:	f7fa fa6c 	bl	8000bf8 <__aeabi_dcmpeq>
 8006720:	2800      	cmp	r0, #0
 8006722:	f47f aef7 	bne.w	8006514 <_vfprintf_r+0x119c>
 8006726:	f1c7 0701 	rsb	r7, r7, #1
 800672a:	9719      	str	r7, [sp, #100]	; 0x64
 800672c:	443e      	add	r6, r7
 800672e:	e59b      	b.n	8006268 <_vfprintf_r+0xef0>
 8006730:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006732:	3301      	adds	r3, #1
 8006734:	9307      	str	r3, [sp, #28]
 8006736:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800673a:	e5c3      	b.n	80062c4 <_vfprintf_r+0xf4c>
 800673c:	3330      	adds	r3, #48	; 0x30
 800673e:	2230      	movs	r2, #48	; 0x30
 8006740:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8006744:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8006748:	ab1c      	add	r3, sp, #112	; 0x70
 800674a:	e796      	b.n	800667a <_vfprintf_r+0x1302>
 800674c:	f1bb 0f00 	cmp.w	fp, #0
 8006750:	d11b      	bne.n	800678a <_vfprintf_r+0x1412>
 8006752:	9b02      	ldr	r3, [sp, #8]
 8006754:	07d8      	lsls	r0, r3, #31
 8006756:	d418      	bmi.n	800678a <_vfprintf_r+0x1412>
 8006758:	2301      	movs	r3, #1
 800675a:	9307      	str	r3, [sp, #28]
 800675c:	e5b2      	b.n	80062c4 <_vfprintf_r+0xf4c>
 800675e:	9b02      	ldr	r3, [sp, #8]
 8006760:	f013 0301 	ands.w	r3, r3, #1
 8006764:	d191      	bne.n	800668a <_vfprintf_r+0x1312>
 8006766:	930c      	str	r3, [sp, #48]	; 0x30
 8006768:	9b07      	ldr	r3, [sp, #28]
 800676a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800676e:	e5a9      	b.n	80062c4 <_vfprintf_r+0xf4c>
 8006770:	9d08      	ldr	r5, [sp, #32]
 8006772:	682e      	ldr	r6, [r5, #0]
 8006774:	4628      	mov	r0, r5
 8006776:	3004      	adds	r0, #4
 8006778:	2e00      	cmp	r6, #0
 800677a:	785d      	ldrb	r5, [r3, #1]
 800677c:	9008      	str	r0, [sp, #32]
 800677e:	f6be ae6c 	bge.w	800545a <_vfprintf_r+0xe2>
 8006782:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8006786:	f7fe be68 	b.w	800545a <_vfprintf_r+0xe2>
 800678a:	f10b 0302 	add.w	r3, fp, #2
 800678e:	9307      	str	r3, [sp, #28]
 8006790:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006794:	e596      	b.n	80062c4 <_vfprintf_r+0xf4c>
 8006796:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 800679a:	e76e      	b.n	800667a <_vfprintf_r+0x1302>
 800679c:	f3af 8000 	nop.w

080067a0 <__sbprintf>:
 80067a0:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 80067a4:	460c      	mov	r4, r1
 80067a6:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 80067aa:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 80067ae:	69e7      	ldr	r7, [r4, #28]
 80067b0:	6e49      	ldr	r1, [r1, #100]	; 0x64
 80067b2:	f8b4 900e 	ldrh.w	r9, [r4, #14]
 80067b6:	9119      	str	r1, [sp, #100]	; 0x64
 80067b8:	ad1a      	add	r5, sp, #104	; 0x68
 80067ba:	f44f 6680 	mov.w	r6, #1024	; 0x400
 80067be:	f02e 0e02 	bic.w	lr, lr, #2
 80067c2:	f04f 0c00 	mov.w	ip, #0
 80067c6:	9707      	str	r7, [sp, #28]
 80067c8:	4669      	mov	r1, sp
 80067ca:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80067cc:	9500      	str	r5, [sp, #0]
 80067ce:	9504      	str	r5, [sp, #16]
 80067d0:	9602      	str	r6, [sp, #8]
 80067d2:	9605      	str	r6, [sp, #20]
 80067d4:	f8ad e00c 	strh.w	lr, [sp, #12]
 80067d8:	f8ad 900e 	strh.w	r9, [sp, #14]
 80067dc:	9709      	str	r7, [sp, #36]	; 0x24
 80067de:	f8cd c018 	str.w	ip, [sp, #24]
 80067e2:	4606      	mov	r6, r0
 80067e4:	f7fe fdc8 	bl	8005378 <_vfprintf_r>
 80067e8:	1e05      	subs	r5, r0, #0
 80067ea:	db07      	blt.n	80067fc <__sbprintf+0x5c>
 80067ec:	4630      	mov	r0, r6
 80067ee:	4669      	mov	r1, sp
 80067f0:	f001 f918 	bl	8007a24 <_fflush_r>
 80067f4:	2800      	cmp	r0, #0
 80067f6:	bf18      	it	ne
 80067f8:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 80067fc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8006800:	065b      	lsls	r3, r3, #25
 8006802:	d503      	bpl.n	800680c <__sbprintf+0x6c>
 8006804:	89a3      	ldrh	r3, [r4, #12]
 8006806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800680a:	81a3      	strh	r3, [r4, #12]
 800680c:	4628      	mov	r0, r5
 800680e:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 8006812:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 8006816:	bf00      	nop

08006818 <__swsetup_r>:
 8006818:	b538      	push	{r3, r4, r5, lr}
 800681a:	4b2f      	ldr	r3, [pc, #188]	; (80068d8 <__swsetup_r+0xc0>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4605      	mov	r5, r0
 8006820:	460c      	mov	r4, r1
 8006822:	b113      	cbz	r3, 800682a <__swsetup_r+0x12>
 8006824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006826:	2a00      	cmp	r2, #0
 8006828:	d036      	beq.n	8006898 <__swsetup_r+0x80>
 800682a:	89a2      	ldrh	r2, [r4, #12]
 800682c:	b293      	uxth	r3, r2
 800682e:	0718      	lsls	r0, r3, #28
 8006830:	d50c      	bpl.n	800684c <__swsetup_r+0x34>
 8006832:	6920      	ldr	r0, [r4, #16]
 8006834:	b1a8      	cbz	r0, 8006862 <__swsetup_r+0x4a>
 8006836:	f013 0201 	ands.w	r2, r3, #1
 800683a:	d01e      	beq.n	800687a <__swsetup_r+0x62>
 800683c:	6963      	ldr	r3, [r4, #20]
 800683e:	2200      	movs	r2, #0
 8006840:	425b      	negs	r3, r3
 8006842:	61a3      	str	r3, [r4, #24]
 8006844:	60a2      	str	r2, [r4, #8]
 8006846:	b1f0      	cbz	r0, 8006886 <__swsetup_r+0x6e>
 8006848:	2000      	movs	r0, #0
 800684a:	bd38      	pop	{r3, r4, r5, pc}
 800684c:	06d9      	lsls	r1, r3, #27
 800684e:	d53b      	bpl.n	80068c8 <__swsetup_r+0xb0>
 8006850:	0758      	lsls	r0, r3, #29
 8006852:	d425      	bmi.n	80068a0 <__swsetup_r+0x88>
 8006854:	6920      	ldr	r0, [r4, #16]
 8006856:	f042 0308 	orr.w	r3, r2, #8
 800685a:	81a3      	strh	r3, [r4, #12]
 800685c:	b29b      	uxth	r3, r3
 800685e:	2800      	cmp	r0, #0
 8006860:	d1e9      	bne.n	8006836 <__swsetup_r+0x1e>
 8006862:	f403 7220 	and.w	r2, r3, #640	; 0x280
 8006866:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800686a:	d0e4      	beq.n	8006836 <__swsetup_r+0x1e>
 800686c:	4628      	mov	r0, r5
 800686e:	4621      	mov	r1, r4
 8006870:	f001 fc76 	bl	8008160 <__smakebuf_r>
 8006874:	89a3      	ldrh	r3, [r4, #12]
 8006876:	6920      	ldr	r0, [r4, #16]
 8006878:	e7dd      	b.n	8006836 <__swsetup_r+0x1e>
 800687a:	0799      	lsls	r1, r3, #30
 800687c:	bf58      	it	pl
 800687e:	6962      	ldrpl	r2, [r4, #20]
 8006880:	60a2      	str	r2, [r4, #8]
 8006882:	2800      	cmp	r0, #0
 8006884:	d1e0      	bne.n	8006848 <__swsetup_r+0x30>
 8006886:	89a3      	ldrh	r3, [r4, #12]
 8006888:	061a      	lsls	r2, r3, #24
 800688a:	d5de      	bpl.n	800684a <__swsetup_r+0x32>
 800688c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006890:	81a3      	strh	r3, [r4, #12]
 8006892:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006896:	bd38      	pop	{r3, r4, r5, pc}
 8006898:	4618      	mov	r0, r3
 800689a:	f001 f957 	bl	8007b4c <__sinit>
 800689e:	e7c4      	b.n	800682a <__swsetup_r+0x12>
 80068a0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80068a2:	b149      	cbz	r1, 80068b8 <__swsetup_r+0xa0>
 80068a4:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80068a8:	4299      	cmp	r1, r3
 80068aa:	d003      	beq.n	80068b4 <__swsetup_r+0x9c>
 80068ac:	4628      	mov	r0, r5
 80068ae:	f001 f9bb 	bl	8007c28 <_free_r>
 80068b2:	89a2      	ldrh	r2, [r4, #12]
 80068b4:	2300      	movs	r3, #0
 80068b6:	6323      	str	r3, [r4, #48]	; 0x30
 80068b8:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 80068bc:	2300      	movs	r3, #0
 80068be:	6920      	ldr	r0, [r4, #16]
 80068c0:	6063      	str	r3, [r4, #4]
 80068c2:	b292      	uxth	r2, r2
 80068c4:	6020      	str	r0, [r4, #0]
 80068c6:	e7c6      	b.n	8006856 <__swsetup_r+0x3e>
 80068c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068cc:	2309      	movs	r3, #9
 80068ce:	602b      	str	r3, [r5, #0]
 80068d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068d4:	81a2      	strh	r2, [r4, #12]
 80068d6:	bd38      	pop	{r3, r4, r5, pc}
 80068d8:	200005c8 	.word	0x200005c8

080068dc <register_fini>:
 80068dc:	4b02      	ldr	r3, [pc, #8]	; (80068e8 <register_fini+0xc>)
 80068de:	b113      	cbz	r3, 80068e6 <register_fini+0xa>
 80068e0:	4802      	ldr	r0, [pc, #8]	; (80068ec <register_fini+0x10>)
 80068e2:	f000 b805 	b.w	80068f0 <atexit>
 80068e6:	4770      	bx	lr
 80068e8:	00000000 	.word	0x00000000
 80068ec:	08007b61 	.word	0x08007b61

080068f0 <atexit>:
 80068f0:	4601      	mov	r1, r0
 80068f2:	2000      	movs	r0, #0
 80068f4:	4602      	mov	r2, r0
 80068f6:	4603      	mov	r3, r0
 80068f8:	f002 be12 	b.w	8009520 <__register_exitproc>

080068fc <quorem>:
 80068fc:	6902      	ldr	r2, [r0, #16]
 80068fe:	690b      	ldr	r3, [r1, #16]
 8006900:	4293      	cmp	r3, r2
 8006902:	f300 808f 	bgt.w	8006a24 <quorem+0x128>
 8006906:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800690a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800690e:	f101 0714 	add.w	r7, r1, #20
 8006912:	f100 0b14 	add.w	fp, r0, #20
 8006916:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 800691a:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 800691e:	ea4f 0488 	mov.w	r4, r8, lsl #2
 8006922:	b083      	sub	sp, #12
 8006924:	3201      	adds	r2, #1
 8006926:	fbb3 f9f2 	udiv	r9, r3, r2
 800692a:	eb0b 0304 	add.w	r3, fp, r4
 800692e:	9400      	str	r4, [sp, #0]
 8006930:	eb07 0a04 	add.w	sl, r7, r4
 8006934:	9301      	str	r3, [sp, #4]
 8006936:	f1b9 0f00 	cmp.w	r9, #0
 800693a:	d03b      	beq.n	80069b4 <quorem+0xb8>
 800693c:	2600      	movs	r6, #0
 800693e:	4632      	mov	r2, r6
 8006940:	46bc      	mov	ip, r7
 8006942:	46de      	mov	lr, fp
 8006944:	4634      	mov	r4, r6
 8006946:	f85c 6b04 	ldr.w	r6, [ip], #4
 800694a:	f8de 5000 	ldr.w	r5, [lr]
 800694e:	b2b3      	uxth	r3, r6
 8006950:	0c36      	lsrs	r6, r6, #16
 8006952:	fb03 4409 	mla	r4, r3, r9, r4
 8006956:	fb06 f609 	mul.w	r6, r6, r9
 800695a:	eb06 4614 	add.w	r6, r6, r4, lsr #16
 800695e:	b2a3      	uxth	r3, r4
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	b2b4      	uxth	r4, r6
 8006964:	fa13 f385 	uxtah	r3, r3, r5
 8006968:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
 800696c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006970:	b29b      	uxth	r3, r3
 8006972:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006976:	45e2      	cmp	sl, ip
 8006978:	ea4f 4224 	mov.w	r2, r4, asr #16
 800697c:	f84e 3b04 	str.w	r3, [lr], #4
 8006980:	ea4f 4416 	mov.w	r4, r6, lsr #16
 8006984:	d2df      	bcs.n	8006946 <quorem+0x4a>
 8006986:	9b00      	ldr	r3, [sp, #0]
 8006988:	f85b 3003 	ldr.w	r3, [fp, r3]
 800698c:	b993      	cbnz	r3, 80069b4 <quorem+0xb8>
 800698e:	9c01      	ldr	r4, [sp, #4]
 8006990:	1f23      	subs	r3, r4, #4
 8006992:	459b      	cmp	fp, r3
 8006994:	d20c      	bcs.n	80069b0 <quorem+0xb4>
 8006996:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800699a:	b94b      	cbnz	r3, 80069b0 <quorem+0xb4>
 800699c:	f1a4 0308 	sub.w	r3, r4, #8
 80069a0:	e002      	b.n	80069a8 <quorem+0xac>
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	3b04      	subs	r3, #4
 80069a6:	b91a      	cbnz	r2, 80069b0 <quorem+0xb4>
 80069a8:	459b      	cmp	fp, r3
 80069aa:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80069ae:	d3f8      	bcc.n	80069a2 <quorem+0xa6>
 80069b0:	f8c0 8010 	str.w	r8, [r0, #16]
 80069b4:	4604      	mov	r4, r0
 80069b6:	f002 f999 	bl	8008cec <__mcmp>
 80069ba:	2800      	cmp	r0, #0
 80069bc:	db2e      	blt.n	8006a1c <quorem+0x120>
 80069be:	f109 0901 	add.w	r9, r9, #1
 80069c2:	465d      	mov	r5, fp
 80069c4:	2300      	movs	r3, #0
 80069c6:	f857 1b04 	ldr.w	r1, [r7], #4
 80069ca:	6828      	ldr	r0, [r5, #0]
 80069cc:	b28a      	uxth	r2, r1
 80069ce:	1a9a      	subs	r2, r3, r2
 80069d0:	0c09      	lsrs	r1, r1, #16
 80069d2:	fa12 f280 	uxtah	r2, r2, r0
 80069d6:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 80069da:	eb03 4322 	add.w	r3, r3, r2, asr #16
 80069de:	b291      	uxth	r1, r2
 80069e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80069e4:	45ba      	cmp	sl, r7
 80069e6:	f845 1b04 	str.w	r1, [r5], #4
 80069ea:	ea4f 4323 	mov.w	r3, r3, asr #16
 80069ee:	d2ea      	bcs.n	80069c6 <quorem+0xca>
 80069f0:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 80069f4:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 80069f8:	b982      	cbnz	r2, 8006a1c <quorem+0x120>
 80069fa:	1f1a      	subs	r2, r3, #4
 80069fc:	4593      	cmp	fp, r2
 80069fe:	d20b      	bcs.n	8006a18 <quorem+0x11c>
 8006a00:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8006a04:	b942      	cbnz	r2, 8006a18 <quorem+0x11c>
 8006a06:	3b08      	subs	r3, #8
 8006a08:	e002      	b.n	8006a10 <quorem+0x114>
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	3b04      	subs	r3, #4
 8006a0e:	b91a      	cbnz	r2, 8006a18 <quorem+0x11c>
 8006a10:	459b      	cmp	fp, r3
 8006a12:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006a16:	d3f8      	bcc.n	8006a0a <quorem+0x10e>
 8006a18:	f8c4 8010 	str.w	r8, [r4, #16]
 8006a1c:	4648      	mov	r0, r9
 8006a1e:	b003      	add	sp, #12
 8006a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a24:	2000      	movs	r0, #0
 8006a26:	4770      	bx	lr

08006a28 <_dtoa_r>:
 8006a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a2c:	b099      	sub	sp, #100	; 0x64
 8006a2e:	4604      	mov	r4, r0
 8006a30:	9103      	str	r1, [sp, #12]
 8006a32:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006a34:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8006a36:	9304      	str	r3, [sp, #16]
 8006a38:	4692      	mov	sl, r2
 8006a3a:	ed8d 0b00 	vstr	d0, [sp]
 8006a3e:	b141      	cbz	r1, 8006a52 <_dtoa_r+0x2a>
 8006a40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006a42:	604a      	str	r2, [r1, #4]
 8006a44:	2301      	movs	r3, #1
 8006a46:	4093      	lsls	r3, r2
 8006a48:	608b      	str	r3, [r1, #8]
 8006a4a:	f001 ff6b 	bl	8008924 <_Bfree>
 8006a4e:	2300      	movs	r3, #0
 8006a50:	6423      	str	r3, [r4, #64]	; 0x40
 8006a52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	4699      	mov	r9, r3
 8006a5a:	db36      	blt.n	8006aca <_dtoa_r+0xa2>
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	602b      	str	r3, [r5, #0]
 8006a60:	4ba5      	ldr	r3, [pc, #660]	; (8006cf8 <_dtoa_r+0x2d0>)
 8006a62:	461a      	mov	r2, r3
 8006a64:	ea09 0303 	and.w	r3, r9, r3
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d017      	beq.n	8006a9c <_dtoa_r+0x74>
 8006a6c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006a70:	2200      	movs	r2, #0
 8006a72:	2300      	movs	r3, #0
 8006a74:	4630      	mov	r0, r6
 8006a76:	4639      	mov	r1, r7
 8006a78:	f7fa f8be 	bl	8000bf8 <__aeabi_dcmpeq>
 8006a7c:	4680      	mov	r8, r0
 8006a7e:	2800      	cmp	r0, #0
 8006a80:	d02b      	beq.n	8006ada <_dtoa_r+0xb2>
 8006a82:	9a04      	ldr	r2, [sp, #16]
 8006a84:	2301      	movs	r3, #1
 8006a86:	6013      	str	r3, [r2, #0]
 8006a88:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	f000 80cc 	beq.w	8006c28 <_dtoa_r+0x200>
 8006a90:	489a      	ldr	r0, [pc, #616]	; (8006cfc <_dtoa_r+0x2d4>)
 8006a92:	6018      	str	r0, [r3, #0]
 8006a94:	3801      	subs	r0, #1
 8006a96:	b019      	add	sp, #100	; 0x64
 8006a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a9c:	9a04      	ldr	r2, [sp, #16]
 8006a9e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006aa2:	6013      	str	r3, [r2, #0]
 8006aa4:	9b00      	ldr	r3, [sp, #0]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	f000 80a7 	beq.w	8006bfa <_dtoa_r+0x1d2>
 8006aac:	4894      	ldr	r0, [pc, #592]	; (8006d00 <_dtoa_r+0x2d8>)
 8006aae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d0f0      	beq.n	8006a96 <_dtoa_r+0x6e>
 8006ab4:	78c3      	ldrb	r3, [r0, #3]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	f000 80b8 	beq.w	8006c2c <_dtoa_r+0x204>
 8006abc:	f100 0308 	add.w	r3, r0, #8
 8006ac0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8006ac2:	6013      	str	r3, [r2, #0]
 8006ac4:	b019      	add	sp, #100	; 0x64
 8006ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aca:	9a01      	ldr	r2, [sp, #4]
 8006acc:	2301      	movs	r3, #1
 8006ace:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
 8006ad2:	602b      	str	r3, [r5, #0]
 8006ad4:	f8cd 9004 	str.w	r9, [sp, #4]
 8006ad8:	e7c2      	b.n	8006a60 <_dtoa_r+0x38>
 8006ada:	4620      	mov	r0, r4
 8006adc:	ec47 6b10 	vmov	d0, r6, r7
 8006ae0:	a917      	add	r1, sp, #92	; 0x5c
 8006ae2:	aa16      	add	r2, sp, #88	; 0x58
 8006ae4:	f002 f990 	bl	8008e08 <__d2b>
 8006ae8:	ea5f 5519 	movs.w	r5, r9, lsr #20
 8006aec:	4683      	mov	fp, r0
 8006aee:	f040 808d 	bne.w	8006c0c <_dtoa_r+0x1e4>
 8006af2:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006af6:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8006af8:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 8006afc:	4445      	add	r5, r8
 8006afe:	429d      	cmp	r5, r3
 8006b00:	f2c0 829e 	blt.w	8007040 <_dtoa_r+0x618>
 8006b04:	4a7f      	ldr	r2, [pc, #508]	; (8006d04 <_dtoa_r+0x2dc>)
 8006b06:	1b52      	subs	r2, r2, r5
 8006b08:	fa09 f902 	lsl.w	r9, r9, r2
 8006b0c:	9a00      	ldr	r2, [sp, #0]
 8006b0e:	f205 4312 	addw	r3, r5, #1042	; 0x412
 8006b12:	fa22 f003 	lsr.w	r0, r2, r3
 8006b16:	ea49 0000 	orr.w	r0, r9, r0
 8006b1a:	f7f9 fd8f 	bl	800063c <__aeabi_ui2d>
 8006b1e:	2301      	movs	r3, #1
 8006b20:	3d01      	subs	r5, #1
 8006b22:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006b26:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b28:	2200      	movs	r2, #0
 8006b2a:	4b77      	ldr	r3, [pc, #476]	; (8006d08 <_dtoa_r+0x2e0>)
 8006b2c:	f7f9 fc48 	bl	80003c0 <__aeabi_dsub>
 8006b30:	a36b      	add	r3, pc, #428	; (adr r3, 8006ce0 <_dtoa_r+0x2b8>)
 8006b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b36:	f7f9 fdf7 	bl	8000728 <__aeabi_dmul>
 8006b3a:	a36b      	add	r3, pc, #428	; (adr r3, 8006ce8 <_dtoa_r+0x2c0>)
 8006b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b40:	f7f9 fc40 	bl	80003c4 <__adddf3>
 8006b44:	4606      	mov	r6, r0
 8006b46:	4628      	mov	r0, r5
 8006b48:	460f      	mov	r7, r1
 8006b4a:	f7f9 fd87 	bl	800065c <__aeabi_i2d>
 8006b4e:	a368      	add	r3, pc, #416	; (adr r3, 8006cf0 <_dtoa_r+0x2c8>)
 8006b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b54:	f7f9 fde8 	bl	8000728 <__aeabi_dmul>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	460b      	mov	r3, r1
 8006b5c:	4630      	mov	r0, r6
 8006b5e:	4639      	mov	r1, r7
 8006b60:	f7f9 fc30 	bl	80003c4 <__adddf3>
 8006b64:	4606      	mov	r6, r0
 8006b66:	460f      	mov	r7, r1
 8006b68:	f7fa f878 	bl	8000c5c <__aeabi_d2iz>
 8006b6c:	4639      	mov	r1, r7
 8006b6e:	9005      	str	r0, [sp, #20]
 8006b70:	2200      	movs	r2, #0
 8006b72:	4630      	mov	r0, r6
 8006b74:	2300      	movs	r3, #0
 8006b76:	f7fa f849 	bl	8000c0c <__aeabi_dcmplt>
 8006b7a:	2800      	cmp	r0, #0
 8006b7c:	f040 81ab 	bne.w	8006ed6 <_dtoa_r+0x4ae>
 8006b80:	9b05      	ldr	r3, [sp, #20]
 8006b82:	2b16      	cmp	r3, #22
 8006b84:	f200 81a4 	bhi.w	8006ed0 <_dtoa_r+0x4a8>
 8006b88:	9a05      	ldr	r2, [sp, #20]
 8006b8a:	4b60      	ldr	r3, [pc, #384]	; (8006d0c <_dtoa_r+0x2e4>)
 8006b8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006b94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b98:	f7fa f856 	bl	8000c48 <__aeabi_dcmpgt>
 8006b9c:	2800      	cmp	r0, #0
 8006b9e:	f000 8255 	beq.w	800704c <_dtoa_r+0x624>
 8006ba2:	9b05      	ldr	r3, [sp, #20]
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	9305      	str	r3, [sp, #20]
 8006ba8:	2300      	movs	r3, #0
 8006baa:	930d      	str	r3, [sp, #52]	; 0x34
 8006bac:	ebc5 0508 	rsb	r5, r5, r8
 8006bb0:	1e6b      	subs	r3, r5, #1
 8006bb2:	9306      	str	r3, [sp, #24]
 8006bb4:	f100 81a6 	bmi.w	8006f04 <_dtoa_r+0x4dc>
 8006bb8:	2300      	movs	r3, #0
 8006bba:	9307      	str	r3, [sp, #28]
 8006bbc:	9b05      	ldr	r3, [sp, #20]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f2c0 8197 	blt.w	8006ef2 <_dtoa_r+0x4ca>
 8006bc4:	9a06      	ldr	r2, [sp, #24]
 8006bc6:	930c      	str	r3, [sp, #48]	; 0x30
 8006bc8:	4611      	mov	r1, r2
 8006bca:	4419      	add	r1, r3
 8006bcc:	2300      	movs	r3, #0
 8006bce:	9106      	str	r1, [sp, #24]
 8006bd0:	930a      	str	r3, [sp, #40]	; 0x28
 8006bd2:	9b03      	ldr	r3, [sp, #12]
 8006bd4:	2b09      	cmp	r3, #9
 8006bd6:	d82b      	bhi.n	8006c30 <_dtoa_r+0x208>
 8006bd8:	2b05      	cmp	r3, #5
 8006bda:	f340 8673 	ble.w	80078c4 <_dtoa_r+0xe9c>
 8006bde:	3b04      	subs	r3, #4
 8006be0:	9303      	str	r3, [sp, #12]
 8006be2:	2700      	movs	r7, #0
 8006be4:	9b03      	ldr	r3, [sp, #12]
 8006be6:	3b02      	subs	r3, #2
 8006be8:	2b03      	cmp	r3, #3
 8006bea:	f200 8651 	bhi.w	8007890 <_dtoa_r+0xe68>
 8006bee:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006bf2:	03d1      	.short	0x03d1
 8006bf4:	02b603c4 	.word	0x02b603c4
 8006bf8:	0666      	.short	0x0666
 8006bfa:	4b41      	ldr	r3, [pc, #260]	; (8006d00 <_dtoa_r+0x2d8>)
 8006bfc:	4a44      	ldr	r2, [pc, #272]	; (8006d10 <_dtoa_r+0x2e8>)
 8006bfe:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8006c02:	2800      	cmp	r0, #0
 8006c04:	bf14      	ite	ne
 8006c06:	4618      	movne	r0, r3
 8006c08:	4610      	moveq	r0, r2
 8006c0a:	e750      	b.n	8006aae <_dtoa_r+0x86>
 8006c0c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006c10:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006c14:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8006c18:	4630      	mov	r0, r6
 8006c1a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006c1e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006c22:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006c26:	e77f      	b.n	8006b28 <_dtoa_r+0x100>
 8006c28:	483a      	ldr	r0, [pc, #232]	; (8006d14 <_dtoa_r+0x2ec>)
 8006c2a:	e734      	b.n	8006a96 <_dtoa_r+0x6e>
 8006c2c:	1cc3      	adds	r3, r0, #3
 8006c2e:	e747      	b.n	8006ac0 <_dtoa_r+0x98>
 8006c30:	2100      	movs	r1, #0
 8006c32:	6461      	str	r1, [r4, #68]	; 0x44
 8006c34:	4620      	mov	r0, r4
 8006c36:	468a      	mov	sl, r1
 8006c38:	9103      	str	r1, [sp, #12]
 8006c3a:	f001 fe4d 	bl	80088d8 <_Balloc>
 8006c3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c42:	9308      	str	r3, [sp, #32]
 8006c44:	930e      	str	r3, [sp, #56]	; 0x38
 8006c46:	2301      	movs	r3, #1
 8006c48:	9009      	str	r0, [sp, #36]	; 0x24
 8006c4a:	6420      	str	r0, [r4, #64]	; 0x40
 8006c4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c4e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f2c0 80d3 	blt.w	8006dfc <_dtoa_r+0x3d4>
 8006c56:	9a05      	ldr	r2, [sp, #20]
 8006c58:	2a0e      	cmp	r2, #14
 8006c5a:	f300 80cf 	bgt.w	8006dfc <_dtoa_r+0x3d4>
 8006c5e:	4b2b      	ldr	r3, [pc, #172]	; (8006d0c <_dtoa_r+0x2e4>)
 8006c60:	f1ba 0f00 	cmp.w	sl, #0
 8006c64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c68:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c6c:	f2c0 8395 	blt.w	800739a <_dtoa_r+0x972>
 8006c70:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006c74:	4642      	mov	r2, r8
 8006c76:	464b      	mov	r3, r9
 8006c78:	4630      	mov	r0, r6
 8006c7a:	4639      	mov	r1, r7
 8006c7c:	f7f9 fe7e 	bl	800097c <__aeabi_ddiv>
 8006c80:	f7f9 ffec 	bl	8000c5c <__aeabi_d2iz>
 8006c84:	4682      	mov	sl, r0
 8006c86:	f7f9 fce9 	bl	800065c <__aeabi_i2d>
 8006c8a:	4642      	mov	r2, r8
 8006c8c:	464b      	mov	r3, r9
 8006c8e:	f7f9 fd4b 	bl	8000728 <__aeabi_dmul>
 8006c92:	460b      	mov	r3, r1
 8006c94:	4602      	mov	r2, r0
 8006c96:	4639      	mov	r1, r7
 8006c98:	4630      	mov	r0, r6
 8006c9a:	f7f9 fb91 	bl	80003c0 <__aeabi_dsub>
 8006c9e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006ca0:	f10a 0330 	add.w	r3, sl, #48	; 0x30
 8006ca4:	702b      	strb	r3, [r5, #0]
 8006ca6:	9b08      	ldr	r3, [sp, #32]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	4606      	mov	r6, r0
 8006cac:	460f      	mov	r7, r1
 8006cae:	f105 0501 	add.w	r5, r5, #1
 8006cb2:	d063      	beq.n	8006d7c <_dtoa_r+0x354>
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	4b18      	ldr	r3, [pc, #96]	; (8006d18 <_dtoa_r+0x2f0>)
 8006cb8:	f7f9 fd36 	bl	8000728 <__aeabi_dmul>
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	4606      	mov	r6, r0
 8006cc2:	460f      	mov	r7, r1
 8006cc4:	f7f9 ff98 	bl	8000bf8 <__aeabi_dcmpeq>
 8006cc8:	2800      	cmp	r0, #0
 8006cca:	f040 8084 	bne.w	8006dd6 <_dtoa_r+0x3ae>
 8006cce:	f8cd b000 	str.w	fp, [sp]
 8006cd2:	9403      	str	r4, [sp, #12]
 8006cd4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8006cd8:	9c08      	ldr	r4, [sp, #32]
 8006cda:	e02a      	b.n	8006d32 <_dtoa_r+0x30a>
 8006cdc:	f3af 8000 	nop.w
 8006ce0:	636f4361 	.word	0x636f4361
 8006ce4:	3fd287a7 	.word	0x3fd287a7
 8006ce8:	8b60c8b3 	.word	0x8b60c8b3
 8006cec:	3fc68a28 	.word	0x3fc68a28
 8006cf0:	509f79fb 	.word	0x509f79fb
 8006cf4:	3fd34413 	.word	0x3fd34413
 8006cf8:	7ff00000 	.word	0x7ff00000
 8006cfc:	0801904d 	.word	0x0801904d
 8006d00:	0801906c 	.word	0x0801906c
 8006d04:	fffffc0e 	.word	0xfffffc0e
 8006d08:	3ff80000 	.word	0x3ff80000
 8006d0c:	08019088 	.word	0x08019088
 8006d10:	08019060 	.word	0x08019060
 8006d14:	0801904c 	.word	0x0801904c
 8006d18:	40240000 	.word	0x40240000
 8006d1c:	f7f9 fd04 	bl	8000728 <__aeabi_dmul>
 8006d20:	2200      	movs	r2, #0
 8006d22:	2300      	movs	r3, #0
 8006d24:	4606      	mov	r6, r0
 8006d26:	460f      	mov	r7, r1
 8006d28:	f7f9 ff66 	bl	8000bf8 <__aeabi_dcmpeq>
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	f040 83e4 	bne.w	80074fa <_dtoa_r+0xad2>
 8006d32:	4642      	mov	r2, r8
 8006d34:	464b      	mov	r3, r9
 8006d36:	4630      	mov	r0, r6
 8006d38:	4639      	mov	r1, r7
 8006d3a:	f7f9 fe1f 	bl	800097c <__aeabi_ddiv>
 8006d3e:	f7f9 ff8d 	bl	8000c5c <__aeabi_d2iz>
 8006d42:	4682      	mov	sl, r0
 8006d44:	f7f9 fc8a 	bl	800065c <__aeabi_i2d>
 8006d48:	4642      	mov	r2, r8
 8006d4a:	464b      	mov	r3, r9
 8006d4c:	f7f9 fcec 	bl	8000728 <__aeabi_dmul>
 8006d50:	4602      	mov	r2, r0
 8006d52:	460b      	mov	r3, r1
 8006d54:	4630      	mov	r0, r6
 8006d56:	4639      	mov	r1, r7
 8006d58:	f7f9 fb32 	bl	80003c0 <__aeabi_dsub>
 8006d5c:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
 8006d60:	f805 eb01 	strb.w	lr, [r5], #1
 8006d64:	ebcb 0e05 	rsb	lr, fp, r5
 8006d68:	4574      	cmp	r4, lr
 8006d6a:	4606      	mov	r6, r0
 8006d6c:	460f      	mov	r7, r1
 8006d6e:	f04f 0200 	mov.w	r2, #0
 8006d72:	4bb7      	ldr	r3, [pc, #732]	; (8007050 <_dtoa_r+0x628>)
 8006d74:	d1d2      	bne.n	8006d1c <_dtoa_r+0x2f4>
 8006d76:	f8dd b000 	ldr.w	fp, [sp]
 8006d7a:	9c03      	ldr	r4, [sp, #12]
 8006d7c:	4632      	mov	r2, r6
 8006d7e:	463b      	mov	r3, r7
 8006d80:	4630      	mov	r0, r6
 8006d82:	4639      	mov	r1, r7
 8006d84:	f7f9 fb1e 	bl	80003c4 <__adddf3>
 8006d88:	4606      	mov	r6, r0
 8006d8a:	460f      	mov	r7, r1
 8006d8c:	4640      	mov	r0, r8
 8006d8e:	4649      	mov	r1, r9
 8006d90:	4632      	mov	r2, r6
 8006d92:	463b      	mov	r3, r7
 8006d94:	f7f9 ff3a 	bl	8000c0c <__aeabi_dcmplt>
 8006d98:	b948      	cbnz	r0, 8006dae <_dtoa_r+0x386>
 8006d9a:	4640      	mov	r0, r8
 8006d9c:	4649      	mov	r1, r9
 8006d9e:	4632      	mov	r2, r6
 8006da0:	463b      	mov	r3, r7
 8006da2:	f7f9 ff29 	bl	8000bf8 <__aeabi_dcmpeq>
 8006da6:	b1b0      	cbz	r0, 8006dd6 <_dtoa_r+0x3ae>
 8006da8:	f01a 0f01 	tst.w	sl, #1
 8006dac:	d013      	beq.n	8006dd6 <_dtoa_r+0x3ae>
 8006dae:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 8006db2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006db4:	1e6b      	subs	r3, r5, #1
 8006db6:	e004      	b.n	8006dc2 <_dtoa_r+0x39a>
 8006db8:	428b      	cmp	r3, r1
 8006dba:	f000 8448 	beq.w	800764e <_dtoa_r+0xc26>
 8006dbe:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
 8006dc2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006dc6:	f103 0501 	add.w	r5, r3, #1
 8006dca:	461a      	mov	r2, r3
 8006dcc:	d0f4      	beq.n	8006db8 <_dtoa_r+0x390>
 8006dce:	f108 0301 	add.w	r3, r8, #1
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	7013      	strb	r3, [r2, #0]
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	4659      	mov	r1, fp
 8006dda:	f001 fda3 	bl	8008924 <_Bfree>
 8006dde:	2200      	movs	r2, #0
 8006de0:	9b05      	ldr	r3, [sp, #20]
 8006de2:	702a      	strb	r2, [r5, #0]
 8006de4:	9a04      	ldr	r2, [sp, #16]
 8006de6:	3301      	adds	r3, #1
 8006de8:	6013      	str	r3, [r2, #0]
 8006dea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f000 834b 	beq.w	8007488 <_dtoa_r+0xa60>
 8006df2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006df4:	601d      	str	r5, [r3, #0]
 8006df6:	b019      	add	sp, #100	; 0x64
 8006df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dfc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006dfe:	2a00      	cmp	r2, #0
 8006e00:	f000 8085 	beq.w	8006f0e <_dtoa_r+0x4e6>
 8006e04:	9a03      	ldr	r2, [sp, #12]
 8006e06:	2a01      	cmp	r2, #1
 8006e08:	f340 830a 	ble.w	8007420 <_dtoa_r+0x9f8>
 8006e0c:	9b08      	ldr	r3, [sp, #32]
 8006e0e:	1e5f      	subs	r7, r3, #1
 8006e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e12:	42bb      	cmp	r3, r7
 8006e14:	f2c0 83a6 	blt.w	8007564 <_dtoa_r+0xb3c>
 8006e18:	1bdf      	subs	r7, r3, r7
 8006e1a:	9b08      	ldr	r3, [sp, #32]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	f2c0 84a4 	blt.w	800776a <_dtoa_r+0xd42>
 8006e22:	9d07      	ldr	r5, [sp, #28]
 8006e24:	9b08      	ldr	r3, [sp, #32]
 8006e26:	9a07      	ldr	r2, [sp, #28]
 8006e28:	441a      	add	r2, r3
 8006e2a:	9207      	str	r2, [sp, #28]
 8006e2c:	9a06      	ldr	r2, [sp, #24]
 8006e2e:	4620      	mov	r0, r4
 8006e30:	441a      	add	r2, r3
 8006e32:	2101      	movs	r1, #1
 8006e34:	9206      	str	r2, [sp, #24]
 8006e36:	f001 fe0f 	bl	8008a58 <__i2b>
 8006e3a:	4606      	mov	r6, r0
 8006e3c:	b165      	cbz	r5, 8006e58 <_dtoa_r+0x430>
 8006e3e:	9906      	ldr	r1, [sp, #24]
 8006e40:	2900      	cmp	r1, #0
 8006e42:	460b      	mov	r3, r1
 8006e44:	dd08      	ble.n	8006e58 <_dtoa_r+0x430>
 8006e46:	42a9      	cmp	r1, r5
 8006e48:	9a07      	ldr	r2, [sp, #28]
 8006e4a:	bfa8      	it	ge
 8006e4c:	462b      	movge	r3, r5
 8006e4e:	1ad2      	subs	r2, r2, r3
 8006e50:	1aed      	subs	r5, r5, r3
 8006e52:	1acb      	subs	r3, r1, r3
 8006e54:	9207      	str	r2, [sp, #28]
 8006e56:	9306      	str	r3, [sp, #24]
 8006e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	dd1a      	ble.n	8006e94 <_dtoa_r+0x46c>
 8006e5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f000 8378 	beq.w	8007556 <_dtoa_r+0xb2e>
 8006e66:	2f00      	cmp	r7, #0
 8006e68:	dd10      	ble.n	8006e8c <_dtoa_r+0x464>
 8006e6a:	4631      	mov	r1, r6
 8006e6c:	463a      	mov	r2, r7
 8006e6e:	4620      	mov	r0, r4
 8006e70:	f001 fe96 	bl	8008ba0 <__pow5mult>
 8006e74:	4606      	mov	r6, r0
 8006e76:	465a      	mov	r2, fp
 8006e78:	4631      	mov	r1, r6
 8006e7a:	4620      	mov	r0, r4
 8006e7c:	f001 fdf6 	bl	8008a6c <__multiply>
 8006e80:	4659      	mov	r1, fp
 8006e82:	4680      	mov	r8, r0
 8006e84:	4620      	mov	r0, r4
 8006e86:	f001 fd4d 	bl	8008924 <_Bfree>
 8006e8a:	46c3      	mov	fp, r8
 8006e8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e8e:	1bda      	subs	r2, r3, r7
 8006e90:	f040 82a5 	bne.w	80073de <_dtoa_r+0x9b6>
 8006e94:	4620      	mov	r0, r4
 8006e96:	2101      	movs	r1, #1
 8006e98:	f001 fdde 	bl	8008a58 <__i2b>
 8006e9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	4680      	mov	r8, r0
 8006ea2:	dd38      	ble.n	8006f16 <_dtoa_r+0x4ee>
 8006ea4:	4601      	mov	r1, r0
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	4620      	mov	r0, r4
 8006eaa:	f001 fe79 	bl	8008ba0 <__pow5mult>
 8006eae:	9b03      	ldr	r3, [sp, #12]
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	4680      	mov	r8, r0
 8006eb4:	f340 8299 	ble.w	80073ea <_dtoa_r+0x9c2>
 8006eb8:	f04f 0900 	mov.w	r9, #0
 8006ebc:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006ec0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8006ec4:	6918      	ldr	r0, [r3, #16]
 8006ec6:	f001 fd79 	bl	80089bc <__hi0bits>
 8006eca:	f1c0 0020 	rsb	r0, r0, #32
 8006ece:	e02c      	b.n	8006f2a <_dtoa_r+0x502>
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	930d      	str	r3, [sp, #52]	; 0x34
 8006ed4:	e66a      	b.n	8006bac <_dtoa_r+0x184>
 8006ed6:	9805      	ldr	r0, [sp, #20]
 8006ed8:	f7f9 fbc0 	bl	800065c <__aeabi_i2d>
 8006edc:	4632      	mov	r2, r6
 8006ede:	463b      	mov	r3, r7
 8006ee0:	f7f9 fe8a 	bl	8000bf8 <__aeabi_dcmpeq>
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	f47f ae4b 	bne.w	8006b80 <_dtoa_r+0x158>
 8006eea:	9b05      	ldr	r3, [sp, #20]
 8006eec:	3b01      	subs	r3, #1
 8006eee:	9305      	str	r3, [sp, #20]
 8006ef0:	e646      	b.n	8006b80 <_dtoa_r+0x158>
 8006ef2:	9a07      	ldr	r2, [sp, #28]
 8006ef4:	9b05      	ldr	r3, [sp, #20]
 8006ef6:	1ad2      	subs	r2, r2, r3
 8006ef8:	425b      	negs	r3, r3
 8006efa:	930a      	str	r3, [sp, #40]	; 0x28
 8006efc:	2300      	movs	r3, #0
 8006efe:	9207      	str	r2, [sp, #28]
 8006f00:	930c      	str	r3, [sp, #48]	; 0x30
 8006f02:	e666      	b.n	8006bd2 <_dtoa_r+0x1aa>
 8006f04:	425b      	negs	r3, r3
 8006f06:	9307      	str	r3, [sp, #28]
 8006f08:	2300      	movs	r3, #0
 8006f0a:	9306      	str	r3, [sp, #24]
 8006f0c:	e656      	b.n	8006bbc <_dtoa_r+0x194>
 8006f0e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006f10:	9d07      	ldr	r5, [sp, #28]
 8006f12:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006f14:	e792      	b.n	8006e3c <_dtoa_r+0x414>
 8006f16:	9b03      	ldr	r3, [sp, #12]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	f340 82b8 	ble.w	800748e <_dtoa_r+0xa66>
 8006f1e:	f04f 0900 	mov.w	r9, #0
 8006f22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1c9      	bne.n	8006ebc <_dtoa_r+0x494>
 8006f28:	2001      	movs	r0, #1
 8006f2a:	9b06      	ldr	r3, [sp, #24]
 8006f2c:	4418      	add	r0, r3
 8006f2e:	f010 001f 	ands.w	r0, r0, #31
 8006f32:	f000 8083 	beq.w	800703c <_dtoa_r+0x614>
 8006f36:	f1c0 0320 	rsb	r3, r0, #32
 8006f3a:	2b04      	cmp	r3, #4
 8006f3c:	f340 84b9 	ble.w	80078b2 <_dtoa_r+0xe8a>
 8006f40:	f1c0 001c 	rsb	r0, r0, #28
 8006f44:	9b07      	ldr	r3, [sp, #28]
 8006f46:	4403      	add	r3, r0
 8006f48:	9307      	str	r3, [sp, #28]
 8006f4a:	9b06      	ldr	r3, [sp, #24]
 8006f4c:	4403      	add	r3, r0
 8006f4e:	4405      	add	r5, r0
 8006f50:	9306      	str	r3, [sp, #24]
 8006f52:	9b07      	ldr	r3, [sp, #28]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	dd05      	ble.n	8006f64 <_dtoa_r+0x53c>
 8006f58:	4659      	mov	r1, fp
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	4620      	mov	r0, r4
 8006f5e:	f001 fe6f 	bl	8008c40 <__lshift>
 8006f62:	4683      	mov	fp, r0
 8006f64:	9b06      	ldr	r3, [sp, #24]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	dd05      	ble.n	8006f76 <_dtoa_r+0x54e>
 8006f6a:	4641      	mov	r1, r8
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	4620      	mov	r0, r4
 8006f70:	f001 fe66 	bl	8008c40 <__lshift>
 8006f74:	4680      	mov	r8, r0
 8006f76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f040 826a 	bne.w	8007452 <_dtoa_r+0xa2a>
 8006f7e:	9b08      	ldr	r3, [sp, #32]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f340 8297 	ble.w	80074b4 <_dtoa_r+0xa8c>
 8006f86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d171      	bne.n	8007070 <_dtoa_r+0x648>
 8006f8c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006f90:	9f08      	ldr	r7, [sp, #32]
 8006f92:	464d      	mov	r5, r9
 8006f94:	e002      	b.n	8006f9c <_dtoa_r+0x574>
 8006f96:	f001 fccf 	bl	8008938 <__multadd>
 8006f9a:	4683      	mov	fp, r0
 8006f9c:	4641      	mov	r1, r8
 8006f9e:	4658      	mov	r0, fp
 8006fa0:	f7ff fcac 	bl	80068fc <quorem>
 8006fa4:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 8006fa8:	f805 cb01 	strb.w	ip, [r5], #1
 8006fac:	ebc9 0305 	rsb	r3, r9, r5
 8006fb0:	42bb      	cmp	r3, r7
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	4659      	mov	r1, fp
 8006fb6:	f04f 020a 	mov.w	r2, #10
 8006fba:	f04f 0300 	mov.w	r3, #0
 8006fbe:	dbea      	blt.n	8006f96 <_dtoa_r+0x56e>
 8006fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fc2:	9a08      	ldr	r2, [sp, #32]
 8006fc4:	2a01      	cmp	r2, #1
 8006fc6:	bfac      	ite	ge
 8006fc8:	189b      	addge	r3, r3, r2
 8006fca:	3301      	addlt	r3, #1
 8006fcc:	461d      	mov	r5, r3
 8006fce:	f04f 0a00 	mov.w	sl, #0
 8006fd2:	4659      	mov	r1, fp
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	f8cd c000 	str.w	ip, [sp]
 8006fdc:	f001 fe30 	bl	8008c40 <__lshift>
 8006fe0:	4641      	mov	r1, r8
 8006fe2:	4683      	mov	fp, r0
 8006fe4:	f001 fe82 	bl	8008cec <__mcmp>
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	f8dd c000 	ldr.w	ip, [sp]
 8006fee:	f340 82ef 	ble.w	80075d0 <_dtoa_r+0xba8>
 8006ff2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006ff6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ff8:	1e6b      	subs	r3, r5, #1
 8006ffa:	e004      	b.n	8007006 <_dtoa_r+0x5de>
 8006ffc:	428b      	cmp	r3, r1
 8006ffe:	f000 8275 	beq.w	80074ec <_dtoa_r+0xac4>
 8007002:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007006:	2a39      	cmp	r2, #57	; 0x39
 8007008:	f103 0501 	add.w	r5, r3, #1
 800700c:	d0f6      	beq.n	8006ffc <_dtoa_r+0x5d4>
 800700e:	3201      	adds	r2, #1
 8007010:	701a      	strb	r2, [r3, #0]
 8007012:	4641      	mov	r1, r8
 8007014:	4620      	mov	r0, r4
 8007016:	f001 fc85 	bl	8008924 <_Bfree>
 800701a:	2e00      	cmp	r6, #0
 800701c:	f43f aedb 	beq.w	8006dd6 <_dtoa_r+0x3ae>
 8007020:	f1ba 0f00 	cmp.w	sl, #0
 8007024:	d005      	beq.n	8007032 <_dtoa_r+0x60a>
 8007026:	45b2      	cmp	sl, r6
 8007028:	d003      	beq.n	8007032 <_dtoa_r+0x60a>
 800702a:	4651      	mov	r1, sl
 800702c:	4620      	mov	r0, r4
 800702e:	f001 fc79 	bl	8008924 <_Bfree>
 8007032:	4631      	mov	r1, r6
 8007034:	4620      	mov	r0, r4
 8007036:	f001 fc75 	bl	8008924 <_Bfree>
 800703a:	e6cc      	b.n	8006dd6 <_dtoa_r+0x3ae>
 800703c:	201c      	movs	r0, #28
 800703e:	e781      	b.n	8006f44 <_dtoa_r+0x51c>
 8007040:	4b04      	ldr	r3, [pc, #16]	; (8007054 <_dtoa_r+0x62c>)
 8007042:	9a00      	ldr	r2, [sp, #0]
 8007044:	1b5b      	subs	r3, r3, r5
 8007046:	fa02 f003 	lsl.w	r0, r2, r3
 800704a:	e566      	b.n	8006b1a <_dtoa_r+0xf2>
 800704c:	900d      	str	r0, [sp, #52]	; 0x34
 800704e:	e5ad      	b.n	8006bac <_dtoa_r+0x184>
 8007050:	40240000 	.word	0x40240000
 8007054:	fffffbee 	.word	0xfffffbee
 8007058:	4631      	mov	r1, r6
 800705a:	2300      	movs	r3, #0
 800705c:	4620      	mov	r0, r4
 800705e:	220a      	movs	r2, #10
 8007060:	f001 fc6a 	bl	8008938 <__multadd>
 8007064:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007066:	2b00      	cmp	r3, #0
 8007068:	4606      	mov	r6, r0
 800706a:	f340 840b 	ble.w	8007884 <_dtoa_r+0xe5c>
 800706e:	9308      	str	r3, [sp, #32]
 8007070:	2d00      	cmp	r5, #0
 8007072:	dd05      	ble.n	8007080 <_dtoa_r+0x658>
 8007074:	4631      	mov	r1, r6
 8007076:	462a      	mov	r2, r5
 8007078:	4620      	mov	r0, r4
 800707a:	f001 fde1 	bl	8008c40 <__lshift>
 800707e:	4606      	mov	r6, r0
 8007080:	f1b9 0f00 	cmp.w	r9, #0
 8007084:	f040 82ed 	bne.w	8007662 <_dtoa_r+0xc3a>
 8007088:	46b1      	mov	r9, r6
 800708a:	9b08      	ldr	r3, [sp, #32]
 800708c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800708e:	3b01      	subs	r3, #1
 8007090:	18d3      	adds	r3, r2, r3
 8007092:	9308      	str	r3, [sp, #32]
 8007094:	9b00      	ldr	r3, [sp, #0]
 8007096:	f003 0301 	and.w	r3, r3, #1
 800709a:	930a      	str	r3, [sp, #40]	; 0x28
 800709c:	4617      	mov	r7, r2
 800709e:	4641      	mov	r1, r8
 80070a0:	4658      	mov	r0, fp
 80070a2:	f7ff fc2b 	bl	80068fc <quorem>
 80070a6:	4631      	mov	r1, r6
 80070a8:	4605      	mov	r5, r0
 80070aa:	4658      	mov	r0, fp
 80070ac:	f001 fe1e 	bl	8008cec <__mcmp>
 80070b0:	464a      	mov	r2, r9
 80070b2:	4682      	mov	sl, r0
 80070b4:	4641      	mov	r1, r8
 80070b6:	4620      	mov	r0, r4
 80070b8:	f001 fe3c 	bl	8008d34 <__mdiff>
 80070bc:	68c2      	ldr	r2, [r0, #12]
 80070be:	4603      	mov	r3, r0
 80070c0:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 80070c4:	2a00      	cmp	r2, #0
 80070c6:	f040 81ba 	bne.w	800743e <_dtoa_r+0xa16>
 80070ca:	4619      	mov	r1, r3
 80070cc:	4658      	mov	r0, fp
 80070ce:	f8cd c01c 	str.w	ip, [sp, #28]
 80070d2:	9306      	str	r3, [sp, #24]
 80070d4:	f001 fe0a 	bl	8008cec <__mcmp>
 80070d8:	9b06      	ldr	r3, [sp, #24]
 80070da:	9000      	str	r0, [sp, #0]
 80070dc:	4619      	mov	r1, r3
 80070de:	4620      	mov	r0, r4
 80070e0:	f001 fc20 	bl	8008924 <_Bfree>
 80070e4:	9a00      	ldr	r2, [sp, #0]
 80070e6:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80070ea:	b92a      	cbnz	r2, 80070f8 <_dtoa_r+0x6d0>
 80070ec:	9b03      	ldr	r3, [sp, #12]
 80070ee:	b91b      	cbnz	r3, 80070f8 <_dtoa_r+0x6d0>
 80070f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	f000 83aa 	beq.w	800784c <_dtoa_r+0xe24>
 80070f8:	f1ba 0f00 	cmp.w	sl, #0
 80070fc:	f2c0 824a 	blt.w	8007594 <_dtoa_r+0xb6c>
 8007100:	d105      	bne.n	800710e <_dtoa_r+0x6e6>
 8007102:	9b03      	ldr	r3, [sp, #12]
 8007104:	b91b      	cbnz	r3, 800710e <_dtoa_r+0x6e6>
 8007106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007108:	2b00      	cmp	r3, #0
 800710a:	f000 8243 	beq.w	8007594 <_dtoa_r+0xb6c>
 800710e:	2a00      	cmp	r2, #0
 8007110:	f300 82bb 	bgt.w	800768a <_dtoa_r+0xc62>
 8007114:	9b08      	ldr	r3, [sp, #32]
 8007116:	f887 c000 	strb.w	ip, [r7]
 800711a:	f107 0a01 	add.w	sl, r7, #1
 800711e:	429f      	cmp	r7, r3
 8007120:	4655      	mov	r5, sl
 8007122:	f000 82be 	beq.w	80076a2 <_dtoa_r+0xc7a>
 8007126:	4659      	mov	r1, fp
 8007128:	220a      	movs	r2, #10
 800712a:	2300      	movs	r3, #0
 800712c:	4620      	mov	r0, r4
 800712e:	f001 fc03 	bl	8008938 <__multadd>
 8007132:	454e      	cmp	r6, r9
 8007134:	4683      	mov	fp, r0
 8007136:	4631      	mov	r1, r6
 8007138:	4620      	mov	r0, r4
 800713a:	f04f 020a 	mov.w	r2, #10
 800713e:	f04f 0300 	mov.w	r3, #0
 8007142:	f000 8176 	beq.w	8007432 <_dtoa_r+0xa0a>
 8007146:	f001 fbf7 	bl	8008938 <__multadd>
 800714a:	4649      	mov	r1, r9
 800714c:	4606      	mov	r6, r0
 800714e:	220a      	movs	r2, #10
 8007150:	4620      	mov	r0, r4
 8007152:	2300      	movs	r3, #0
 8007154:	f001 fbf0 	bl	8008938 <__multadd>
 8007158:	4657      	mov	r7, sl
 800715a:	4681      	mov	r9, r0
 800715c:	e79f      	b.n	800709e <_dtoa_r+0x676>
 800715e:	2301      	movs	r3, #1
 8007160:	930b      	str	r3, [sp, #44]	; 0x2c
 8007162:	f1ba 0f00 	cmp.w	sl, #0
 8007166:	f340 820c 	ble.w	8007582 <_dtoa_r+0xb5a>
 800716a:	4656      	mov	r6, sl
 800716c:	4655      	mov	r5, sl
 800716e:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007172:	f8cd a020 	str.w	sl, [sp, #32]
 8007176:	2100      	movs	r1, #0
 8007178:	2e17      	cmp	r6, #23
 800717a:	6461      	str	r1, [r4, #68]	; 0x44
 800717c:	d90a      	bls.n	8007194 <_dtoa_r+0x76c>
 800717e:	2201      	movs	r2, #1
 8007180:	2304      	movs	r3, #4
 8007182:	005b      	lsls	r3, r3, #1
 8007184:	f103 0014 	add.w	r0, r3, #20
 8007188:	4286      	cmp	r6, r0
 800718a:	4611      	mov	r1, r2
 800718c:	f102 0201 	add.w	r2, r2, #1
 8007190:	d2f7      	bcs.n	8007182 <_dtoa_r+0x75a>
 8007192:	6461      	str	r1, [r4, #68]	; 0x44
 8007194:	4620      	mov	r0, r4
 8007196:	f001 fb9f 	bl	80088d8 <_Balloc>
 800719a:	2d0e      	cmp	r5, #14
 800719c:	9009      	str	r0, [sp, #36]	; 0x24
 800719e:	6420      	str	r0, [r4, #64]	; 0x40
 80071a0:	f63f ad55 	bhi.w	8006c4e <_dtoa_r+0x226>
 80071a4:	2f00      	cmp	r7, #0
 80071a6:	f43f ad52 	beq.w	8006c4e <_dtoa_r+0x226>
 80071aa:	ed9d 7b00 	vldr	d7, [sp]
 80071ae:	9905      	ldr	r1, [sp, #20]
 80071b0:	2900      	cmp	r1, #0
 80071b2:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80071b6:	f340 8223 	ble.w	8007600 <_dtoa_r+0xbd8>
 80071ba:	4bb7      	ldr	r3, [pc, #732]	; (8007498 <_dtoa_r+0xa70>)
 80071bc:	f001 020f 	and.w	r2, r1, #15
 80071c0:	110d      	asrs	r5, r1, #4
 80071c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071c6:	06e9      	lsls	r1, r5, #27
 80071c8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80071cc:	f140 81d2 	bpl.w	8007574 <_dtoa_r+0xb4c>
 80071d0:	4bb2      	ldr	r3, [pc, #712]	; (800749c <_dtoa_r+0xa74>)
 80071d2:	ec51 0b17 	vmov	r0, r1, d7
 80071d6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80071da:	f7f9 fbcf 	bl	800097c <__aeabi_ddiv>
 80071de:	e9cd 0100 	strd	r0, r1, [sp]
 80071e2:	f005 050f 	and.w	r5, r5, #15
 80071e6:	f04f 0803 	mov.w	r8, #3
 80071ea:	b18d      	cbz	r5, 8007210 <_dtoa_r+0x7e8>
 80071ec:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 800749c <_dtoa_r+0xa74>
 80071f0:	4630      	mov	r0, r6
 80071f2:	4639      	mov	r1, r7
 80071f4:	07ea      	lsls	r2, r5, #31
 80071f6:	d505      	bpl.n	8007204 <_dtoa_r+0x7dc>
 80071f8:	e9d9 2300 	ldrd	r2, r3, [r9]
 80071fc:	f7f9 fa94 	bl	8000728 <__aeabi_dmul>
 8007200:	f108 0801 	add.w	r8, r8, #1
 8007204:	106d      	asrs	r5, r5, #1
 8007206:	f109 0908 	add.w	r9, r9, #8
 800720a:	d1f3      	bne.n	80071f4 <_dtoa_r+0x7cc>
 800720c:	4606      	mov	r6, r0
 800720e:	460f      	mov	r7, r1
 8007210:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007214:	4632      	mov	r2, r6
 8007216:	463b      	mov	r3, r7
 8007218:	f7f9 fbb0 	bl	800097c <__aeabi_ddiv>
 800721c:	e9cd 0100 	strd	r0, r1, [sp]
 8007220:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007222:	b143      	cbz	r3, 8007236 <_dtoa_r+0x80e>
 8007224:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007228:	2200      	movs	r2, #0
 800722a:	4b9d      	ldr	r3, [pc, #628]	; (80074a0 <_dtoa_r+0xa78>)
 800722c:	f7f9 fcee 	bl	8000c0c <__aeabi_dcmplt>
 8007230:	2800      	cmp	r0, #0
 8007232:	f040 82ae 	bne.w	8007792 <_dtoa_r+0xd6a>
 8007236:	4640      	mov	r0, r8
 8007238:	f7f9 fa10 	bl	800065c <__aeabi_i2d>
 800723c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007240:	f7f9 fa72 	bl	8000728 <__aeabi_dmul>
 8007244:	4b97      	ldr	r3, [pc, #604]	; (80074a4 <_dtoa_r+0xa7c>)
 8007246:	2200      	movs	r2, #0
 8007248:	f7f9 f8bc 	bl	80003c4 <__adddf3>
 800724c:	9b08      	ldr	r3, [sp, #32]
 800724e:	4606      	mov	r6, r0
 8007250:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8007254:	2b00      	cmp	r3, #0
 8007256:	f000 8162 	beq.w	800751e <_dtoa_r+0xaf6>
 800725a:	9b05      	ldr	r3, [sp, #20]
 800725c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007260:	9314      	str	r3, [sp, #80]	; 0x50
 8007262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007264:	2b00      	cmp	r3, #0
 8007266:	f000 8223 	beq.w	80076b0 <_dtoa_r+0xc88>
 800726a:	4b8b      	ldr	r3, [pc, #556]	; (8007498 <_dtoa_r+0xa70>)
 800726c:	498e      	ldr	r1, [pc, #568]	; (80074a8 <_dtoa_r+0xa80>)
 800726e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007272:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007276:	2000      	movs	r0, #0
 8007278:	f7f9 fb80 	bl	800097c <__aeabi_ddiv>
 800727c:	4632      	mov	r2, r6
 800727e:	463b      	mov	r3, r7
 8007280:	f7f9 f89e 	bl	80003c0 <__aeabi_dsub>
 8007284:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007288:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800728c:	4639      	mov	r1, r7
 800728e:	4630      	mov	r0, r6
 8007290:	f7f9 fce4 	bl	8000c5c <__aeabi_d2iz>
 8007294:	4605      	mov	r5, r0
 8007296:	f7f9 f9e1 	bl	800065c <__aeabi_i2d>
 800729a:	3530      	adds	r5, #48	; 0x30
 800729c:	4602      	mov	r2, r0
 800729e:	460b      	mov	r3, r1
 80072a0:	4630      	mov	r0, r6
 80072a2:	4639      	mov	r1, r7
 80072a4:	f7f9 f88c 	bl	80003c0 <__aeabi_dsub>
 80072a8:	fa5f f885 	uxtb.w	r8, r5
 80072ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80072ae:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80072b2:	f885 8000 	strb.w	r8, [r5]
 80072b6:	4606      	mov	r6, r0
 80072b8:	460f      	mov	r7, r1
 80072ba:	3501      	adds	r5, #1
 80072bc:	f7f9 fca6 	bl	8000c0c <__aeabi_dcmplt>
 80072c0:	2800      	cmp	r0, #0
 80072c2:	f040 82a7 	bne.w	8007814 <_dtoa_r+0xdec>
 80072c6:	4632      	mov	r2, r6
 80072c8:	463b      	mov	r3, r7
 80072ca:	2000      	movs	r0, #0
 80072cc:	4974      	ldr	r1, [pc, #464]	; (80074a0 <_dtoa_r+0xa78>)
 80072ce:	f7f9 f877 	bl	80003c0 <__aeabi_dsub>
 80072d2:	4602      	mov	r2, r0
 80072d4:	460b      	mov	r3, r1
 80072d6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80072da:	f7f9 fcb5 	bl	8000c48 <__aeabi_dcmpgt>
 80072de:	2800      	cmp	r0, #0
 80072e0:	f040 82ad 	bne.w	800783e <_dtoa_r+0xe16>
 80072e4:	f1b9 0f01 	cmp.w	r9, #1
 80072e8:	f340 8184 	ble.w	80075f4 <_dtoa_r+0xbcc>
 80072ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072ee:	f8cd b000 	str.w	fp, [sp]
 80072f2:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
 80072f6:	4499      	add	r9, r3
 80072f8:	46a0      	mov	r8, r4
 80072fa:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
 80072fe:	e00d      	b.n	800731c <_dtoa_r+0x8f4>
 8007300:	2000      	movs	r0, #0
 8007302:	4967      	ldr	r1, [pc, #412]	; (80074a0 <_dtoa_r+0xa78>)
 8007304:	f7f9 f85c 	bl	80003c0 <__aeabi_dsub>
 8007308:	4652      	mov	r2, sl
 800730a:	465b      	mov	r3, fp
 800730c:	f7f9 fc7e 	bl	8000c0c <__aeabi_dcmplt>
 8007310:	2800      	cmp	r0, #0
 8007312:	f040 828f 	bne.w	8007834 <_dtoa_r+0xe0c>
 8007316:	454d      	cmp	r5, r9
 8007318:	f000 8167 	beq.w	80075ea <_dtoa_r+0xbc2>
 800731c:	4650      	mov	r0, sl
 800731e:	4659      	mov	r1, fp
 8007320:	2200      	movs	r2, #0
 8007322:	4b62      	ldr	r3, [pc, #392]	; (80074ac <_dtoa_r+0xa84>)
 8007324:	f7f9 fa00 	bl	8000728 <__aeabi_dmul>
 8007328:	2200      	movs	r2, #0
 800732a:	4b60      	ldr	r3, [pc, #384]	; (80074ac <_dtoa_r+0xa84>)
 800732c:	4682      	mov	sl, r0
 800732e:	468b      	mov	fp, r1
 8007330:	4630      	mov	r0, r6
 8007332:	4639      	mov	r1, r7
 8007334:	f7f9 f9f8 	bl	8000728 <__aeabi_dmul>
 8007338:	460f      	mov	r7, r1
 800733a:	4606      	mov	r6, r0
 800733c:	f7f9 fc8e 	bl	8000c5c <__aeabi_d2iz>
 8007340:	4604      	mov	r4, r0
 8007342:	f7f9 f98b 	bl	800065c <__aeabi_i2d>
 8007346:	4602      	mov	r2, r0
 8007348:	460b      	mov	r3, r1
 800734a:	4630      	mov	r0, r6
 800734c:	4639      	mov	r1, r7
 800734e:	f7f9 f837 	bl	80003c0 <__aeabi_dsub>
 8007352:	3430      	adds	r4, #48	; 0x30
 8007354:	b2e4      	uxtb	r4, r4
 8007356:	4652      	mov	r2, sl
 8007358:	465b      	mov	r3, fp
 800735a:	f805 4b01 	strb.w	r4, [r5], #1
 800735e:	4606      	mov	r6, r0
 8007360:	460f      	mov	r7, r1
 8007362:	f7f9 fc53 	bl	8000c0c <__aeabi_dcmplt>
 8007366:	4632      	mov	r2, r6
 8007368:	463b      	mov	r3, r7
 800736a:	2800      	cmp	r0, #0
 800736c:	d0c8      	beq.n	8007300 <_dtoa_r+0x8d8>
 800736e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007370:	f8dd b000 	ldr.w	fp, [sp]
 8007374:	9305      	str	r3, [sp, #20]
 8007376:	4644      	mov	r4, r8
 8007378:	e52d      	b.n	8006dd6 <_dtoa_r+0x3ae>
 800737a:	2300      	movs	r3, #0
 800737c:	930b      	str	r3, [sp, #44]	; 0x2c
 800737e:	9b05      	ldr	r3, [sp, #20]
 8007380:	4453      	add	r3, sl
 8007382:	930e      	str	r3, [sp, #56]	; 0x38
 8007384:	3301      	adds	r3, #1
 8007386:	2b00      	cmp	r3, #0
 8007388:	9308      	str	r3, [sp, #32]
 800738a:	f340 8101 	ble.w	8007590 <_dtoa_r+0xb68>
 800738e:	9d08      	ldr	r5, [sp, #32]
 8007390:	462e      	mov	r6, r5
 8007392:	e6f0      	b.n	8007176 <_dtoa_r+0x74e>
 8007394:	2300      	movs	r3, #0
 8007396:	930b      	str	r3, [sp, #44]	; 0x2c
 8007398:	e6e3      	b.n	8007162 <_dtoa_r+0x73a>
 800739a:	9b08      	ldr	r3, [sp, #32]
 800739c:	2b00      	cmp	r3, #0
 800739e:	f73f ac67 	bgt.w	8006c70 <_dtoa_r+0x248>
 80073a2:	f040 80d4 	bne.w	800754e <_dtoa_r+0xb26>
 80073a6:	4640      	mov	r0, r8
 80073a8:	2200      	movs	r2, #0
 80073aa:	4b41      	ldr	r3, [pc, #260]	; (80074b0 <_dtoa_r+0xa88>)
 80073ac:	4649      	mov	r1, r9
 80073ae:	f7f9 f9bb 	bl	8000728 <__aeabi_dmul>
 80073b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073b6:	f7f9 fc3d 	bl	8000c34 <__aeabi_dcmpge>
 80073ba:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80073be:	4646      	mov	r6, r8
 80073c0:	2800      	cmp	r0, #0
 80073c2:	f000 808b 	beq.w	80074dc <_dtoa_r+0xab4>
 80073c6:	ea6f 030a 	mvn.w	r3, sl
 80073ca:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80073cc:	9305      	str	r3, [sp, #20]
 80073ce:	4641      	mov	r1, r8
 80073d0:	4620      	mov	r0, r4
 80073d2:	f001 faa7 	bl	8008924 <_Bfree>
 80073d6:	2e00      	cmp	r6, #0
 80073d8:	f47f ae2b 	bne.w	8007032 <_dtoa_r+0x60a>
 80073dc:	e4fb      	b.n	8006dd6 <_dtoa_r+0x3ae>
 80073de:	4659      	mov	r1, fp
 80073e0:	4620      	mov	r0, r4
 80073e2:	f001 fbdd 	bl	8008ba0 <__pow5mult>
 80073e6:	4683      	mov	fp, r0
 80073e8:	e554      	b.n	8006e94 <_dtoa_r+0x46c>
 80073ea:	9b00      	ldr	r3, [sp, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	f47f ad63 	bne.w	8006eb8 <_dtoa_r+0x490>
 80073f2:	9b01      	ldr	r3, [sp, #4]
 80073f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f47f ad90 	bne.w	8006f1e <_dtoa_r+0x4f6>
 80073fe:	9b01      	ldr	r3, [sp, #4]
 8007400:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8007404:	0d3f      	lsrs	r7, r7, #20
 8007406:	053f      	lsls	r7, r7, #20
 8007408:	2f00      	cmp	r7, #0
 800740a:	f000 821c 	beq.w	8007846 <_dtoa_r+0xe1e>
 800740e:	9b07      	ldr	r3, [sp, #28]
 8007410:	3301      	adds	r3, #1
 8007412:	9307      	str	r3, [sp, #28]
 8007414:	9b06      	ldr	r3, [sp, #24]
 8007416:	3301      	adds	r3, #1
 8007418:	9306      	str	r3, [sp, #24]
 800741a:	f04f 0901 	mov.w	r9, #1
 800741e:	e580      	b.n	8006f22 <_dtoa_r+0x4fa>
 8007420:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007422:	2a00      	cmp	r2, #0
 8007424:	f000 81a7 	beq.w	8007776 <_dtoa_r+0xd4e>
 8007428:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800742c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800742e:	9d07      	ldr	r5, [sp, #28]
 8007430:	e4f9      	b.n	8006e26 <_dtoa_r+0x3fe>
 8007432:	f001 fa81 	bl	8008938 <__multadd>
 8007436:	4657      	mov	r7, sl
 8007438:	4606      	mov	r6, r0
 800743a:	4681      	mov	r9, r0
 800743c:	e62f      	b.n	800709e <_dtoa_r+0x676>
 800743e:	4601      	mov	r1, r0
 8007440:	4620      	mov	r0, r4
 8007442:	f8cd c000 	str.w	ip, [sp]
 8007446:	f001 fa6d 	bl	8008924 <_Bfree>
 800744a:	2201      	movs	r2, #1
 800744c:	f8dd c000 	ldr.w	ip, [sp]
 8007450:	e652      	b.n	80070f8 <_dtoa_r+0x6d0>
 8007452:	4658      	mov	r0, fp
 8007454:	4641      	mov	r1, r8
 8007456:	f001 fc49 	bl	8008cec <__mcmp>
 800745a:	2800      	cmp	r0, #0
 800745c:	f6bf ad8f 	bge.w	8006f7e <_dtoa_r+0x556>
 8007460:	9f05      	ldr	r7, [sp, #20]
 8007462:	4659      	mov	r1, fp
 8007464:	2300      	movs	r3, #0
 8007466:	4620      	mov	r0, r4
 8007468:	220a      	movs	r2, #10
 800746a:	3f01      	subs	r7, #1
 800746c:	9705      	str	r7, [sp, #20]
 800746e:	f001 fa63 	bl	8008938 <__multadd>
 8007472:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007474:	4683      	mov	fp, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	f47f adee 	bne.w	8007058 <_dtoa_r+0x630>
 800747c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800747e:	2b00      	cmp	r3, #0
 8007480:	f340 81f5 	ble.w	800786e <_dtoa_r+0xe46>
 8007484:	9308      	str	r3, [sp, #32]
 8007486:	e581      	b.n	8006f8c <_dtoa_r+0x564>
 8007488:	9809      	ldr	r0, [sp, #36]	; 0x24
 800748a:	f7ff bb04 	b.w	8006a96 <_dtoa_r+0x6e>
 800748e:	9b00      	ldr	r3, [sp, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	f47f ad44 	bne.w	8006f1e <_dtoa_r+0x4f6>
 8007496:	e7ac      	b.n	80073f2 <_dtoa_r+0x9ca>
 8007498:	08019088 	.word	0x08019088
 800749c:	08019150 	.word	0x08019150
 80074a0:	3ff00000 	.word	0x3ff00000
 80074a4:	401c0000 	.word	0x401c0000
 80074a8:	3fe00000 	.word	0x3fe00000
 80074ac:	40240000 	.word	0x40240000
 80074b0:	40140000 	.word	0x40140000
 80074b4:	9b03      	ldr	r3, [sp, #12]
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	f77f ad65 	ble.w	8006f86 <_dtoa_r+0x55e>
 80074bc:	9b08      	ldr	r3, [sp, #32]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d181      	bne.n	80073c6 <_dtoa_r+0x99e>
 80074c2:	4641      	mov	r1, r8
 80074c4:	2205      	movs	r2, #5
 80074c6:	4620      	mov	r0, r4
 80074c8:	f001 fa36 	bl	8008938 <__multadd>
 80074cc:	4680      	mov	r8, r0
 80074ce:	4641      	mov	r1, r8
 80074d0:	4658      	mov	r0, fp
 80074d2:	f001 fc0b 	bl	8008cec <__mcmp>
 80074d6:	2800      	cmp	r0, #0
 80074d8:	f77f af75 	ble.w	80073c6 <_dtoa_r+0x99e>
 80074dc:	9a05      	ldr	r2, [sp, #20]
 80074de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074e0:	2331      	movs	r3, #49	; 0x31
 80074e2:	3201      	adds	r2, #1
 80074e4:	9205      	str	r2, [sp, #20]
 80074e6:	700b      	strb	r3, [r1, #0]
 80074e8:	1c4d      	adds	r5, r1, #1
 80074ea:	e770      	b.n	80073ce <_dtoa_r+0x9a6>
 80074ec:	9a05      	ldr	r2, [sp, #20]
 80074ee:	3201      	adds	r2, #1
 80074f0:	9205      	str	r2, [sp, #20]
 80074f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074f4:	2331      	movs	r3, #49	; 0x31
 80074f6:	7013      	strb	r3, [r2, #0]
 80074f8:	e58b      	b.n	8007012 <_dtoa_r+0x5ea>
 80074fa:	f8dd b000 	ldr.w	fp, [sp]
 80074fe:	9c03      	ldr	r4, [sp, #12]
 8007500:	e469      	b.n	8006dd6 <_dtoa_r+0x3ae>
 8007502:	4640      	mov	r0, r8
 8007504:	f7f9 f8aa 	bl	800065c <__aeabi_i2d>
 8007508:	e9dd 2300 	ldrd	r2, r3, [sp]
 800750c:	f7f9 f90c 	bl	8000728 <__aeabi_dmul>
 8007510:	2200      	movs	r2, #0
 8007512:	4bc2      	ldr	r3, [pc, #776]	; (800781c <_dtoa_r+0xdf4>)
 8007514:	f7f8 ff56 	bl	80003c4 <__adddf3>
 8007518:	4606      	mov	r6, r0
 800751a:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 800751e:	2200      	movs	r2, #0
 8007520:	4bbf      	ldr	r3, [pc, #764]	; (8007820 <_dtoa_r+0xdf8>)
 8007522:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007526:	f7f8 ff4b 	bl	80003c0 <__aeabi_dsub>
 800752a:	4632      	mov	r2, r6
 800752c:	463b      	mov	r3, r7
 800752e:	4680      	mov	r8, r0
 8007530:	4689      	mov	r9, r1
 8007532:	f7f9 fb89 	bl	8000c48 <__aeabi_dcmpgt>
 8007536:	2800      	cmp	r0, #0
 8007538:	f040 80b6 	bne.w	80076a8 <_dtoa_r+0xc80>
 800753c:	4632      	mov	r2, r6
 800753e:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007542:	4640      	mov	r0, r8
 8007544:	4649      	mov	r1, r9
 8007546:	f7f9 fb61 	bl	8000c0c <__aeabi_dcmplt>
 800754a:	2800      	cmp	r0, #0
 800754c:	d052      	beq.n	80075f4 <_dtoa_r+0xbcc>
 800754e:	f04f 0800 	mov.w	r8, #0
 8007552:	4646      	mov	r6, r8
 8007554:	e737      	b.n	80073c6 <_dtoa_r+0x99e>
 8007556:	4659      	mov	r1, fp
 8007558:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800755a:	4620      	mov	r0, r4
 800755c:	f001 fb20 	bl	8008ba0 <__pow5mult>
 8007560:	4683      	mov	fp, r0
 8007562:	e497      	b.n	8006e94 <_dtoa_r+0x46c>
 8007564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007566:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007568:	970a      	str	r7, [sp, #40]	; 0x28
 800756a:	1afb      	subs	r3, r7, r3
 800756c:	441a      	add	r2, r3
 800756e:	920c      	str	r2, [sp, #48]	; 0x30
 8007570:	2700      	movs	r7, #0
 8007572:	e452      	b.n	8006e1a <_dtoa_r+0x3f2>
 8007574:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 8007578:	f04f 0802 	mov.w	r8, #2
 800757c:	ed8d 7b00 	vstr	d7, [sp]
 8007580:	e633      	b.n	80071ea <_dtoa_r+0x7c2>
 8007582:	2501      	movs	r5, #1
 8007584:	950e      	str	r5, [sp, #56]	; 0x38
 8007586:	9508      	str	r5, [sp, #32]
 8007588:	46aa      	mov	sl, r5
 800758a:	2100      	movs	r1, #0
 800758c:	6461      	str	r1, [r4, #68]	; 0x44
 800758e:	e601      	b.n	8007194 <_dtoa_r+0x76c>
 8007590:	461d      	mov	r5, r3
 8007592:	e7fa      	b.n	800758a <_dtoa_r+0xb62>
 8007594:	2a00      	cmp	r2, #0
 8007596:	dd15      	ble.n	80075c4 <_dtoa_r+0xb9c>
 8007598:	4659      	mov	r1, fp
 800759a:	2201      	movs	r2, #1
 800759c:	4620      	mov	r0, r4
 800759e:	f8cd c000 	str.w	ip, [sp]
 80075a2:	f001 fb4d 	bl	8008c40 <__lshift>
 80075a6:	4641      	mov	r1, r8
 80075a8:	4683      	mov	fp, r0
 80075aa:	f001 fb9f 	bl	8008cec <__mcmp>
 80075ae:	2800      	cmp	r0, #0
 80075b0:	f8dd c000 	ldr.w	ip, [sp]
 80075b4:	f340 8154 	ble.w	8007860 <_dtoa_r+0xe38>
 80075b8:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 80075bc:	f000 8111 	beq.w	80077e2 <_dtoa_r+0xdba>
 80075c0:	f10c 0c01 	add.w	ip, ip, #1
 80075c4:	46b2      	mov	sl, r6
 80075c6:	f887 c000 	strb.w	ip, [r7]
 80075ca:	1c7d      	adds	r5, r7, #1
 80075cc:	464e      	mov	r6, r9
 80075ce:	e520      	b.n	8007012 <_dtoa_r+0x5ea>
 80075d0:	d104      	bne.n	80075dc <_dtoa_r+0xbb4>
 80075d2:	f01c 0f01 	tst.w	ip, #1
 80075d6:	d001      	beq.n	80075dc <_dtoa_r+0xbb4>
 80075d8:	e50b      	b.n	8006ff2 <_dtoa_r+0x5ca>
 80075da:	4615      	mov	r5, r2
 80075dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80075e0:	2b30      	cmp	r3, #48	; 0x30
 80075e2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80075e6:	d0f8      	beq.n	80075da <_dtoa_r+0xbb2>
 80075e8:	e513      	b.n	8007012 <_dtoa_r+0x5ea>
 80075ea:	f8dd b000 	ldr.w	fp, [sp]
 80075ee:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 80075f2:	4644      	mov	r4, r8
 80075f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80075f8:	e9cd 2300 	strd	r2, r3, [sp]
 80075fc:	f7ff bb27 	b.w	8006c4e <_dtoa_r+0x226>
 8007600:	9b05      	ldr	r3, [sp, #20]
 8007602:	425d      	negs	r5, r3
 8007604:	2d00      	cmp	r5, #0
 8007606:	f000 80bd 	beq.w	8007784 <_dtoa_r+0xd5c>
 800760a:	4b86      	ldr	r3, [pc, #536]	; (8007824 <_dtoa_r+0xdfc>)
 800760c:	f005 020f 	and.w	r2, r5, #15
 8007610:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007618:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800761c:	f7f9 f884 	bl	8000728 <__aeabi_dmul>
 8007620:	112d      	asrs	r5, r5, #4
 8007622:	e9cd 0100 	strd	r0, r1, [sp]
 8007626:	f000 8127 	beq.w	8007878 <_dtoa_r+0xe50>
 800762a:	4e7f      	ldr	r6, [pc, #508]	; (8007828 <_dtoa_r+0xe00>)
 800762c:	f04f 0802 	mov.w	r8, #2
 8007630:	07eb      	lsls	r3, r5, #31
 8007632:	d505      	bpl.n	8007640 <_dtoa_r+0xc18>
 8007634:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007638:	f7f9 f876 	bl	8000728 <__aeabi_dmul>
 800763c:	f108 0801 	add.w	r8, r8, #1
 8007640:	106d      	asrs	r5, r5, #1
 8007642:	f106 0608 	add.w	r6, r6, #8
 8007646:	d1f3      	bne.n	8007630 <_dtoa_r+0xc08>
 8007648:	e9cd 0100 	strd	r0, r1, [sp]
 800764c:	e5e8      	b.n	8007220 <_dtoa_r+0x7f8>
 800764e:	9a05      	ldr	r2, [sp, #20]
 8007650:	3201      	adds	r2, #1
 8007652:	9205      	str	r2, [sp, #20]
 8007654:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007656:	2330      	movs	r3, #48	; 0x30
 8007658:	7013      	strb	r3, [r2, #0]
 800765a:	2331      	movs	r3, #49	; 0x31
 800765c:	7013      	strb	r3, [r2, #0]
 800765e:	f7ff bbba 	b.w	8006dd6 <_dtoa_r+0x3ae>
 8007662:	6871      	ldr	r1, [r6, #4]
 8007664:	4620      	mov	r0, r4
 8007666:	f001 f937 	bl	80088d8 <_Balloc>
 800766a:	6933      	ldr	r3, [r6, #16]
 800766c:	1c9a      	adds	r2, r3, #2
 800766e:	4605      	mov	r5, r0
 8007670:	0092      	lsls	r2, r2, #2
 8007672:	f106 010c 	add.w	r1, r6, #12
 8007676:	300c      	adds	r0, #12
 8007678:	f7f8 fe04 	bl	8000284 <memcpy>
 800767c:	4620      	mov	r0, r4
 800767e:	4629      	mov	r1, r5
 8007680:	2201      	movs	r2, #1
 8007682:	f001 fadd 	bl	8008c40 <__lshift>
 8007686:	4681      	mov	r9, r0
 8007688:	e4ff      	b.n	800708a <_dtoa_r+0x662>
 800768a:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 800768e:	f000 80a8 	beq.w	80077e2 <_dtoa_r+0xdba>
 8007692:	f10c 0c01 	add.w	ip, ip, #1
 8007696:	46b2      	mov	sl, r6
 8007698:	f887 c000 	strb.w	ip, [r7]
 800769c:	1c7d      	adds	r5, r7, #1
 800769e:	464e      	mov	r6, r9
 80076a0:	e4b7      	b.n	8007012 <_dtoa_r+0x5ea>
 80076a2:	46b2      	mov	sl, r6
 80076a4:	464e      	mov	r6, r9
 80076a6:	e494      	b.n	8006fd2 <_dtoa_r+0x5aa>
 80076a8:	f04f 0800 	mov.w	r8, #0
 80076ac:	4646      	mov	r6, r8
 80076ae:	e715      	b.n	80074dc <_dtoa_r+0xab4>
 80076b0:	495c      	ldr	r1, [pc, #368]	; (8007824 <_dtoa_r+0xdfc>)
 80076b2:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 80076b6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80076ba:	4632      	mov	r2, r6
 80076bc:	9315      	str	r3, [sp, #84]	; 0x54
 80076be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076c2:	463b      	mov	r3, r7
 80076c4:	f7f9 f830 	bl	8000728 <__aeabi_dmul>
 80076c8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80076cc:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80076d0:	4639      	mov	r1, r7
 80076d2:	4630      	mov	r0, r6
 80076d4:	f7f9 fac2 	bl	8000c5c <__aeabi_d2iz>
 80076d8:	4605      	mov	r5, r0
 80076da:	f7f8 ffbf 	bl	800065c <__aeabi_i2d>
 80076de:	4602      	mov	r2, r0
 80076e0:	460b      	mov	r3, r1
 80076e2:	4630      	mov	r0, r6
 80076e4:	4639      	mov	r1, r7
 80076e6:	f7f8 fe6b 	bl	80003c0 <__aeabi_dsub>
 80076ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076ec:	3530      	adds	r5, #48	; 0x30
 80076ee:	f1b9 0f01 	cmp.w	r9, #1
 80076f2:	7015      	strb	r5, [r2, #0]
 80076f4:	4606      	mov	r6, r0
 80076f6:	460f      	mov	r7, r1
 80076f8:	f102 0501 	add.w	r5, r2, #1
 80076fc:	d023      	beq.n	8007746 <_dtoa_r+0xd1e>
 80076fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007700:	f8cd b000 	str.w	fp, [sp]
 8007704:	444b      	add	r3, r9
 8007706:	4698      	mov	r8, r3
 8007708:	46a9      	mov	r9, r5
 800770a:	46ab      	mov	fp, r5
 800770c:	2200      	movs	r2, #0
 800770e:	4b47      	ldr	r3, [pc, #284]	; (800782c <_dtoa_r+0xe04>)
 8007710:	f7f9 f80a 	bl	8000728 <__aeabi_dmul>
 8007714:	460f      	mov	r7, r1
 8007716:	4606      	mov	r6, r0
 8007718:	f7f9 faa0 	bl	8000c5c <__aeabi_d2iz>
 800771c:	4605      	mov	r5, r0
 800771e:	f7f8 ff9d 	bl	800065c <__aeabi_i2d>
 8007722:	3530      	adds	r5, #48	; 0x30
 8007724:	4602      	mov	r2, r0
 8007726:	460b      	mov	r3, r1
 8007728:	4630      	mov	r0, r6
 800772a:	4639      	mov	r1, r7
 800772c:	f7f8 fe48 	bl	80003c0 <__aeabi_dsub>
 8007730:	f809 5b01 	strb.w	r5, [r9], #1
 8007734:	45c1      	cmp	r9, r8
 8007736:	d1e9      	bne.n	800770c <_dtoa_r+0xce4>
 8007738:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800773a:	465d      	mov	r5, fp
 800773c:	f8dd b000 	ldr.w	fp, [sp]
 8007740:	4606      	mov	r6, r0
 8007742:	460f      	mov	r7, r1
 8007744:	441d      	add	r5, r3
 8007746:	2200      	movs	r2, #0
 8007748:	4b39      	ldr	r3, [pc, #228]	; (8007830 <_dtoa_r+0xe08>)
 800774a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800774e:	f7f8 fe39 	bl	80003c4 <__adddf3>
 8007752:	4632      	mov	r2, r6
 8007754:	463b      	mov	r3, r7
 8007756:	f7f9 fa59 	bl	8000c0c <__aeabi_dcmplt>
 800775a:	2800      	cmp	r0, #0
 800775c:	d047      	beq.n	80077ee <_dtoa_r+0xdc6>
 800775e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007760:	9305      	str	r3, [sp, #20]
 8007762:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 8007766:	f7ff bb24 	b.w	8006db2 <_dtoa_r+0x38a>
 800776a:	9b07      	ldr	r3, [sp, #28]
 800776c:	9a08      	ldr	r2, [sp, #32]
 800776e:	1a9d      	subs	r5, r3, r2
 8007770:	2300      	movs	r3, #0
 8007772:	f7ff bb58 	b.w	8006e26 <_dtoa_r+0x3fe>
 8007776:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007778:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800777a:	9d07      	ldr	r5, [sp, #28]
 800777c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007780:	f7ff bb51 	b.w	8006e26 <_dtoa_r+0x3fe>
 8007784:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 8007788:	f04f 0802 	mov.w	r8, #2
 800778c:	ed8d 7b00 	vstr	d7, [sp]
 8007790:	e546      	b.n	8007220 <_dtoa_r+0x7f8>
 8007792:	9b08      	ldr	r3, [sp, #32]
 8007794:	2b00      	cmp	r3, #0
 8007796:	f43f aeb4 	beq.w	8007502 <_dtoa_r+0xada>
 800779a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800779c:	2d00      	cmp	r5, #0
 800779e:	f77f af29 	ble.w	80075f4 <_dtoa_r+0xbcc>
 80077a2:	2200      	movs	r2, #0
 80077a4:	4b21      	ldr	r3, [pc, #132]	; (800782c <_dtoa_r+0xe04>)
 80077a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077aa:	f7f8 ffbd 	bl	8000728 <__aeabi_dmul>
 80077ae:	4606      	mov	r6, r0
 80077b0:	460f      	mov	r7, r1
 80077b2:	f108 0001 	add.w	r0, r8, #1
 80077b6:	e9cd 6700 	strd	r6, r7, [sp]
 80077ba:	f7f8 ff4f 	bl	800065c <__aeabi_i2d>
 80077be:	4602      	mov	r2, r0
 80077c0:	460b      	mov	r3, r1
 80077c2:	4630      	mov	r0, r6
 80077c4:	4639      	mov	r1, r7
 80077c6:	f7f8 ffaf 	bl	8000728 <__aeabi_dmul>
 80077ca:	4b14      	ldr	r3, [pc, #80]	; (800781c <_dtoa_r+0xdf4>)
 80077cc:	2200      	movs	r2, #0
 80077ce:	f7f8 fdf9 	bl	80003c4 <__adddf3>
 80077d2:	9b05      	ldr	r3, [sp, #20]
 80077d4:	3b01      	subs	r3, #1
 80077d6:	4606      	mov	r6, r0
 80077d8:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 80077dc:	9314      	str	r3, [sp, #80]	; 0x50
 80077de:	46a9      	mov	r9, r5
 80077e0:	e53f      	b.n	8007262 <_dtoa_r+0x83a>
 80077e2:	2239      	movs	r2, #57	; 0x39
 80077e4:	46b2      	mov	sl, r6
 80077e6:	703a      	strb	r2, [r7, #0]
 80077e8:	464e      	mov	r6, r9
 80077ea:	1c7d      	adds	r5, r7, #1
 80077ec:	e403      	b.n	8006ff6 <_dtoa_r+0x5ce>
 80077ee:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80077f2:	2000      	movs	r0, #0
 80077f4:	490e      	ldr	r1, [pc, #56]	; (8007830 <_dtoa_r+0xe08>)
 80077f6:	f7f8 fde3 	bl	80003c0 <__aeabi_dsub>
 80077fa:	4632      	mov	r2, r6
 80077fc:	463b      	mov	r3, r7
 80077fe:	f7f9 fa23 	bl	8000c48 <__aeabi_dcmpgt>
 8007802:	b908      	cbnz	r0, 8007808 <_dtoa_r+0xde0>
 8007804:	e6f6      	b.n	80075f4 <_dtoa_r+0xbcc>
 8007806:	4615      	mov	r5, r2
 8007808:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800780c:	2b30      	cmp	r3, #48	; 0x30
 800780e:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007812:	d0f8      	beq.n	8007806 <_dtoa_r+0xdde>
 8007814:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007816:	9305      	str	r3, [sp, #20]
 8007818:	f7ff badd 	b.w	8006dd6 <_dtoa_r+0x3ae>
 800781c:	401c0000 	.word	0x401c0000
 8007820:	40140000 	.word	0x40140000
 8007824:	08019088 	.word	0x08019088
 8007828:	08019150 	.word	0x08019150
 800782c:	40240000 	.word	0x40240000
 8007830:	3fe00000 	.word	0x3fe00000
 8007834:	4643      	mov	r3, r8
 8007836:	f8dd b000 	ldr.w	fp, [sp]
 800783a:	46a0      	mov	r8, r4
 800783c:	461c      	mov	r4, r3
 800783e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007840:	9305      	str	r3, [sp, #20]
 8007842:	f7ff bab6 	b.w	8006db2 <_dtoa_r+0x38a>
 8007846:	46b9      	mov	r9, r7
 8007848:	f7ff bb6b 	b.w	8006f22 <_dtoa_r+0x4fa>
 800784c:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8007850:	d0c7      	beq.n	80077e2 <_dtoa_r+0xdba>
 8007852:	f1ba 0f00 	cmp.w	sl, #0
 8007856:	f77f aeb5 	ble.w	80075c4 <_dtoa_r+0xb9c>
 800785a:	f105 0c31 	add.w	ip, r5, #49	; 0x31
 800785e:	e6b1      	b.n	80075c4 <_dtoa_r+0xb9c>
 8007860:	f47f aeb0 	bne.w	80075c4 <_dtoa_r+0xb9c>
 8007864:	f01c 0f01 	tst.w	ip, #1
 8007868:	f43f aeac 	beq.w	80075c4 <_dtoa_r+0xb9c>
 800786c:	e6a4      	b.n	80075b8 <_dtoa_r+0xb90>
 800786e:	9b03      	ldr	r3, [sp, #12]
 8007870:	2b02      	cmp	r3, #2
 8007872:	dc04      	bgt.n	800787e <_dtoa_r+0xe56>
 8007874:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007876:	e605      	b.n	8007484 <_dtoa_r+0xa5c>
 8007878:	f04f 0802 	mov.w	r8, #2
 800787c:	e4d0      	b.n	8007220 <_dtoa_r+0x7f8>
 800787e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007880:	9308      	str	r3, [sp, #32]
 8007882:	e61b      	b.n	80074bc <_dtoa_r+0xa94>
 8007884:	9b03      	ldr	r3, [sp, #12]
 8007886:	2b02      	cmp	r3, #2
 8007888:	dcf9      	bgt.n	800787e <_dtoa_r+0xe56>
 800788a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800788c:	f7ff bbef 	b.w	800706e <_dtoa_r+0x646>
 8007890:	2500      	movs	r5, #0
 8007892:	6465      	str	r5, [r4, #68]	; 0x44
 8007894:	4629      	mov	r1, r5
 8007896:	4620      	mov	r0, r4
 8007898:	f001 f81e 	bl	80088d8 <_Balloc>
 800789c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078a0:	9308      	str	r3, [sp, #32]
 80078a2:	930e      	str	r3, [sp, #56]	; 0x38
 80078a4:	2301      	movs	r3, #1
 80078a6:	9009      	str	r0, [sp, #36]	; 0x24
 80078a8:	46aa      	mov	sl, r5
 80078aa:	6420      	str	r0, [r4, #64]	; 0x40
 80078ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80078ae:	f7ff b9ce 	b.w	8006c4e <_dtoa_r+0x226>
 80078b2:	f43f ab4e 	beq.w	8006f52 <_dtoa_r+0x52a>
 80078b6:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 80078ba:	f7ff bb43 	b.w	8006f44 <_dtoa_r+0x51c>
 80078be:	2301      	movs	r3, #1
 80078c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80078c2:	e55c      	b.n	800737e <_dtoa_r+0x956>
 80078c4:	2701      	movs	r7, #1
 80078c6:	f7ff b98d 	b.w	8006be4 <_dtoa_r+0x1bc>
 80078ca:	bf00      	nop
 80078cc:	f3af 8000 	nop.w

080078d0 <__sflush_r>:
 80078d0:	898b      	ldrh	r3, [r1, #12]
 80078d2:	b29a      	uxth	r2, r3
 80078d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078d8:	460d      	mov	r5, r1
 80078da:	0711      	lsls	r1, r2, #28
 80078dc:	4680      	mov	r8, r0
 80078de:	d43c      	bmi.n	800795a <__sflush_r+0x8a>
 80078e0:	686a      	ldr	r2, [r5, #4]
 80078e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80078e6:	2a00      	cmp	r2, #0
 80078e8:	81ab      	strh	r3, [r5, #12]
 80078ea:	dd65      	ble.n	80079b8 <__sflush_r+0xe8>
 80078ec:	6aae      	ldr	r6, [r5, #40]	; 0x28
 80078ee:	2e00      	cmp	r6, #0
 80078f0:	d04b      	beq.n	800798a <__sflush_r+0xba>
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80078f8:	2100      	movs	r1, #0
 80078fa:	b292      	uxth	r2, r2
 80078fc:	f8d8 4000 	ldr.w	r4, [r8]
 8007900:	f8c8 1000 	str.w	r1, [r8]
 8007904:	2a00      	cmp	r2, #0
 8007906:	d05b      	beq.n	80079c0 <__sflush_r+0xf0>
 8007908:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800790a:	075f      	lsls	r7, r3, #29
 800790c:	d505      	bpl.n	800791a <__sflush_r+0x4a>
 800790e:	6869      	ldr	r1, [r5, #4]
 8007910:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8007912:	1a52      	subs	r2, r2, r1
 8007914:	b10b      	cbz	r3, 800791a <__sflush_r+0x4a>
 8007916:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8007918:	1ad2      	subs	r2, r2, r3
 800791a:	4640      	mov	r0, r8
 800791c:	69e9      	ldr	r1, [r5, #28]
 800791e:	2300      	movs	r3, #0
 8007920:	47b0      	blx	r6
 8007922:	1c46      	adds	r6, r0, #1
 8007924:	d056      	beq.n	80079d4 <__sflush_r+0x104>
 8007926:	89ab      	ldrh	r3, [r5, #12]
 8007928:	692a      	ldr	r2, [r5, #16]
 800792a:	602a      	str	r2, [r5, #0]
 800792c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007930:	b29b      	uxth	r3, r3
 8007932:	2200      	movs	r2, #0
 8007934:	606a      	str	r2, [r5, #4]
 8007936:	04da      	lsls	r2, r3, #19
 8007938:	81ab      	strh	r3, [r5, #12]
 800793a:	d43b      	bmi.n	80079b4 <__sflush_r+0xe4>
 800793c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800793e:	f8c8 4000 	str.w	r4, [r8]
 8007942:	b311      	cbz	r1, 800798a <__sflush_r+0xba>
 8007944:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8007948:	4299      	cmp	r1, r3
 800794a:	d002      	beq.n	8007952 <__sflush_r+0x82>
 800794c:	4640      	mov	r0, r8
 800794e:	f000 f96b 	bl	8007c28 <_free_r>
 8007952:	2000      	movs	r0, #0
 8007954:	6328      	str	r0, [r5, #48]	; 0x30
 8007956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800795a:	692e      	ldr	r6, [r5, #16]
 800795c:	b1ae      	cbz	r6, 800798a <__sflush_r+0xba>
 800795e:	682c      	ldr	r4, [r5, #0]
 8007960:	602e      	str	r6, [r5, #0]
 8007962:	0791      	lsls	r1, r2, #30
 8007964:	bf0c      	ite	eq
 8007966:	696b      	ldreq	r3, [r5, #20]
 8007968:	2300      	movne	r3, #0
 800796a:	1ba4      	subs	r4, r4, r6
 800796c:	60ab      	str	r3, [r5, #8]
 800796e:	e00a      	b.n	8007986 <__sflush_r+0xb6>
 8007970:	4632      	mov	r2, r6
 8007972:	4623      	mov	r3, r4
 8007974:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8007976:	69e9      	ldr	r1, [r5, #28]
 8007978:	4640      	mov	r0, r8
 800797a:	47b8      	blx	r7
 800797c:	2800      	cmp	r0, #0
 800797e:	eba4 0400 	sub.w	r4, r4, r0
 8007982:	4406      	add	r6, r0
 8007984:	dd04      	ble.n	8007990 <__sflush_r+0xc0>
 8007986:	2c00      	cmp	r4, #0
 8007988:	dcf2      	bgt.n	8007970 <__sflush_r+0xa0>
 800798a:	2000      	movs	r0, #0
 800798c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007990:	89ab      	ldrh	r3, [r5, #12]
 8007992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007996:	81ab      	strh	r3, [r5, #12]
 8007998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800799c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079a0:	89ab      	ldrh	r3, [r5, #12]
 80079a2:	692a      	ldr	r2, [r5, #16]
 80079a4:	6069      	str	r1, [r5, #4]
 80079a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	81ab      	strh	r3, [r5, #12]
 80079ae:	04db      	lsls	r3, r3, #19
 80079b0:	602a      	str	r2, [r5, #0]
 80079b2:	d5c3      	bpl.n	800793c <__sflush_r+0x6c>
 80079b4:	6528      	str	r0, [r5, #80]	; 0x50
 80079b6:	e7c1      	b.n	800793c <__sflush_r+0x6c>
 80079b8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80079ba:	2a00      	cmp	r2, #0
 80079bc:	dc96      	bgt.n	80078ec <__sflush_r+0x1c>
 80079be:	e7e4      	b.n	800798a <__sflush_r+0xba>
 80079c0:	2301      	movs	r3, #1
 80079c2:	4640      	mov	r0, r8
 80079c4:	69e9      	ldr	r1, [r5, #28]
 80079c6:	47b0      	blx	r6
 80079c8:	1c43      	adds	r3, r0, #1
 80079ca:	4602      	mov	r2, r0
 80079cc:	d019      	beq.n	8007a02 <__sflush_r+0x132>
 80079ce:	89ab      	ldrh	r3, [r5, #12]
 80079d0:	6aae      	ldr	r6, [r5, #40]	; 0x28
 80079d2:	e79a      	b.n	800790a <__sflush_r+0x3a>
 80079d4:	f8d8 1000 	ldr.w	r1, [r8]
 80079d8:	2900      	cmp	r1, #0
 80079da:	d0e1      	beq.n	80079a0 <__sflush_r+0xd0>
 80079dc:	291d      	cmp	r1, #29
 80079de:	d007      	beq.n	80079f0 <__sflush_r+0x120>
 80079e0:	2916      	cmp	r1, #22
 80079e2:	d005      	beq.n	80079f0 <__sflush_r+0x120>
 80079e4:	89ab      	ldrh	r3, [r5, #12]
 80079e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079ea:	81ab      	strh	r3, [r5, #12]
 80079ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079f0:	89ab      	ldrh	r3, [r5, #12]
 80079f2:	692a      	ldr	r2, [r5, #16]
 80079f4:	602a      	str	r2, [r5, #0]
 80079f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079fa:	2200      	movs	r2, #0
 80079fc:	81ab      	strh	r3, [r5, #12]
 80079fe:	606a      	str	r2, [r5, #4]
 8007a00:	e79c      	b.n	800793c <__sflush_r+0x6c>
 8007a02:	f8d8 3000 	ldr.w	r3, [r8]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d0e1      	beq.n	80079ce <__sflush_r+0xfe>
 8007a0a:	2b1d      	cmp	r3, #29
 8007a0c:	d007      	beq.n	8007a1e <__sflush_r+0x14e>
 8007a0e:	2b16      	cmp	r3, #22
 8007a10:	d005      	beq.n	8007a1e <__sflush_r+0x14e>
 8007a12:	89ab      	ldrh	r3, [r5, #12]
 8007a14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a18:	81ab      	strh	r3, [r5, #12]
 8007a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a1e:	f8c8 4000 	str.w	r4, [r8]
 8007a22:	e7b2      	b.n	800798a <__sflush_r+0xba>

08007a24 <_fflush_r>:
 8007a24:	b510      	push	{r4, lr}
 8007a26:	4604      	mov	r4, r0
 8007a28:	b082      	sub	sp, #8
 8007a2a:	b108      	cbz	r0, 8007a30 <_fflush_r+0xc>
 8007a2c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007a2e:	b153      	cbz	r3, 8007a46 <_fflush_r+0x22>
 8007a30:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8007a34:	b908      	cbnz	r0, 8007a3a <_fflush_r+0x16>
 8007a36:	b002      	add	sp, #8
 8007a38:	bd10      	pop	{r4, pc}
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	b002      	add	sp, #8
 8007a3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a42:	f7ff bf45 	b.w	80078d0 <__sflush_r>
 8007a46:	9101      	str	r1, [sp, #4]
 8007a48:	f000 f880 	bl	8007b4c <__sinit>
 8007a4c:	9901      	ldr	r1, [sp, #4]
 8007a4e:	e7ef      	b.n	8007a30 <_fflush_r+0xc>

08007a50 <_cleanup_r>:
 8007a50:	4901      	ldr	r1, [pc, #4]	; (8007a58 <_cleanup_r+0x8>)
 8007a52:	f000 bb4d 	b.w	80080f0 <_fwalk_reent>
 8007a56:	bf00      	nop
 8007a58:	08009625 	.word	0x08009625

08007a5c <__sinit.part.1>:
 8007a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a60:	4b35      	ldr	r3, [pc, #212]	; (8007b38 <__sinit.part.1+0xdc>)
 8007a62:	6845      	ldr	r5, [r0, #4]
 8007a64:	63c3      	str	r3, [r0, #60]	; 0x3c
 8007a66:	2400      	movs	r4, #0
 8007a68:	4607      	mov	r7, r0
 8007a6a:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 8007a6e:	2304      	movs	r3, #4
 8007a70:	2103      	movs	r1, #3
 8007a72:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 8007a76:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 8007a7a:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 8007a7e:	b083      	sub	sp, #12
 8007a80:	602c      	str	r4, [r5, #0]
 8007a82:	606c      	str	r4, [r5, #4]
 8007a84:	60ac      	str	r4, [r5, #8]
 8007a86:	666c      	str	r4, [r5, #100]	; 0x64
 8007a88:	81ec      	strh	r4, [r5, #14]
 8007a8a:	612c      	str	r4, [r5, #16]
 8007a8c:	616c      	str	r4, [r5, #20]
 8007a8e:	61ac      	str	r4, [r5, #24]
 8007a90:	81ab      	strh	r3, [r5, #12]
 8007a92:	4621      	mov	r1, r4
 8007a94:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8007a98:	2208      	movs	r2, #8
 8007a9a:	f7fd f9c5 	bl	8004e28 <memset>
 8007a9e:	68be      	ldr	r6, [r7, #8]
 8007aa0:	f8df b098 	ldr.w	fp, [pc, #152]	; 8007b3c <__sinit.part.1+0xe0>
 8007aa4:	f8df a098 	ldr.w	sl, [pc, #152]	; 8007b40 <__sinit.part.1+0xe4>
 8007aa8:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8007b44 <__sinit.part.1+0xe8>
 8007aac:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8007b48 <__sinit.part.1+0xec>
 8007ab0:	f8c5 b020 	str.w	fp, [r5, #32]
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	2209      	movs	r2, #9
 8007ab8:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8007abc:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8007ac0:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8007ac4:	61ed      	str	r5, [r5, #28]
 8007ac6:	4621      	mov	r1, r4
 8007ac8:	81f3      	strh	r3, [r6, #14]
 8007aca:	81b2      	strh	r2, [r6, #12]
 8007acc:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8007ad0:	6034      	str	r4, [r6, #0]
 8007ad2:	6074      	str	r4, [r6, #4]
 8007ad4:	60b4      	str	r4, [r6, #8]
 8007ad6:	6674      	str	r4, [r6, #100]	; 0x64
 8007ad8:	6134      	str	r4, [r6, #16]
 8007ada:	6174      	str	r4, [r6, #20]
 8007adc:	61b4      	str	r4, [r6, #24]
 8007ade:	2208      	movs	r2, #8
 8007ae0:	9301      	str	r3, [sp, #4]
 8007ae2:	f7fd f9a1 	bl	8004e28 <memset>
 8007ae6:	68fd      	ldr	r5, [r7, #12]
 8007ae8:	61f6      	str	r6, [r6, #28]
 8007aea:	2012      	movs	r0, #18
 8007aec:	2202      	movs	r2, #2
 8007aee:	f8c6 b020 	str.w	fp, [r6, #32]
 8007af2:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 8007af6:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 8007afa:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 8007afe:	4621      	mov	r1, r4
 8007b00:	81a8      	strh	r0, [r5, #12]
 8007b02:	81ea      	strh	r2, [r5, #14]
 8007b04:	602c      	str	r4, [r5, #0]
 8007b06:	606c      	str	r4, [r5, #4]
 8007b08:	60ac      	str	r4, [r5, #8]
 8007b0a:	666c      	str	r4, [r5, #100]	; 0x64
 8007b0c:	612c      	str	r4, [r5, #16]
 8007b0e:	616c      	str	r4, [r5, #20]
 8007b10:	61ac      	str	r4, [r5, #24]
 8007b12:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8007b16:	2208      	movs	r2, #8
 8007b18:	f7fd f986 	bl	8004e28 <memset>
 8007b1c:	9b01      	ldr	r3, [sp, #4]
 8007b1e:	61ed      	str	r5, [r5, #28]
 8007b20:	f8c5 b020 	str.w	fp, [r5, #32]
 8007b24:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8007b28:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8007b2c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8007b30:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b32:	b003      	add	sp, #12
 8007b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b38:	08007a51 	.word	0x08007a51
 8007b3c:	08009365 	.word	0x08009365
 8007b40:	08009389 	.word	0x08009389
 8007b44:	080093c1 	.word	0x080093c1
 8007b48:	080093e1 	.word	0x080093e1

08007b4c <__sinit>:
 8007b4c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007b4e:	b103      	cbz	r3, 8007b52 <__sinit+0x6>
 8007b50:	4770      	bx	lr
 8007b52:	f7ff bf83 	b.w	8007a5c <__sinit.part.1>
 8007b56:	bf00      	nop

08007b58 <__sfp_lock_acquire>:
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop

08007b5c <__sfp_lock_release>:
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop

08007b60 <__libc_fini_array>:
 8007b60:	b538      	push	{r3, r4, r5, lr}
 8007b62:	4b08      	ldr	r3, [pc, #32]	; (8007b84 <__libc_fini_array+0x24>)
 8007b64:	4d08      	ldr	r5, [pc, #32]	; (8007b88 <__libc_fini_array+0x28>)
 8007b66:	1aed      	subs	r5, r5, r3
 8007b68:	10ac      	asrs	r4, r5, #2
 8007b6a:	bf18      	it	ne
 8007b6c:	18ed      	addne	r5, r5, r3
 8007b6e:	d005      	beq.n	8007b7c <__libc_fini_array+0x1c>
 8007b70:	3c01      	subs	r4, #1
 8007b72:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007b76:	4798      	blx	r3
 8007b78:	2c00      	cmp	r4, #0
 8007b7a:	d1f9      	bne.n	8007b70 <__libc_fini_array+0x10>
 8007b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b80:	f001 be3a 	b.w	80097f8 <_fini>
 8007b84:	08019188 	.word	0x08019188
 8007b88:	0801918c 	.word	0x0801918c

08007b8c <_malloc_trim_r>:
 8007b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b8e:	4f23      	ldr	r7, [pc, #140]	; (8007c1c <_malloc_trim_r+0x90>)
 8007b90:	460c      	mov	r4, r1
 8007b92:	4606      	mov	r6, r0
 8007b94:	f000 fe9c 	bl	80088d0 <__malloc_lock>
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	685d      	ldr	r5, [r3, #4]
 8007b9c:	f025 0503 	bic.w	r5, r5, #3
 8007ba0:	1b29      	subs	r1, r5, r4
 8007ba2:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 8007ba6:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8007baa:	f021 010f 	bic.w	r1, r1, #15
 8007bae:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 8007bb2:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8007bb6:	db07      	blt.n	8007bc8 <_malloc_trim_r+0x3c>
 8007bb8:	4630      	mov	r0, r6
 8007bba:	2100      	movs	r1, #0
 8007bbc:	f7fa f80e 	bl	8001bdc <_sbrk_r>
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	442b      	add	r3, r5
 8007bc4:	4298      	cmp	r0, r3
 8007bc6:	d004      	beq.n	8007bd2 <_malloc_trim_r+0x46>
 8007bc8:	4630      	mov	r0, r6
 8007bca:	f000 fe83 	bl	80088d4 <__malloc_unlock>
 8007bce:	2000      	movs	r0, #0
 8007bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bd2:	4630      	mov	r0, r6
 8007bd4:	4261      	negs	r1, r4
 8007bd6:	f7fa f801 	bl	8001bdc <_sbrk_r>
 8007bda:	3001      	adds	r0, #1
 8007bdc:	d00d      	beq.n	8007bfa <_malloc_trim_r+0x6e>
 8007bde:	4b10      	ldr	r3, [pc, #64]	; (8007c20 <_malloc_trim_r+0x94>)
 8007be0:	68ba      	ldr	r2, [r7, #8]
 8007be2:	6819      	ldr	r1, [r3, #0]
 8007be4:	1b2d      	subs	r5, r5, r4
 8007be6:	f045 0501 	orr.w	r5, r5, #1
 8007bea:	4630      	mov	r0, r6
 8007bec:	1b09      	subs	r1, r1, r4
 8007bee:	6055      	str	r5, [r2, #4]
 8007bf0:	6019      	str	r1, [r3, #0]
 8007bf2:	f000 fe6f 	bl	80088d4 <__malloc_unlock>
 8007bf6:	2001      	movs	r0, #1
 8007bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bfa:	4630      	mov	r0, r6
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	f7f9 ffed 	bl	8001bdc <_sbrk_r>
 8007c02:	68ba      	ldr	r2, [r7, #8]
 8007c04:	1a83      	subs	r3, r0, r2
 8007c06:	2b0f      	cmp	r3, #15
 8007c08:	ddde      	ble.n	8007bc8 <_malloc_trim_r+0x3c>
 8007c0a:	4c06      	ldr	r4, [pc, #24]	; (8007c24 <_malloc_trim_r+0x98>)
 8007c0c:	4904      	ldr	r1, [pc, #16]	; (8007c20 <_malloc_trim_r+0x94>)
 8007c0e:	6824      	ldr	r4, [r4, #0]
 8007c10:	f043 0301 	orr.w	r3, r3, #1
 8007c14:	1b00      	subs	r0, r0, r4
 8007c16:	6053      	str	r3, [r2, #4]
 8007c18:	6008      	str	r0, [r1, #0]
 8007c1a:	e7d5      	b.n	8007bc8 <_malloc_trim_r+0x3c>
 8007c1c:	20000628 	.word	0x20000628
 8007c20:	20000dec 	.word	0x20000dec
 8007c24:	20000a34 	.word	0x20000a34

08007c28 <_free_r>:
 8007c28:	2900      	cmp	r1, #0
 8007c2a:	d04e      	beq.n	8007cca <_free_r+0xa2>
 8007c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c30:	460c      	mov	r4, r1
 8007c32:	4680      	mov	r8, r0
 8007c34:	f000 fe4c 	bl	80088d0 <__malloc_lock>
 8007c38:	f854 7c04 	ldr.w	r7, [r4, #-4]
 8007c3c:	4962      	ldr	r1, [pc, #392]	; (8007dc8 <_free_r+0x1a0>)
 8007c3e:	f027 0201 	bic.w	r2, r7, #1
 8007c42:	f1a4 0508 	sub.w	r5, r4, #8
 8007c46:	18ab      	adds	r3, r5, r2
 8007c48:	688e      	ldr	r6, [r1, #8]
 8007c4a:	6858      	ldr	r0, [r3, #4]
 8007c4c:	429e      	cmp	r6, r3
 8007c4e:	f020 0003 	bic.w	r0, r0, #3
 8007c52:	d05a      	beq.n	8007d0a <_free_r+0xe2>
 8007c54:	07fe      	lsls	r6, r7, #31
 8007c56:	6058      	str	r0, [r3, #4]
 8007c58:	d40b      	bmi.n	8007c72 <_free_r+0x4a>
 8007c5a:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8007c5e:	1bed      	subs	r5, r5, r7
 8007c60:	f101 0e08 	add.w	lr, r1, #8
 8007c64:	68ac      	ldr	r4, [r5, #8]
 8007c66:	4574      	cmp	r4, lr
 8007c68:	443a      	add	r2, r7
 8007c6a:	d067      	beq.n	8007d3c <_free_r+0x114>
 8007c6c:	68ef      	ldr	r7, [r5, #12]
 8007c6e:	60e7      	str	r7, [r4, #12]
 8007c70:	60bc      	str	r4, [r7, #8]
 8007c72:	181c      	adds	r4, r3, r0
 8007c74:	6864      	ldr	r4, [r4, #4]
 8007c76:	07e4      	lsls	r4, r4, #31
 8007c78:	d40c      	bmi.n	8007c94 <_free_r+0x6c>
 8007c7a:	4f54      	ldr	r7, [pc, #336]	; (8007dcc <_free_r+0x1a4>)
 8007c7c:	689c      	ldr	r4, [r3, #8]
 8007c7e:	42bc      	cmp	r4, r7
 8007c80:	4402      	add	r2, r0
 8007c82:	d07c      	beq.n	8007d7e <_free_r+0x156>
 8007c84:	68d8      	ldr	r0, [r3, #12]
 8007c86:	60e0      	str	r0, [r4, #12]
 8007c88:	f042 0301 	orr.w	r3, r2, #1
 8007c8c:	6084      	str	r4, [r0, #8]
 8007c8e:	606b      	str	r3, [r5, #4]
 8007c90:	50aa      	str	r2, [r5, r2]
 8007c92:	e003      	b.n	8007c9c <_free_r+0x74>
 8007c94:	f042 0301 	orr.w	r3, r2, #1
 8007c98:	606b      	str	r3, [r5, #4]
 8007c9a:	50aa      	str	r2, [r5, r2]
 8007c9c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8007ca0:	d214      	bcs.n	8007ccc <_free_r+0xa4>
 8007ca2:	08d2      	lsrs	r2, r2, #3
 8007ca4:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 8007ca8:	6848      	ldr	r0, [r1, #4]
 8007caa:	689f      	ldr	r7, [r3, #8]
 8007cac:	60af      	str	r7, [r5, #8]
 8007cae:	1092      	asrs	r2, r2, #2
 8007cb0:	2401      	movs	r4, #1
 8007cb2:	fa04 f202 	lsl.w	r2, r4, r2
 8007cb6:	4310      	orrs	r0, r2
 8007cb8:	60eb      	str	r3, [r5, #12]
 8007cba:	6048      	str	r0, [r1, #4]
 8007cbc:	609d      	str	r5, [r3, #8]
 8007cbe:	60fd      	str	r5, [r7, #12]
 8007cc0:	4640      	mov	r0, r8
 8007cc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cc6:	f000 be05 	b.w	80088d4 <__malloc_unlock>
 8007cca:	4770      	bx	lr
 8007ccc:	0a53      	lsrs	r3, r2, #9
 8007cce:	2b04      	cmp	r3, #4
 8007cd0:	d847      	bhi.n	8007d62 <_free_r+0x13a>
 8007cd2:	0993      	lsrs	r3, r2, #6
 8007cd4:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8007cd8:	0060      	lsls	r0, r4, #1
 8007cda:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8007cde:	493a      	ldr	r1, [pc, #232]	; (8007dc8 <_free_r+0x1a0>)
 8007ce0:	6883      	ldr	r3, [r0, #8]
 8007ce2:	4283      	cmp	r3, r0
 8007ce4:	d043      	beq.n	8007d6e <_free_r+0x146>
 8007ce6:	6859      	ldr	r1, [r3, #4]
 8007ce8:	f021 0103 	bic.w	r1, r1, #3
 8007cec:	4291      	cmp	r1, r2
 8007cee:	d902      	bls.n	8007cf6 <_free_r+0xce>
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	4298      	cmp	r0, r3
 8007cf4:	d1f7      	bne.n	8007ce6 <_free_r+0xbe>
 8007cf6:	68da      	ldr	r2, [r3, #12]
 8007cf8:	60ea      	str	r2, [r5, #12]
 8007cfa:	60ab      	str	r3, [r5, #8]
 8007cfc:	4640      	mov	r0, r8
 8007cfe:	6095      	str	r5, [r2, #8]
 8007d00:	60dd      	str	r5, [r3, #12]
 8007d02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d06:	f000 bde5 	b.w	80088d4 <__malloc_unlock>
 8007d0a:	07ff      	lsls	r7, r7, #31
 8007d0c:	4402      	add	r2, r0
 8007d0e:	d407      	bmi.n	8007d20 <_free_r+0xf8>
 8007d10:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8007d14:	1aed      	subs	r5, r5, r3
 8007d16:	441a      	add	r2, r3
 8007d18:	68a8      	ldr	r0, [r5, #8]
 8007d1a:	68eb      	ldr	r3, [r5, #12]
 8007d1c:	60c3      	str	r3, [r0, #12]
 8007d1e:	6098      	str	r0, [r3, #8]
 8007d20:	4b2b      	ldr	r3, [pc, #172]	; (8007dd0 <_free_r+0x1a8>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f042 0001 	orr.w	r0, r2, #1
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	6068      	str	r0, [r5, #4]
 8007d2c:	608d      	str	r5, [r1, #8]
 8007d2e:	d3c7      	bcc.n	8007cc0 <_free_r+0x98>
 8007d30:	4b28      	ldr	r3, [pc, #160]	; (8007dd4 <_free_r+0x1ac>)
 8007d32:	4640      	mov	r0, r8
 8007d34:	6819      	ldr	r1, [r3, #0]
 8007d36:	f7ff ff29 	bl	8007b8c <_malloc_trim_r>
 8007d3a:	e7c1      	b.n	8007cc0 <_free_r+0x98>
 8007d3c:	1819      	adds	r1, r3, r0
 8007d3e:	6849      	ldr	r1, [r1, #4]
 8007d40:	07c9      	lsls	r1, r1, #31
 8007d42:	d409      	bmi.n	8007d58 <_free_r+0x130>
 8007d44:	68d9      	ldr	r1, [r3, #12]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	4402      	add	r2, r0
 8007d4a:	f042 0001 	orr.w	r0, r2, #1
 8007d4e:	60d9      	str	r1, [r3, #12]
 8007d50:	608b      	str	r3, [r1, #8]
 8007d52:	6068      	str	r0, [r5, #4]
 8007d54:	50aa      	str	r2, [r5, r2]
 8007d56:	e7b3      	b.n	8007cc0 <_free_r+0x98>
 8007d58:	f042 0301 	orr.w	r3, r2, #1
 8007d5c:	606b      	str	r3, [r5, #4]
 8007d5e:	50aa      	str	r2, [r5, r2]
 8007d60:	e7ae      	b.n	8007cc0 <_free_r+0x98>
 8007d62:	2b14      	cmp	r3, #20
 8007d64:	d814      	bhi.n	8007d90 <_free_r+0x168>
 8007d66:	f103 045b 	add.w	r4, r3, #91	; 0x5b
 8007d6a:	0060      	lsls	r0, r4, #1
 8007d6c:	e7b5      	b.n	8007cda <_free_r+0xb2>
 8007d6e:	684a      	ldr	r2, [r1, #4]
 8007d70:	10a4      	asrs	r4, r4, #2
 8007d72:	2001      	movs	r0, #1
 8007d74:	40a0      	lsls	r0, r4
 8007d76:	4302      	orrs	r2, r0
 8007d78:	604a      	str	r2, [r1, #4]
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	e7bc      	b.n	8007cf8 <_free_r+0xd0>
 8007d7e:	f042 0301 	orr.w	r3, r2, #1
 8007d82:	614d      	str	r5, [r1, #20]
 8007d84:	610d      	str	r5, [r1, #16]
 8007d86:	60ec      	str	r4, [r5, #12]
 8007d88:	60ac      	str	r4, [r5, #8]
 8007d8a:	606b      	str	r3, [r5, #4]
 8007d8c:	50aa      	str	r2, [r5, r2]
 8007d8e:	e797      	b.n	8007cc0 <_free_r+0x98>
 8007d90:	2b54      	cmp	r3, #84	; 0x54
 8007d92:	d804      	bhi.n	8007d9e <_free_r+0x176>
 8007d94:	0b13      	lsrs	r3, r2, #12
 8007d96:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 8007d9a:	0060      	lsls	r0, r4, #1
 8007d9c:	e79d      	b.n	8007cda <_free_r+0xb2>
 8007d9e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8007da2:	d804      	bhi.n	8007dae <_free_r+0x186>
 8007da4:	0bd3      	lsrs	r3, r2, #15
 8007da6:	f103 0477 	add.w	r4, r3, #119	; 0x77
 8007daa:	0060      	lsls	r0, r4, #1
 8007dac:	e795      	b.n	8007cda <_free_r+0xb2>
 8007dae:	f240 5054 	movw	r0, #1364	; 0x554
 8007db2:	4283      	cmp	r3, r0
 8007db4:	d804      	bhi.n	8007dc0 <_free_r+0x198>
 8007db6:	0c93      	lsrs	r3, r2, #18
 8007db8:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8007dbc:	0060      	lsls	r0, r4, #1
 8007dbe:	e78c      	b.n	8007cda <_free_r+0xb2>
 8007dc0:	20fc      	movs	r0, #252	; 0xfc
 8007dc2:	247e      	movs	r4, #126	; 0x7e
 8007dc4:	e789      	b.n	8007cda <_free_r+0xb2>
 8007dc6:	bf00      	nop
 8007dc8:	20000628 	.word	0x20000628
 8007dcc:	20000630 	.word	0x20000630
 8007dd0:	20000a30 	.word	0x20000a30
 8007dd4:	20000de8 	.word	0x20000de8

08007dd8 <__sfvwrite_r>:
 8007dd8:	6893      	ldr	r3, [r2, #8]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d07a      	beq.n	8007ed4 <__sfvwrite_r+0xfc>
 8007dde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007de2:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 8007de6:	f01e 0f08 	tst.w	lr, #8
 8007dea:	b083      	sub	sp, #12
 8007dec:	460c      	mov	r4, r1
 8007dee:	4681      	mov	r9, r0
 8007df0:	4616      	mov	r6, r2
 8007df2:	d026      	beq.n	8007e42 <__sfvwrite_r+0x6a>
 8007df4:	690b      	ldr	r3, [r1, #16]
 8007df6:	b323      	cbz	r3, 8007e42 <__sfvwrite_r+0x6a>
 8007df8:	f00e 0802 	and.w	r8, lr, #2
 8007dfc:	fa1f f088 	uxth.w	r0, r8
 8007e00:	6835      	ldr	r5, [r6, #0]
 8007e02:	b370      	cbz	r0, 8007e62 <__sfvwrite_r+0x8a>
 8007e04:	f04f 0a00 	mov.w	sl, #0
 8007e08:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 80080ec <__sfvwrite_r+0x314>
 8007e0c:	46d0      	mov	r8, sl
 8007e0e:	45d8      	cmp	r8, fp
 8007e10:	4643      	mov	r3, r8
 8007e12:	4652      	mov	r2, sl
 8007e14:	bf28      	it	cs
 8007e16:	465b      	movcs	r3, fp
 8007e18:	4648      	mov	r0, r9
 8007e1a:	f1b8 0f00 	cmp.w	r8, #0
 8007e1e:	d053      	beq.n	8007ec8 <__sfvwrite_r+0xf0>
 8007e20:	69e1      	ldr	r1, [r4, #28]
 8007e22:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8007e24:	47b8      	blx	r7
 8007e26:	2800      	cmp	r0, #0
 8007e28:	dd73      	ble.n	8007f12 <__sfvwrite_r+0x13a>
 8007e2a:	68b3      	ldr	r3, [r6, #8]
 8007e2c:	1a1b      	subs	r3, r3, r0
 8007e2e:	4482      	add	sl, r0
 8007e30:	ebc0 0808 	rsb	r8, r0, r8
 8007e34:	60b3      	str	r3, [r6, #8]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d1e9      	bne.n	8007e0e <__sfvwrite_r+0x36>
 8007e3a:	2000      	movs	r0, #0
 8007e3c:	b003      	add	sp, #12
 8007e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e42:	4648      	mov	r0, r9
 8007e44:	4621      	mov	r1, r4
 8007e46:	f7fe fce7 	bl	8006818 <__swsetup_r>
 8007e4a:	2800      	cmp	r0, #0
 8007e4c:	f040 8145 	bne.w	80080da <__sfvwrite_r+0x302>
 8007e50:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
 8007e54:	6835      	ldr	r5, [r6, #0]
 8007e56:	f00e 0802 	and.w	r8, lr, #2
 8007e5a:	fa1f f088 	uxth.w	r0, r8
 8007e5e:	2800      	cmp	r0, #0
 8007e60:	d1d0      	bne.n	8007e04 <__sfvwrite_r+0x2c>
 8007e62:	f01e 0b01 	ands.w	fp, lr, #1
 8007e66:	d15d      	bne.n	8007f24 <__sfvwrite_r+0x14c>
 8007e68:	46d8      	mov	r8, fp
 8007e6a:	f1b8 0f00 	cmp.w	r8, #0
 8007e6e:	d025      	beq.n	8007ebc <__sfvwrite_r+0xe4>
 8007e70:	f41e 7f00 	tst.w	lr, #512	; 0x200
 8007e74:	68a7      	ldr	r7, [r4, #8]
 8007e76:	d02f      	beq.n	8007ed8 <__sfvwrite_r+0x100>
 8007e78:	45b8      	cmp	r8, r7
 8007e7a:	46ba      	mov	sl, r7
 8007e7c:	f0c0 80a9 	bcc.w	8007fd2 <__sfvwrite_r+0x1fa>
 8007e80:	f41e 6f90 	tst.w	lr, #1152	; 0x480
 8007e84:	f040 80b6 	bne.w	8007ff4 <__sfvwrite_r+0x21c>
 8007e88:	6820      	ldr	r0, [r4, #0]
 8007e8a:	4652      	mov	r2, sl
 8007e8c:	4659      	mov	r1, fp
 8007e8e:	f000 fcbb 	bl	8008808 <memmove>
 8007e92:	68a0      	ldr	r0, [r4, #8]
 8007e94:	6822      	ldr	r2, [r4, #0]
 8007e96:	1bc0      	subs	r0, r0, r7
 8007e98:	eb02 030a 	add.w	r3, r2, sl
 8007e9c:	60a0      	str	r0, [r4, #8]
 8007e9e:	6023      	str	r3, [r4, #0]
 8007ea0:	4640      	mov	r0, r8
 8007ea2:	68b3      	ldr	r3, [r6, #8]
 8007ea4:	1a1b      	subs	r3, r3, r0
 8007ea6:	4483      	add	fp, r0
 8007ea8:	ebc0 0808 	rsb	r8, r0, r8
 8007eac:	60b3      	str	r3, [r6, #8]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d0c3      	beq.n	8007e3a <__sfvwrite_r+0x62>
 8007eb2:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
 8007eb6:	f1b8 0f00 	cmp.w	r8, #0
 8007eba:	d1d9      	bne.n	8007e70 <__sfvwrite_r+0x98>
 8007ebc:	f8d5 b000 	ldr.w	fp, [r5]
 8007ec0:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8007ec4:	3508      	adds	r5, #8
 8007ec6:	e7d0      	b.n	8007e6a <__sfvwrite_r+0x92>
 8007ec8:	f8d5 a000 	ldr.w	sl, [r5]
 8007ecc:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8007ed0:	3508      	adds	r5, #8
 8007ed2:	e79c      	b.n	8007e0e <__sfvwrite_r+0x36>
 8007ed4:	2000      	movs	r0, #0
 8007ed6:	4770      	bx	lr
 8007ed8:	6820      	ldr	r0, [r4, #0]
 8007eda:	6923      	ldr	r3, [r4, #16]
 8007edc:	4298      	cmp	r0, r3
 8007ede:	d803      	bhi.n	8007ee8 <__sfvwrite_r+0x110>
 8007ee0:	6962      	ldr	r2, [r4, #20]
 8007ee2:	4590      	cmp	r8, r2
 8007ee4:	f080 80b9 	bcs.w	800805a <__sfvwrite_r+0x282>
 8007ee8:	4547      	cmp	r7, r8
 8007eea:	bf28      	it	cs
 8007eec:	4647      	movcs	r7, r8
 8007eee:	463a      	mov	r2, r7
 8007ef0:	4659      	mov	r1, fp
 8007ef2:	f000 fc89 	bl	8008808 <memmove>
 8007ef6:	68a3      	ldr	r3, [r4, #8]
 8007ef8:	6822      	ldr	r2, [r4, #0]
 8007efa:	1bdb      	subs	r3, r3, r7
 8007efc:	443a      	add	r2, r7
 8007efe:	60a3      	str	r3, [r4, #8]
 8007f00:	6022      	str	r2, [r4, #0]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d14a      	bne.n	8007f9c <__sfvwrite_r+0x1c4>
 8007f06:	4648      	mov	r0, r9
 8007f08:	4621      	mov	r1, r4
 8007f0a:	f7ff fd8b 	bl	8007a24 <_fflush_r>
 8007f0e:	2800      	cmp	r0, #0
 8007f10:	d044      	beq.n	8007f9c <__sfvwrite_r+0x1c4>
 8007f12:	89a3      	ldrh	r3, [r4, #12]
 8007f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f1c:	81a3      	strh	r3, [r4, #12]
 8007f1e:	b003      	add	sp, #12
 8007f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f24:	4680      	mov	r8, r0
 8007f26:	9000      	str	r0, [sp, #0]
 8007f28:	4683      	mov	fp, r0
 8007f2a:	4682      	mov	sl, r0
 8007f2c:	f1ba 0f00 	cmp.w	sl, #0
 8007f30:	d02c      	beq.n	8007f8c <__sfvwrite_r+0x1b4>
 8007f32:	9b00      	ldr	r3, [sp, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d050      	beq.n	8007fda <__sfvwrite_r+0x202>
 8007f38:	6820      	ldr	r0, [r4, #0]
 8007f3a:	6921      	ldr	r1, [r4, #16]
 8007f3c:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8007f40:	6962      	ldr	r2, [r4, #20]
 8007f42:	45d0      	cmp	r8, sl
 8007f44:	4643      	mov	r3, r8
 8007f46:	bf28      	it	cs
 8007f48:	4653      	movcs	r3, sl
 8007f4a:	4288      	cmp	r0, r1
 8007f4c:	461f      	mov	r7, r3
 8007f4e:	d904      	bls.n	8007f5a <__sfvwrite_r+0x182>
 8007f50:	eb0e 0c02 	add.w	ip, lr, r2
 8007f54:	4563      	cmp	r3, ip
 8007f56:	f300 8092 	bgt.w	800807e <__sfvwrite_r+0x2a6>
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	db20      	blt.n	8007fa0 <__sfvwrite_r+0x1c8>
 8007f5e:	4613      	mov	r3, r2
 8007f60:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8007f62:	69e1      	ldr	r1, [r4, #28]
 8007f64:	4648      	mov	r0, r9
 8007f66:	465a      	mov	r2, fp
 8007f68:	47b8      	blx	r7
 8007f6a:	1e07      	subs	r7, r0, #0
 8007f6c:	ddd1      	ble.n	8007f12 <__sfvwrite_r+0x13a>
 8007f6e:	ebb8 0807 	subs.w	r8, r8, r7
 8007f72:	d025      	beq.n	8007fc0 <__sfvwrite_r+0x1e8>
 8007f74:	68b3      	ldr	r3, [r6, #8]
 8007f76:	1bdb      	subs	r3, r3, r7
 8007f78:	44bb      	add	fp, r7
 8007f7a:	ebc7 0a0a 	rsb	sl, r7, sl
 8007f7e:	60b3      	str	r3, [r6, #8]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f43f af5a 	beq.w	8007e3a <__sfvwrite_r+0x62>
 8007f86:	f1ba 0f00 	cmp.w	sl, #0
 8007f8a:	d1d2      	bne.n	8007f32 <__sfvwrite_r+0x15a>
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	f8d5 b000 	ldr.w	fp, [r5]
 8007f92:	f8d5 a004 	ldr.w	sl, [r5, #4]
 8007f96:	9300      	str	r3, [sp, #0]
 8007f98:	3508      	adds	r5, #8
 8007f9a:	e7c7      	b.n	8007f2c <__sfvwrite_r+0x154>
 8007f9c:	4638      	mov	r0, r7
 8007f9e:	e780      	b.n	8007ea2 <__sfvwrite_r+0xca>
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	4659      	mov	r1, fp
 8007fa4:	9301      	str	r3, [sp, #4]
 8007fa6:	f000 fc2f 	bl	8008808 <memmove>
 8007faa:	68a2      	ldr	r2, [r4, #8]
 8007fac:	6821      	ldr	r1, [r4, #0]
 8007fae:	9b01      	ldr	r3, [sp, #4]
 8007fb0:	ebb8 0807 	subs.w	r8, r8, r7
 8007fb4:	eba2 0203 	sub.w	r2, r2, r3
 8007fb8:	440b      	add	r3, r1
 8007fba:	60a2      	str	r2, [r4, #8]
 8007fbc:	6023      	str	r3, [r4, #0]
 8007fbe:	d1d9      	bne.n	8007f74 <__sfvwrite_r+0x19c>
 8007fc0:	4648      	mov	r0, r9
 8007fc2:	4621      	mov	r1, r4
 8007fc4:	f7ff fd2e 	bl	8007a24 <_fflush_r>
 8007fc8:	2800      	cmp	r0, #0
 8007fca:	d1a2      	bne.n	8007f12 <__sfvwrite_r+0x13a>
 8007fcc:	f8cd 8000 	str.w	r8, [sp]
 8007fd0:	e7d0      	b.n	8007f74 <__sfvwrite_r+0x19c>
 8007fd2:	6820      	ldr	r0, [r4, #0]
 8007fd4:	4647      	mov	r7, r8
 8007fd6:	46c2      	mov	sl, r8
 8007fd8:	e757      	b.n	8007e8a <__sfvwrite_r+0xb2>
 8007fda:	4658      	mov	r0, fp
 8007fdc:	210a      	movs	r1, #10
 8007fde:	4652      	mov	r2, sl
 8007fe0:	f000 fbc8 	bl	8008774 <memchr>
 8007fe4:	2800      	cmp	r0, #0
 8007fe6:	d073      	beq.n	80080d0 <__sfvwrite_r+0x2f8>
 8007fe8:	3001      	adds	r0, #1
 8007fea:	2301      	movs	r3, #1
 8007fec:	ebcb 0800 	rsb	r8, fp, r0
 8007ff0:	9300      	str	r3, [sp, #0]
 8007ff2:	e7a1      	b.n	8007f38 <__sfvwrite_r+0x160>
 8007ff4:	6967      	ldr	r7, [r4, #20]
 8007ff6:	6921      	ldr	r1, [r4, #16]
 8007ff8:	6823      	ldr	r3, [r4, #0]
 8007ffa:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8007ffe:	1a5b      	subs	r3, r3, r1
 8008000:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8008004:	1c58      	adds	r0, r3, #1
 8008006:	107f      	asrs	r7, r7, #1
 8008008:	4440      	add	r0, r8
 800800a:	4287      	cmp	r7, r0
 800800c:	463a      	mov	r2, r7
 800800e:	bf3c      	itt	cc
 8008010:	4607      	movcc	r7, r0
 8008012:	463a      	movcc	r2, r7
 8008014:	f41e 6f80 	tst.w	lr, #1024	; 0x400
 8008018:	9300      	str	r3, [sp, #0]
 800801a:	d046      	beq.n	80080aa <__sfvwrite_r+0x2d2>
 800801c:	4611      	mov	r1, r2
 800801e:	4648      	mov	r0, r9
 8008020:	f000 f916 	bl	8008250 <_malloc_r>
 8008024:	9b00      	ldr	r3, [sp, #0]
 8008026:	4682      	mov	sl, r0
 8008028:	2800      	cmp	r0, #0
 800802a:	d059      	beq.n	80080e0 <__sfvwrite_r+0x308>
 800802c:	461a      	mov	r2, r3
 800802e:	6921      	ldr	r1, [r4, #16]
 8008030:	9300      	str	r3, [sp, #0]
 8008032:	f7f8 f927 	bl	8000284 <memcpy>
 8008036:	89a2      	ldrh	r2, [r4, #12]
 8008038:	9b00      	ldr	r3, [sp, #0]
 800803a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800803e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008042:	81a2      	strh	r2, [r4, #12]
 8008044:	eb0a 0003 	add.w	r0, sl, r3
 8008048:	1afb      	subs	r3, r7, r3
 800804a:	f8c4 a010 	str.w	sl, [r4, #16]
 800804e:	6167      	str	r7, [r4, #20]
 8008050:	6020      	str	r0, [r4, #0]
 8008052:	60a3      	str	r3, [r4, #8]
 8008054:	4647      	mov	r7, r8
 8008056:	46c2      	mov	sl, r8
 8008058:	e717      	b.n	8007e8a <__sfvwrite_r+0xb2>
 800805a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800805e:	4543      	cmp	r3, r8
 8008060:	bf28      	it	cs
 8008062:	4643      	movcs	r3, r8
 8008064:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8008066:	fb93 f3f2 	sdiv	r3, r3, r2
 800806a:	4648      	mov	r0, r9
 800806c:	fb03 f302 	mul.w	r3, r3, r2
 8008070:	69e1      	ldr	r1, [r4, #28]
 8008072:	465a      	mov	r2, fp
 8008074:	47b8      	blx	r7
 8008076:	2800      	cmp	r0, #0
 8008078:	f73f af13 	bgt.w	8007ea2 <__sfvwrite_r+0xca>
 800807c:	e749      	b.n	8007f12 <__sfvwrite_r+0x13a>
 800807e:	4662      	mov	r2, ip
 8008080:	4659      	mov	r1, fp
 8008082:	f8cd c004 	str.w	ip, [sp, #4]
 8008086:	f000 fbbf 	bl	8008808 <memmove>
 800808a:	6823      	ldr	r3, [r4, #0]
 800808c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8008090:	4463      	add	r3, ip
 8008092:	6023      	str	r3, [r4, #0]
 8008094:	4648      	mov	r0, r9
 8008096:	4621      	mov	r1, r4
 8008098:	f7ff fcc4 	bl	8007a24 <_fflush_r>
 800809c:	f8dd c004 	ldr.w	ip, [sp, #4]
 80080a0:	2800      	cmp	r0, #0
 80080a2:	f47f af36 	bne.w	8007f12 <__sfvwrite_r+0x13a>
 80080a6:	4667      	mov	r7, ip
 80080a8:	e761      	b.n	8007f6e <__sfvwrite_r+0x196>
 80080aa:	4648      	mov	r0, r9
 80080ac:	f000 ff36 	bl	8008f1c <_realloc_r>
 80080b0:	9b00      	ldr	r3, [sp, #0]
 80080b2:	4682      	mov	sl, r0
 80080b4:	2800      	cmp	r0, #0
 80080b6:	d1c5      	bne.n	8008044 <__sfvwrite_r+0x26c>
 80080b8:	4648      	mov	r0, r9
 80080ba:	6921      	ldr	r1, [r4, #16]
 80080bc:	f7ff fdb4 	bl	8007c28 <_free_r>
 80080c0:	89a3      	ldrh	r3, [r4, #12]
 80080c2:	220c      	movs	r2, #12
 80080c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	f8c9 2000 	str.w	r2, [r9]
 80080ce:	e721      	b.n	8007f14 <__sfvwrite_r+0x13c>
 80080d0:	2301      	movs	r3, #1
 80080d2:	f10a 0801 	add.w	r8, sl, #1
 80080d6:	9300      	str	r3, [sp, #0]
 80080d8:	e72e      	b.n	8007f38 <__sfvwrite_r+0x160>
 80080da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080de:	e6ad      	b.n	8007e3c <__sfvwrite_r+0x64>
 80080e0:	230c      	movs	r3, #12
 80080e2:	f8c9 3000 	str.w	r3, [r9]
 80080e6:	89a3      	ldrh	r3, [r4, #12]
 80080e8:	e714      	b.n	8007f14 <__sfvwrite_r+0x13c>
 80080ea:	bf00      	nop
 80080ec:	7ffffc00 	.word	0x7ffffc00

080080f0 <_fwalk_reent>:
 80080f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080f4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 80080f8:	d01f      	beq.n	800813a <_fwalk_reent+0x4a>
 80080fa:	4688      	mov	r8, r1
 80080fc:	4606      	mov	r6, r0
 80080fe:	f04f 0900 	mov.w	r9, #0
 8008102:	687d      	ldr	r5, [r7, #4]
 8008104:	68bc      	ldr	r4, [r7, #8]
 8008106:	3d01      	subs	r5, #1
 8008108:	d411      	bmi.n	800812e <_fwalk_reent+0x3e>
 800810a:	89a3      	ldrh	r3, [r4, #12]
 800810c:	2b01      	cmp	r3, #1
 800810e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8008112:	d908      	bls.n	8008126 <_fwalk_reent+0x36>
 8008114:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8008118:	3301      	adds	r3, #1
 800811a:	4621      	mov	r1, r4
 800811c:	4630      	mov	r0, r6
 800811e:	d002      	beq.n	8008126 <_fwalk_reent+0x36>
 8008120:	47c0      	blx	r8
 8008122:	ea49 0900 	orr.w	r9, r9, r0
 8008126:	1c6b      	adds	r3, r5, #1
 8008128:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800812c:	d1ed      	bne.n	800810a <_fwalk_reent+0x1a>
 800812e:	683f      	ldr	r7, [r7, #0]
 8008130:	2f00      	cmp	r7, #0
 8008132:	d1e6      	bne.n	8008102 <_fwalk_reent+0x12>
 8008134:	4648      	mov	r0, r9
 8008136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800813a:	46b9      	mov	r9, r7
 800813c:	4648      	mov	r0, r9
 800813e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008142:	bf00      	nop

08008144 <__locale_charset>:
 8008144:	4800      	ldr	r0, [pc, #0]	; (8008148 <__locale_charset+0x4>)
 8008146:	4770      	bx	lr
 8008148:	20000604 	.word	0x20000604

0800814c <__locale_mb_cur_max>:
 800814c:	4b01      	ldr	r3, [pc, #4]	; (8008154 <__locale_mb_cur_max+0x8>)
 800814e:	6818      	ldr	r0, [r3, #0]
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	20000624 	.word	0x20000624

08008158 <_localeconv_r>:
 8008158:	4800      	ldr	r0, [pc, #0]	; (800815c <_localeconv_r+0x4>)
 800815a:	4770      	bx	lr
 800815c:	200005cc 	.word	0x200005cc

08008160 <__smakebuf_r>:
 8008160:	898b      	ldrh	r3, [r1, #12]
 8008162:	b29a      	uxth	r2, r3
 8008164:	f012 0f02 	tst.w	r2, #2
 8008168:	d13c      	bne.n	80081e4 <__smakebuf_r+0x84>
 800816a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800816c:	460c      	mov	r4, r1
 800816e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008172:	2900      	cmp	r1, #0
 8008174:	b091      	sub	sp, #68	; 0x44
 8008176:	4605      	mov	r5, r0
 8008178:	db19      	blt.n	80081ae <__smakebuf_r+0x4e>
 800817a:	aa01      	add	r2, sp, #4
 800817c:	f7f9 fd4b 	bl	8001c16 <_fstat_r>
 8008180:	2800      	cmp	r0, #0
 8008182:	db12      	blt.n	80081aa <__smakebuf_r+0x4a>
 8008184:	9b02      	ldr	r3, [sp, #8]
 8008186:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800818a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800818e:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
 8008192:	fab7 f787 	clz	r7, r7
 8008196:	ea4f 1757 	mov.w	r7, r7, lsr #5
 800819a:	d02a      	beq.n	80081f2 <__smakebuf_r+0x92>
 800819c:	89a3      	ldrh	r3, [r4, #12]
 800819e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80081a2:	81a3      	strh	r3, [r4, #12]
 80081a4:	f44f 6680 	mov.w	r6, #1024	; 0x400
 80081a8:	e00b      	b.n	80081c2 <__smakebuf_r+0x62>
 80081aa:	89a3      	ldrh	r3, [r4, #12]
 80081ac:	b29a      	uxth	r2, r3
 80081ae:	f012 0f80 	tst.w	r2, #128	; 0x80
 80081b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80081b6:	81a3      	strh	r3, [r4, #12]
 80081b8:	bf0c      	ite	eq
 80081ba:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 80081be:	2640      	movne	r6, #64	; 0x40
 80081c0:	2700      	movs	r7, #0
 80081c2:	4628      	mov	r0, r5
 80081c4:	4631      	mov	r1, r6
 80081c6:	f000 f843 	bl	8008250 <_malloc_r>
 80081ca:	89a3      	ldrh	r3, [r4, #12]
 80081cc:	b340      	cbz	r0, 8008220 <__smakebuf_r+0xc0>
 80081ce:	4a1a      	ldr	r2, [pc, #104]	; (8008238 <__smakebuf_r+0xd8>)
 80081d0:	63ea      	str	r2, [r5, #60]	; 0x3c
 80081d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081d6:	81a3      	strh	r3, [r4, #12]
 80081d8:	6020      	str	r0, [r4, #0]
 80081da:	6120      	str	r0, [r4, #16]
 80081dc:	6166      	str	r6, [r4, #20]
 80081de:	b99f      	cbnz	r7, 8008208 <__smakebuf_r+0xa8>
 80081e0:	b011      	add	sp, #68	; 0x44
 80081e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081e4:	f101 0343 	add.w	r3, r1, #67	; 0x43
 80081e8:	2201      	movs	r2, #1
 80081ea:	600b      	str	r3, [r1, #0]
 80081ec:	610b      	str	r3, [r1, #16]
 80081ee:	614a      	str	r2, [r1, #20]
 80081f0:	4770      	bx	lr
 80081f2:	4b12      	ldr	r3, [pc, #72]	; (800823c <__smakebuf_r+0xdc>)
 80081f4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d1d0      	bne.n	800819c <__smakebuf_r+0x3c>
 80081fa:	89a3      	ldrh	r3, [r4, #12]
 80081fc:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8008200:	4333      	orrs	r3, r6
 8008202:	81a3      	strh	r3, [r4, #12]
 8008204:	64e6      	str	r6, [r4, #76]	; 0x4c
 8008206:	e7dc      	b.n	80081c2 <__smakebuf_r+0x62>
 8008208:	4628      	mov	r0, r5
 800820a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800820e:	f7f9 fd07 	bl	8001c20 <_isatty_r>
 8008212:	2800      	cmp	r0, #0
 8008214:	d0e4      	beq.n	80081e0 <__smakebuf_r+0x80>
 8008216:	89a3      	ldrh	r3, [r4, #12]
 8008218:	f043 0301 	orr.w	r3, r3, #1
 800821c:	81a3      	strh	r3, [r4, #12]
 800821e:	e7df      	b.n	80081e0 <__smakebuf_r+0x80>
 8008220:	059a      	lsls	r2, r3, #22
 8008222:	d4dd      	bmi.n	80081e0 <__smakebuf_r+0x80>
 8008224:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008228:	f043 0302 	orr.w	r3, r3, #2
 800822c:	2101      	movs	r1, #1
 800822e:	81a3      	strh	r3, [r4, #12]
 8008230:	6022      	str	r2, [r4, #0]
 8008232:	6122      	str	r2, [r4, #16]
 8008234:	6161      	str	r1, [r4, #20]
 8008236:	e7d3      	b.n	80081e0 <__smakebuf_r+0x80>
 8008238:	08007a51 	.word	0x08007a51
 800823c:	080093c1 	.word	0x080093c1

08008240 <malloc>:
 8008240:	4b02      	ldr	r3, [pc, #8]	; (800824c <malloc+0xc>)
 8008242:	4601      	mov	r1, r0
 8008244:	6818      	ldr	r0, [r3, #0]
 8008246:	f000 b803 	b.w	8008250 <_malloc_r>
 800824a:	bf00      	nop
 800824c:	200005c8 	.word	0x200005c8

08008250 <_malloc_r>:
 8008250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008254:	f101 050b 	add.w	r5, r1, #11
 8008258:	2d16      	cmp	r5, #22
 800825a:	b083      	sub	sp, #12
 800825c:	4606      	mov	r6, r0
 800825e:	d927      	bls.n	80082b0 <_malloc_r+0x60>
 8008260:	f035 0507 	bics.w	r5, r5, #7
 8008264:	f100 80b6 	bmi.w	80083d4 <_malloc_r+0x184>
 8008268:	42a9      	cmp	r1, r5
 800826a:	f200 80b3 	bhi.w	80083d4 <_malloc_r+0x184>
 800826e:	f000 fb2f 	bl	80088d0 <__malloc_lock>
 8008272:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8008276:	d222      	bcs.n	80082be <_malloc_r+0x6e>
 8008278:	4fc2      	ldr	r7, [pc, #776]	; (8008584 <_malloc_r+0x334>)
 800827a:	08e8      	lsrs	r0, r5, #3
 800827c:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
 8008280:	68dc      	ldr	r4, [r3, #12]
 8008282:	429c      	cmp	r4, r3
 8008284:	f000 81c8 	beq.w	8008618 <_malloc_r+0x3c8>
 8008288:	6863      	ldr	r3, [r4, #4]
 800828a:	68e1      	ldr	r1, [r4, #12]
 800828c:	68a5      	ldr	r5, [r4, #8]
 800828e:	f023 0303 	bic.w	r3, r3, #3
 8008292:	4423      	add	r3, r4
 8008294:	4630      	mov	r0, r6
 8008296:	685a      	ldr	r2, [r3, #4]
 8008298:	60e9      	str	r1, [r5, #12]
 800829a:	f042 0201 	orr.w	r2, r2, #1
 800829e:	608d      	str	r5, [r1, #8]
 80082a0:	605a      	str	r2, [r3, #4]
 80082a2:	f000 fb17 	bl	80088d4 <__malloc_unlock>
 80082a6:	3408      	adds	r4, #8
 80082a8:	4620      	mov	r0, r4
 80082aa:	b003      	add	sp, #12
 80082ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082b0:	2910      	cmp	r1, #16
 80082b2:	f200 808f 	bhi.w	80083d4 <_malloc_r+0x184>
 80082b6:	f000 fb0b 	bl	80088d0 <__malloc_lock>
 80082ba:	2510      	movs	r5, #16
 80082bc:	e7dc      	b.n	8008278 <_malloc_r+0x28>
 80082be:	0a68      	lsrs	r0, r5, #9
 80082c0:	f000 808f 	beq.w	80083e2 <_malloc_r+0x192>
 80082c4:	2804      	cmp	r0, #4
 80082c6:	f200 8154 	bhi.w	8008572 <_malloc_r+0x322>
 80082ca:	09a8      	lsrs	r0, r5, #6
 80082cc:	3038      	adds	r0, #56	; 0x38
 80082ce:	0041      	lsls	r1, r0, #1
 80082d0:	4fac      	ldr	r7, [pc, #688]	; (8008584 <_malloc_r+0x334>)
 80082d2:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 80082d6:	68cc      	ldr	r4, [r1, #12]
 80082d8:	42a1      	cmp	r1, r4
 80082da:	d106      	bne.n	80082ea <_malloc_r+0x9a>
 80082dc:	e00c      	b.n	80082f8 <_malloc_r+0xa8>
 80082de:	2a00      	cmp	r2, #0
 80082e0:	f280 8082 	bge.w	80083e8 <_malloc_r+0x198>
 80082e4:	68e4      	ldr	r4, [r4, #12]
 80082e6:	42a1      	cmp	r1, r4
 80082e8:	d006      	beq.n	80082f8 <_malloc_r+0xa8>
 80082ea:	6863      	ldr	r3, [r4, #4]
 80082ec:	f023 0303 	bic.w	r3, r3, #3
 80082f0:	1b5a      	subs	r2, r3, r5
 80082f2:	2a0f      	cmp	r2, #15
 80082f4:	ddf3      	ble.n	80082de <_malloc_r+0x8e>
 80082f6:	3801      	subs	r0, #1
 80082f8:	3001      	adds	r0, #1
 80082fa:	49a2      	ldr	r1, [pc, #648]	; (8008584 <_malloc_r+0x334>)
 80082fc:	693c      	ldr	r4, [r7, #16]
 80082fe:	f101 0e08 	add.w	lr, r1, #8
 8008302:	4574      	cmp	r4, lr
 8008304:	f000 817d 	beq.w	8008602 <_malloc_r+0x3b2>
 8008308:	6863      	ldr	r3, [r4, #4]
 800830a:	f023 0303 	bic.w	r3, r3, #3
 800830e:	1b5a      	subs	r2, r3, r5
 8008310:	2a0f      	cmp	r2, #15
 8008312:	f300 8163 	bgt.w	80085dc <_malloc_r+0x38c>
 8008316:	2a00      	cmp	r2, #0
 8008318:	f8c1 e014 	str.w	lr, [r1, #20]
 800831c:	f8c1 e010 	str.w	lr, [r1, #16]
 8008320:	da73      	bge.n	800840a <_malloc_r+0x1ba>
 8008322:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008326:	f080 8139 	bcs.w	800859c <_malloc_r+0x34c>
 800832a:	08db      	lsrs	r3, r3, #3
 800832c:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 8008330:	ea4f 0ca3 	mov.w	ip, r3, asr #2
 8008334:	684a      	ldr	r2, [r1, #4]
 8008336:	f8d8 9008 	ldr.w	r9, [r8, #8]
 800833a:	f8c4 9008 	str.w	r9, [r4, #8]
 800833e:	2301      	movs	r3, #1
 8008340:	fa03 f30c 	lsl.w	r3, r3, ip
 8008344:	4313      	orrs	r3, r2
 8008346:	f8c4 800c 	str.w	r8, [r4, #12]
 800834a:	604b      	str	r3, [r1, #4]
 800834c:	f8c8 4008 	str.w	r4, [r8, #8]
 8008350:	f8c9 400c 	str.w	r4, [r9, #12]
 8008354:	1082      	asrs	r2, r0, #2
 8008356:	2401      	movs	r4, #1
 8008358:	4094      	lsls	r4, r2
 800835a:	429c      	cmp	r4, r3
 800835c:	d862      	bhi.n	8008424 <_malloc_r+0x1d4>
 800835e:	4223      	tst	r3, r4
 8008360:	d106      	bne.n	8008370 <_malloc_r+0x120>
 8008362:	f020 0003 	bic.w	r0, r0, #3
 8008366:	0064      	lsls	r4, r4, #1
 8008368:	4223      	tst	r3, r4
 800836a:	f100 0004 	add.w	r0, r0, #4
 800836e:	d0fa      	beq.n	8008366 <_malloc_r+0x116>
 8008370:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
 8008374:	46c4      	mov	ip, r8
 8008376:	4681      	mov	r9, r0
 8008378:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800837c:	459c      	cmp	ip, r3
 800837e:	d107      	bne.n	8008390 <_malloc_r+0x140>
 8008380:	e141      	b.n	8008606 <_malloc_r+0x3b6>
 8008382:	2900      	cmp	r1, #0
 8008384:	f280 8151 	bge.w	800862a <_malloc_r+0x3da>
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	459c      	cmp	ip, r3
 800838c:	f000 813b 	beq.w	8008606 <_malloc_r+0x3b6>
 8008390:	685a      	ldr	r2, [r3, #4]
 8008392:	f022 0203 	bic.w	r2, r2, #3
 8008396:	1b51      	subs	r1, r2, r5
 8008398:	290f      	cmp	r1, #15
 800839a:	ddf2      	ble.n	8008382 <_malloc_r+0x132>
 800839c:	461c      	mov	r4, r3
 800839e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 80083a2:	f854 8f08 	ldr.w	r8, [r4, #8]!
 80083a6:	195a      	adds	r2, r3, r5
 80083a8:	f045 0901 	orr.w	r9, r5, #1
 80083ac:	f041 0501 	orr.w	r5, r1, #1
 80083b0:	f8c3 9004 	str.w	r9, [r3, #4]
 80083b4:	4630      	mov	r0, r6
 80083b6:	f8c8 c00c 	str.w	ip, [r8, #12]
 80083ba:	f8cc 8008 	str.w	r8, [ip, #8]
 80083be:	617a      	str	r2, [r7, #20]
 80083c0:	613a      	str	r2, [r7, #16]
 80083c2:	f8c2 e00c 	str.w	lr, [r2, #12]
 80083c6:	f8c2 e008 	str.w	lr, [r2, #8]
 80083ca:	6055      	str	r5, [r2, #4]
 80083cc:	5051      	str	r1, [r2, r1]
 80083ce:	f000 fa81 	bl	80088d4 <__malloc_unlock>
 80083d2:	e769      	b.n	80082a8 <_malloc_r+0x58>
 80083d4:	2400      	movs	r4, #0
 80083d6:	230c      	movs	r3, #12
 80083d8:	4620      	mov	r0, r4
 80083da:	6033      	str	r3, [r6, #0]
 80083dc:	b003      	add	sp, #12
 80083de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083e2:	217e      	movs	r1, #126	; 0x7e
 80083e4:	203f      	movs	r0, #63	; 0x3f
 80083e6:	e773      	b.n	80082d0 <_malloc_r+0x80>
 80083e8:	4423      	add	r3, r4
 80083ea:	68e1      	ldr	r1, [r4, #12]
 80083ec:	685a      	ldr	r2, [r3, #4]
 80083ee:	68a5      	ldr	r5, [r4, #8]
 80083f0:	f042 0201 	orr.w	r2, r2, #1
 80083f4:	60e9      	str	r1, [r5, #12]
 80083f6:	4630      	mov	r0, r6
 80083f8:	608d      	str	r5, [r1, #8]
 80083fa:	605a      	str	r2, [r3, #4]
 80083fc:	f000 fa6a 	bl	80088d4 <__malloc_unlock>
 8008400:	3408      	adds	r4, #8
 8008402:	4620      	mov	r0, r4
 8008404:	b003      	add	sp, #12
 8008406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800840a:	4423      	add	r3, r4
 800840c:	4630      	mov	r0, r6
 800840e:	685a      	ldr	r2, [r3, #4]
 8008410:	f042 0201 	orr.w	r2, r2, #1
 8008414:	605a      	str	r2, [r3, #4]
 8008416:	f000 fa5d 	bl	80088d4 <__malloc_unlock>
 800841a:	3408      	adds	r4, #8
 800841c:	4620      	mov	r0, r4
 800841e:	b003      	add	sp, #12
 8008420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008424:	68bc      	ldr	r4, [r7, #8]
 8008426:	6863      	ldr	r3, [r4, #4]
 8008428:	f023 0803 	bic.w	r8, r3, #3
 800842c:	4545      	cmp	r5, r8
 800842e:	d804      	bhi.n	800843a <_malloc_r+0x1ea>
 8008430:	ebc5 0308 	rsb	r3, r5, r8
 8008434:	2b0f      	cmp	r3, #15
 8008436:	f300 808c 	bgt.w	8008552 <_malloc_r+0x302>
 800843a:	4b53      	ldr	r3, [pc, #332]	; (8008588 <_malloc_r+0x338>)
 800843c:	f8df a158 	ldr.w	sl, [pc, #344]	; 8008598 <_malloc_r+0x348>
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	f8da 3000 	ldr.w	r3, [sl]
 8008446:	3301      	adds	r3, #1
 8008448:	442a      	add	r2, r5
 800844a:	eb04 0b08 	add.w	fp, r4, r8
 800844e:	f000 8150 	beq.w	80086f2 <_malloc_r+0x4a2>
 8008452:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008456:	320f      	adds	r2, #15
 8008458:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800845c:	f022 020f 	bic.w	r2, r2, #15
 8008460:	4611      	mov	r1, r2
 8008462:	4630      	mov	r0, r6
 8008464:	9201      	str	r2, [sp, #4]
 8008466:	f7f9 fbb9 	bl	8001bdc <_sbrk_r>
 800846a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800846e:	4681      	mov	r9, r0
 8008470:	9a01      	ldr	r2, [sp, #4]
 8008472:	f000 8147 	beq.w	8008704 <_malloc_r+0x4b4>
 8008476:	4583      	cmp	fp, r0
 8008478:	f200 80ee 	bhi.w	8008658 <_malloc_r+0x408>
 800847c:	4b43      	ldr	r3, [pc, #268]	; (800858c <_malloc_r+0x33c>)
 800847e:	6819      	ldr	r1, [r3, #0]
 8008480:	45cb      	cmp	fp, r9
 8008482:	4411      	add	r1, r2
 8008484:	6019      	str	r1, [r3, #0]
 8008486:	f000 8142 	beq.w	800870e <_malloc_r+0x4be>
 800848a:	f8da 0000 	ldr.w	r0, [sl]
 800848e:	f8df e108 	ldr.w	lr, [pc, #264]	; 8008598 <_malloc_r+0x348>
 8008492:	3001      	adds	r0, #1
 8008494:	bf1b      	ittet	ne
 8008496:	ebcb 0b09 	rsbne	fp, fp, r9
 800849a:	4459      	addne	r1, fp
 800849c:	f8ce 9000 	streq.w	r9, [lr]
 80084a0:	6019      	strne	r1, [r3, #0]
 80084a2:	f019 0107 	ands.w	r1, r9, #7
 80084a6:	f000 8107 	beq.w	80086b8 <_malloc_r+0x468>
 80084aa:	f1c1 0008 	rsb	r0, r1, #8
 80084ae:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 80084b2:	4481      	add	r9, r0
 80084b4:	3108      	adds	r1, #8
 80084b6:	444a      	add	r2, r9
 80084b8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80084bc:	ebc2 0a01 	rsb	sl, r2, r1
 80084c0:	4651      	mov	r1, sl
 80084c2:	4630      	mov	r0, r6
 80084c4:	9301      	str	r3, [sp, #4]
 80084c6:	f7f9 fb89 	bl	8001bdc <_sbrk_r>
 80084ca:	1c43      	adds	r3, r0, #1
 80084cc:	9b01      	ldr	r3, [sp, #4]
 80084ce:	f000 812c 	beq.w	800872a <_malloc_r+0x4da>
 80084d2:	ebc9 0200 	rsb	r2, r9, r0
 80084d6:	4452      	add	r2, sl
 80084d8:	f042 0201 	orr.w	r2, r2, #1
 80084dc:	6819      	ldr	r1, [r3, #0]
 80084de:	f8c7 9008 	str.w	r9, [r7, #8]
 80084e2:	4451      	add	r1, sl
 80084e4:	42bc      	cmp	r4, r7
 80084e6:	f8c9 2004 	str.w	r2, [r9, #4]
 80084ea:	6019      	str	r1, [r3, #0]
 80084ec:	f8df a09c 	ldr.w	sl, [pc, #156]	; 800858c <_malloc_r+0x33c>
 80084f0:	d016      	beq.n	8008520 <_malloc_r+0x2d0>
 80084f2:	f1b8 0f0f 	cmp.w	r8, #15
 80084f6:	f240 80ee 	bls.w	80086d6 <_malloc_r+0x486>
 80084fa:	6862      	ldr	r2, [r4, #4]
 80084fc:	f1a8 030c 	sub.w	r3, r8, #12
 8008500:	f023 0307 	bic.w	r3, r3, #7
 8008504:	18e0      	adds	r0, r4, r3
 8008506:	f002 0201 	and.w	r2, r2, #1
 800850a:	f04f 0e05 	mov.w	lr, #5
 800850e:	431a      	orrs	r2, r3
 8008510:	2b0f      	cmp	r3, #15
 8008512:	6062      	str	r2, [r4, #4]
 8008514:	f8c0 e004 	str.w	lr, [r0, #4]
 8008518:	f8c0 e008 	str.w	lr, [r0, #8]
 800851c:	f200 8109 	bhi.w	8008732 <_malloc_r+0x4e2>
 8008520:	4b1b      	ldr	r3, [pc, #108]	; (8008590 <_malloc_r+0x340>)
 8008522:	68bc      	ldr	r4, [r7, #8]
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	4291      	cmp	r1, r2
 8008528:	bf88      	it	hi
 800852a:	6019      	strhi	r1, [r3, #0]
 800852c:	4b19      	ldr	r3, [pc, #100]	; (8008594 <_malloc_r+0x344>)
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	4291      	cmp	r1, r2
 8008532:	6862      	ldr	r2, [r4, #4]
 8008534:	bf88      	it	hi
 8008536:	6019      	strhi	r1, [r3, #0]
 8008538:	f022 0203 	bic.w	r2, r2, #3
 800853c:	4295      	cmp	r5, r2
 800853e:	eba2 0305 	sub.w	r3, r2, r5
 8008542:	d801      	bhi.n	8008548 <_malloc_r+0x2f8>
 8008544:	2b0f      	cmp	r3, #15
 8008546:	dc04      	bgt.n	8008552 <_malloc_r+0x302>
 8008548:	4630      	mov	r0, r6
 800854a:	f000 f9c3 	bl	80088d4 <__malloc_unlock>
 800854e:	2400      	movs	r4, #0
 8008550:	e6aa      	b.n	80082a8 <_malloc_r+0x58>
 8008552:	1962      	adds	r2, r4, r5
 8008554:	f043 0301 	orr.w	r3, r3, #1
 8008558:	f045 0501 	orr.w	r5, r5, #1
 800855c:	6065      	str	r5, [r4, #4]
 800855e:	4630      	mov	r0, r6
 8008560:	60ba      	str	r2, [r7, #8]
 8008562:	6053      	str	r3, [r2, #4]
 8008564:	f000 f9b6 	bl	80088d4 <__malloc_unlock>
 8008568:	3408      	adds	r4, #8
 800856a:	4620      	mov	r0, r4
 800856c:	b003      	add	sp, #12
 800856e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008572:	2814      	cmp	r0, #20
 8008574:	d968      	bls.n	8008648 <_malloc_r+0x3f8>
 8008576:	2854      	cmp	r0, #84	; 0x54
 8008578:	f200 8097 	bhi.w	80086aa <_malloc_r+0x45a>
 800857c:	0b28      	lsrs	r0, r5, #12
 800857e:	306e      	adds	r0, #110	; 0x6e
 8008580:	0041      	lsls	r1, r0, #1
 8008582:	e6a5      	b.n	80082d0 <_malloc_r+0x80>
 8008584:	20000628 	.word	0x20000628
 8008588:	20000de8 	.word	0x20000de8
 800858c:	20000dec 	.word	0x20000dec
 8008590:	20000de4 	.word	0x20000de4
 8008594:	20000de0 	.word	0x20000de0
 8008598:	20000a34 	.word	0x20000a34
 800859c:	0a5a      	lsrs	r2, r3, #9
 800859e:	2a04      	cmp	r2, #4
 80085a0:	d955      	bls.n	800864e <_malloc_r+0x3fe>
 80085a2:	2a14      	cmp	r2, #20
 80085a4:	f200 80a7 	bhi.w	80086f6 <_malloc_r+0x4a6>
 80085a8:	325b      	adds	r2, #91	; 0x5b
 80085aa:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 80085ae:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
 80085b2:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008770 <_malloc_r+0x520>
 80085b6:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80085ba:	4561      	cmp	r1, ip
 80085bc:	d07f      	beq.n	80086be <_malloc_r+0x46e>
 80085be:	684a      	ldr	r2, [r1, #4]
 80085c0:	f022 0203 	bic.w	r2, r2, #3
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d202      	bcs.n	80085ce <_malloc_r+0x37e>
 80085c8:	6889      	ldr	r1, [r1, #8]
 80085ca:	458c      	cmp	ip, r1
 80085cc:	d1f7      	bne.n	80085be <_malloc_r+0x36e>
 80085ce:	68ca      	ldr	r2, [r1, #12]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	60e2      	str	r2, [r4, #12]
 80085d4:	60a1      	str	r1, [r4, #8]
 80085d6:	6094      	str	r4, [r2, #8]
 80085d8:	60cc      	str	r4, [r1, #12]
 80085da:	e6bb      	b.n	8008354 <_malloc_r+0x104>
 80085dc:	1963      	adds	r3, r4, r5
 80085de:	f042 0701 	orr.w	r7, r2, #1
 80085e2:	f045 0501 	orr.w	r5, r5, #1
 80085e6:	6065      	str	r5, [r4, #4]
 80085e8:	4630      	mov	r0, r6
 80085ea:	614b      	str	r3, [r1, #20]
 80085ec:	610b      	str	r3, [r1, #16]
 80085ee:	f8c3 e00c 	str.w	lr, [r3, #12]
 80085f2:	f8c3 e008 	str.w	lr, [r3, #8]
 80085f6:	605f      	str	r7, [r3, #4]
 80085f8:	509a      	str	r2, [r3, r2]
 80085fa:	3408      	adds	r4, #8
 80085fc:	f000 f96a 	bl	80088d4 <__malloc_unlock>
 8008600:	e652      	b.n	80082a8 <_malloc_r+0x58>
 8008602:	684b      	ldr	r3, [r1, #4]
 8008604:	e6a6      	b.n	8008354 <_malloc_r+0x104>
 8008606:	f109 0901 	add.w	r9, r9, #1
 800860a:	f019 0f03 	tst.w	r9, #3
 800860e:	f10c 0c08 	add.w	ip, ip, #8
 8008612:	f47f aeb1 	bne.w	8008378 <_malloc_r+0x128>
 8008616:	e02c      	b.n	8008672 <_malloc_r+0x422>
 8008618:	f104 0308 	add.w	r3, r4, #8
 800861c:	6964      	ldr	r4, [r4, #20]
 800861e:	42a3      	cmp	r3, r4
 8008620:	bf08      	it	eq
 8008622:	3002      	addeq	r0, #2
 8008624:	f43f ae69 	beq.w	80082fa <_malloc_r+0xaa>
 8008628:	e62e      	b.n	8008288 <_malloc_r+0x38>
 800862a:	441a      	add	r2, r3
 800862c:	461c      	mov	r4, r3
 800862e:	6851      	ldr	r1, [r2, #4]
 8008630:	68db      	ldr	r3, [r3, #12]
 8008632:	f854 5f08 	ldr.w	r5, [r4, #8]!
 8008636:	f041 0101 	orr.w	r1, r1, #1
 800863a:	6051      	str	r1, [r2, #4]
 800863c:	4630      	mov	r0, r6
 800863e:	60eb      	str	r3, [r5, #12]
 8008640:	609d      	str	r5, [r3, #8]
 8008642:	f000 f947 	bl	80088d4 <__malloc_unlock>
 8008646:	e62f      	b.n	80082a8 <_malloc_r+0x58>
 8008648:	305b      	adds	r0, #91	; 0x5b
 800864a:	0041      	lsls	r1, r0, #1
 800864c:	e640      	b.n	80082d0 <_malloc_r+0x80>
 800864e:	099a      	lsrs	r2, r3, #6
 8008650:	3238      	adds	r2, #56	; 0x38
 8008652:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8008656:	e7aa      	b.n	80085ae <_malloc_r+0x35e>
 8008658:	42bc      	cmp	r4, r7
 800865a:	4b45      	ldr	r3, [pc, #276]	; (8008770 <_malloc_r+0x520>)
 800865c:	f43f af0e 	beq.w	800847c <_malloc_r+0x22c>
 8008660:	689c      	ldr	r4, [r3, #8]
 8008662:	6862      	ldr	r2, [r4, #4]
 8008664:	f022 0203 	bic.w	r2, r2, #3
 8008668:	e768      	b.n	800853c <_malloc_r+0x2ec>
 800866a:	f8d8 8000 	ldr.w	r8, [r8]
 800866e:	4598      	cmp	r8, r3
 8008670:	d17c      	bne.n	800876c <_malloc_r+0x51c>
 8008672:	f010 0f03 	tst.w	r0, #3
 8008676:	f1a8 0308 	sub.w	r3, r8, #8
 800867a:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 800867e:	d1f4      	bne.n	800866a <_malloc_r+0x41a>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	ea23 0304 	bic.w	r3, r3, r4
 8008686:	607b      	str	r3, [r7, #4]
 8008688:	0064      	lsls	r4, r4, #1
 800868a:	429c      	cmp	r4, r3
 800868c:	f63f aeca 	bhi.w	8008424 <_malloc_r+0x1d4>
 8008690:	2c00      	cmp	r4, #0
 8008692:	f43f aec7 	beq.w	8008424 <_malloc_r+0x1d4>
 8008696:	4223      	tst	r3, r4
 8008698:	4648      	mov	r0, r9
 800869a:	f47f ae69 	bne.w	8008370 <_malloc_r+0x120>
 800869e:	0064      	lsls	r4, r4, #1
 80086a0:	4223      	tst	r3, r4
 80086a2:	f100 0004 	add.w	r0, r0, #4
 80086a6:	d0fa      	beq.n	800869e <_malloc_r+0x44e>
 80086a8:	e662      	b.n	8008370 <_malloc_r+0x120>
 80086aa:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 80086ae:	d818      	bhi.n	80086e2 <_malloc_r+0x492>
 80086b0:	0be8      	lsrs	r0, r5, #15
 80086b2:	3077      	adds	r0, #119	; 0x77
 80086b4:	0041      	lsls	r1, r0, #1
 80086b6:	e60b      	b.n	80082d0 <_malloc_r+0x80>
 80086b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80086bc:	e6fb      	b.n	80084b6 <_malloc_r+0x266>
 80086be:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80086c2:	1092      	asrs	r2, r2, #2
 80086c4:	f04f 0c01 	mov.w	ip, #1
 80086c8:	fa0c f202 	lsl.w	r2, ip, r2
 80086cc:	4313      	orrs	r3, r2
 80086ce:	f8c8 3004 	str.w	r3, [r8, #4]
 80086d2:	460a      	mov	r2, r1
 80086d4:	e77d      	b.n	80085d2 <_malloc_r+0x382>
 80086d6:	2301      	movs	r3, #1
 80086d8:	f8c9 3004 	str.w	r3, [r9, #4]
 80086dc:	464c      	mov	r4, r9
 80086de:	2200      	movs	r2, #0
 80086e0:	e72c      	b.n	800853c <_malloc_r+0x2ec>
 80086e2:	f240 5354 	movw	r3, #1364	; 0x554
 80086e6:	4298      	cmp	r0, r3
 80086e8:	d81c      	bhi.n	8008724 <_malloc_r+0x4d4>
 80086ea:	0ca8      	lsrs	r0, r5, #18
 80086ec:	307c      	adds	r0, #124	; 0x7c
 80086ee:	0041      	lsls	r1, r0, #1
 80086f0:	e5ee      	b.n	80082d0 <_malloc_r+0x80>
 80086f2:	3210      	adds	r2, #16
 80086f4:	e6b4      	b.n	8008460 <_malloc_r+0x210>
 80086f6:	2a54      	cmp	r2, #84	; 0x54
 80086f8:	d823      	bhi.n	8008742 <_malloc_r+0x4f2>
 80086fa:	0b1a      	lsrs	r2, r3, #12
 80086fc:	326e      	adds	r2, #110	; 0x6e
 80086fe:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8008702:	e754      	b.n	80085ae <_malloc_r+0x35e>
 8008704:	68bc      	ldr	r4, [r7, #8]
 8008706:	6862      	ldr	r2, [r4, #4]
 8008708:	f022 0203 	bic.w	r2, r2, #3
 800870c:	e716      	b.n	800853c <_malloc_r+0x2ec>
 800870e:	f3cb 000b 	ubfx	r0, fp, #0, #12
 8008712:	2800      	cmp	r0, #0
 8008714:	f47f aeb9 	bne.w	800848a <_malloc_r+0x23a>
 8008718:	4442      	add	r2, r8
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	f042 0201 	orr.w	r2, r2, #1
 8008720:	605a      	str	r2, [r3, #4]
 8008722:	e6fd      	b.n	8008520 <_malloc_r+0x2d0>
 8008724:	21fc      	movs	r1, #252	; 0xfc
 8008726:	207e      	movs	r0, #126	; 0x7e
 8008728:	e5d2      	b.n	80082d0 <_malloc_r+0x80>
 800872a:	2201      	movs	r2, #1
 800872c:	f04f 0a00 	mov.w	sl, #0
 8008730:	e6d4      	b.n	80084dc <_malloc_r+0x28c>
 8008732:	f104 0108 	add.w	r1, r4, #8
 8008736:	4630      	mov	r0, r6
 8008738:	f7ff fa76 	bl	8007c28 <_free_r>
 800873c:	f8da 1000 	ldr.w	r1, [sl]
 8008740:	e6ee      	b.n	8008520 <_malloc_r+0x2d0>
 8008742:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008746:	d804      	bhi.n	8008752 <_malloc_r+0x502>
 8008748:	0bda      	lsrs	r2, r3, #15
 800874a:	3277      	adds	r2, #119	; 0x77
 800874c:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8008750:	e72d      	b.n	80085ae <_malloc_r+0x35e>
 8008752:	f240 5154 	movw	r1, #1364	; 0x554
 8008756:	428a      	cmp	r2, r1
 8008758:	d804      	bhi.n	8008764 <_malloc_r+0x514>
 800875a:	0c9a      	lsrs	r2, r3, #18
 800875c:	327c      	adds	r2, #124	; 0x7c
 800875e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8008762:	e724      	b.n	80085ae <_malloc_r+0x35e>
 8008764:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
 8008768:	227e      	movs	r2, #126	; 0x7e
 800876a:	e720      	b.n	80085ae <_malloc_r+0x35e>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	e78b      	b.n	8008688 <_malloc_r+0x438>
 8008770:	20000628 	.word	0x20000628

08008774 <memchr>:
 8008774:	0783      	lsls	r3, r0, #30
 8008776:	b470      	push	{r4, r5, r6}
 8008778:	b2c9      	uxtb	r1, r1
 800877a:	d040      	beq.n	80087fe <memchr+0x8a>
 800877c:	1e54      	subs	r4, r2, #1
 800877e:	2a00      	cmp	r2, #0
 8008780:	d03f      	beq.n	8008802 <memchr+0x8e>
 8008782:	7803      	ldrb	r3, [r0, #0]
 8008784:	428b      	cmp	r3, r1
 8008786:	bf18      	it	ne
 8008788:	1c43      	addne	r3, r0, #1
 800878a:	d106      	bne.n	800879a <memchr+0x26>
 800878c:	e01d      	b.n	80087ca <memchr+0x56>
 800878e:	b1f4      	cbz	r4, 80087ce <memchr+0x5a>
 8008790:	7802      	ldrb	r2, [r0, #0]
 8008792:	428a      	cmp	r2, r1
 8008794:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008798:	d017      	beq.n	80087ca <memchr+0x56>
 800879a:	f013 0f03 	tst.w	r3, #3
 800879e:	4618      	mov	r0, r3
 80087a0:	f103 0301 	add.w	r3, r3, #1
 80087a4:	d1f3      	bne.n	800878e <memchr+0x1a>
 80087a6:	2c03      	cmp	r4, #3
 80087a8:	d814      	bhi.n	80087d4 <memchr+0x60>
 80087aa:	b184      	cbz	r4, 80087ce <memchr+0x5a>
 80087ac:	7803      	ldrb	r3, [r0, #0]
 80087ae:	428b      	cmp	r3, r1
 80087b0:	d00b      	beq.n	80087ca <memchr+0x56>
 80087b2:	1905      	adds	r5, r0, r4
 80087b4:	1c43      	adds	r3, r0, #1
 80087b6:	e002      	b.n	80087be <memchr+0x4a>
 80087b8:	7802      	ldrb	r2, [r0, #0]
 80087ba:	428a      	cmp	r2, r1
 80087bc:	d005      	beq.n	80087ca <memchr+0x56>
 80087be:	42ab      	cmp	r3, r5
 80087c0:	4618      	mov	r0, r3
 80087c2:	f103 0301 	add.w	r3, r3, #1
 80087c6:	d1f7      	bne.n	80087b8 <memchr+0x44>
 80087c8:	2000      	movs	r0, #0
 80087ca:	bc70      	pop	{r4, r5, r6}
 80087cc:	4770      	bx	lr
 80087ce:	4620      	mov	r0, r4
 80087d0:	bc70      	pop	{r4, r5, r6}
 80087d2:	4770      	bx	lr
 80087d4:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 80087d8:	4602      	mov	r2, r0
 80087da:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 80087de:	4610      	mov	r0, r2
 80087e0:	3204      	adds	r2, #4
 80087e2:	6803      	ldr	r3, [r0, #0]
 80087e4:	4073      	eors	r3, r6
 80087e6:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 80087ea:	ea25 0303 	bic.w	r3, r5, r3
 80087ee:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 80087f2:	d1da      	bne.n	80087aa <memchr+0x36>
 80087f4:	3c04      	subs	r4, #4
 80087f6:	2c03      	cmp	r4, #3
 80087f8:	4610      	mov	r0, r2
 80087fa:	d8f0      	bhi.n	80087de <memchr+0x6a>
 80087fc:	e7d5      	b.n	80087aa <memchr+0x36>
 80087fe:	4614      	mov	r4, r2
 8008800:	e7d1      	b.n	80087a6 <memchr+0x32>
 8008802:	4610      	mov	r0, r2
 8008804:	e7e1      	b.n	80087ca <memchr+0x56>
 8008806:	bf00      	nop

08008808 <memmove>:
 8008808:	4288      	cmp	r0, r1
 800880a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800880c:	d90d      	bls.n	800882a <memmove+0x22>
 800880e:	188b      	adds	r3, r1, r2
 8008810:	4298      	cmp	r0, r3
 8008812:	d20a      	bcs.n	800882a <memmove+0x22>
 8008814:	1881      	adds	r1, r0, r2
 8008816:	2a00      	cmp	r2, #0
 8008818:	d054      	beq.n	80088c4 <memmove+0xbc>
 800881a:	1a9a      	subs	r2, r3, r2
 800881c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008820:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008824:	4293      	cmp	r3, r2
 8008826:	d1f9      	bne.n	800881c <memmove+0x14>
 8008828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800882a:	2a0f      	cmp	r2, #15
 800882c:	d948      	bls.n	80088c0 <memmove+0xb8>
 800882e:	ea40 0301 	orr.w	r3, r0, r1
 8008832:	079b      	lsls	r3, r3, #30
 8008834:	d147      	bne.n	80088c6 <memmove+0xbe>
 8008836:	f100 0410 	add.w	r4, r0, #16
 800883a:	f101 0310 	add.w	r3, r1, #16
 800883e:	4615      	mov	r5, r2
 8008840:	f853 6c10 	ldr.w	r6, [r3, #-16]
 8008844:	f844 6c10 	str.w	r6, [r4, #-16]
 8008848:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 800884c:	f844 6c0c 	str.w	r6, [r4, #-12]
 8008850:	f853 6c08 	ldr.w	r6, [r3, #-8]
 8008854:	f844 6c08 	str.w	r6, [r4, #-8]
 8008858:	3d10      	subs	r5, #16
 800885a:	f853 6c04 	ldr.w	r6, [r3, #-4]
 800885e:	f844 6c04 	str.w	r6, [r4, #-4]
 8008862:	2d0f      	cmp	r5, #15
 8008864:	f103 0310 	add.w	r3, r3, #16
 8008868:	f104 0410 	add.w	r4, r4, #16
 800886c:	d8e8      	bhi.n	8008840 <memmove+0x38>
 800886e:	f1a2 0310 	sub.w	r3, r2, #16
 8008872:	f023 030f 	bic.w	r3, r3, #15
 8008876:	f002 0e0f 	and.w	lr, r2, #15
 800887a:	3310      	adds	r3, #16
 800887c:	f1be 0f03 	cmp.w	lr, #3
 8008880:	4419      	add	r1, r3
 8008882:	4403      	add	r3, r0
 8008884:	d921      	bls.n	80088ca <memmove+0xc2>
 8008886:	1f1e      	subs	r6, r3, #4
 8008888:	460d      	mov	r5, r1
 800888a:	4674      	mov	r4, lr
 800888c:	3c04      	subs	r4, #4
 800888e:	f855 7b04 	ldr.w	r7, [r5], #4
 8008892:	f846 7f04 	str.w	r7, [r6, #4]!
 8008896:	2c03      	cmp	r4, #3
 8008898:	d8f8      	bhi.n	800888c <memmove+0x84>
 800889a:	f1ae 0404 	sub.w	r4, lr, #4
 800889e:	f024 0403 	bic.w	r4, r4, #3
 80088a2:	3404      	adds	r4, #4
 80088a4:	4423      	add	r3, r4
 80088a6:	4421      	add	r1, r4
 80088a8:	f002 0203 	and.w	r2, r2, #3
 80088ac:	b152      	cbz	r2, 80088c4 <memmove+0xbc>
 80088ae:	3b01      	subs	r3, #1
 80088b0:	440a      	add	r2, r1
 80088b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088ba:	4291      	cmp	r1, r2
 80088bc:	d1f9      	bne.n	80088b2 <memmove+0xaa>
 80088be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088c0:	4603      	mov	r3, r0
 80088c2:	e7f3      	b.n	80088ac <memmove+0xa4>
 80088c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088c6:	4603      	mov	r3, r0
 80088c8:	e7f1      	b.n	80088ae <memmove+0xa6>
 80088ca:	4672      	mov	r2, lr
 80088cc:	e7ee      	b.n	80088ac <memmove+0xa4>
 80088ce:	bf00      	nop

080088d0 <__malloc_lock>:
 80088d0:	4770      	bx	lr
 80088d2:	bf00      	nop

080088d4 <__malloc_unlock>:
 80088d4:	4770      	bx	lr
 80088d6:	bf00      	nop

080088d8 <_Balloc>:
 80088d8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80088da:	b570      	push	{r4, r5, r6, lr}
 80088dc:	4605      	mov	r5, r0
 80088de:	460c      	mov	r4, r1
 80088e0:	b14b      	cbz	r3, 80088f6 <_Balloc+0x1e>
 80088e2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80088e6:	b180      	cbz	r0, 800890a <_Balloc+0x32>
 80088e8:	6802      	ldr	r2, [r0, #0]
 80088ea:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80088ee:	2300      	movs	r3, #0
 80088f0:	6103      	str	r3, [r0, #16]
 80088f2:	60c3      	str	r3, [r0, #12]
 80088f4:	bd70      	pop	{r4, r5, r6, pc}
 80088f6:	2104      	movs	r1, #4
 80088f8:	2221      	movs	r2, #33	; 0x21
 80088fa:	f000 fe63 	bl	80095c4 <_calloc_r>
 80088fe:	64e8      	str	r0, [r5, #76]	; 0x4c
 8008900:	4603      	mov	r3, r0
 8008902:	2800      	cmp	r0, #0
 8008904:	d1ed      	bne.n	80088e2 <_Balloc+0xa>
 8008906:	2000      	movs	r0, #0
 8008908:	bd70      	pop	{r4, r5, r6, pc}
 800890a:	2101      	movs	r1, #1
 800890c:	fa01 f604 	lsl.w	r6, r1, r4
 8008910:	1d72      	adds	r2, r6, #5
 8008912:	4628      	mov	r0, r5
 8008914:	0092      	lsls	r2, r2, #2
 8008916:	f000 fe55 	bl	80095c4 <_calloc_r>
 800891a:	2800      	cmp	r0, #0
 800891c:	d0f3      	beq.n	8008906 <_Balloc+0x2e>
 800891e:	6044      	str	r4, [r0, #4]
 8008920:	6086      	str	r6, [r0, #8]
 8008922:	e7e4      	b.n	80088ee <_Balloc+0x16>

08008924 <_Bfree>:
 8008924:	b131      	cbz	r1, 8008934 <_Bfree+0x10>
 8008926:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008928:	684a      	ldr	r2, [r1, #4]
 800892a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800892e:	6008      	str	r0, [r1, #0]
 8008930:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop

08008938 <__multadd>:
 8008938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800893a:	690c      	ldr	r4, [r1, #16]
 800893c:	b083      	sub	sp, #12
 800893e:	460d      	mov	r5, r1
 8008940:	4606      	mov	r6, r0
 8008942:	f101 0e14 	add.w	lr, r1, #20
 8008946:	2700      	movs	r7, #0
 8008948:	f8de 1000 	ldr.w	r1, [lr]
 800894c:	b288      	uxth	r0, r1
 800894e:	0c09      	lsrs	r1, r1, #16
 8008950:	fb02 3300 	mla	r3, r2, r0, r3
 8008954:	fb02 f101 	mul.w	r1, r2, r1
 8008958:	eb01 4113 	add.w	r1, r1, r3, lsr #16
 800895c:	3701      	adds	r7, #1
 800895e:	b29b      	uxth	r3, r3
 8008960:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8008964:	42bc      	cmp	r4, r7
 8008966:	f84e 3b04 	str.w	r3, [lr], #4
 800896a:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800896e:	dceb      	bgt.n	8008948 <__multadd+0x10>
 8008970:	b13b      	cbz	r3, 8008982 <__multadd+0x4a>
 8008972:	68aa      	ldr	r2, [r5, #8]
 8008974:	4294      	cmp	r4, r2
 8008976:	da07      	bge.n	8008988 <__multadd+0x50>
 8008978:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 800897c:	3401      	adds	r4, #1
 800897e:	6153      	str	r3, [r2, #20]
 8008980:	612c      	str	r4, [r5, #16]
 8008982:	4628      	mov	r0, r5
 8008984:	b003      	add	sp, #12
 8008986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008988:	6869      	ldr	r1, [r5, #4]
 800898a:	9301      	str	r3, [sp, #4]
 800898c:	3101      	adds	r1, #1
 800898e:	4630      	mov	r0, r6
 8008990:	f7ff ffa2 	bl	80088d8 <_Balloc>
 8008994:	692a      	ldr	r2, [r5, #16]
 8008996:	3202      	adds	r2, #2
 8008998:	f105 010c 	add.w	r1, r5, #12
 800899c:	4607      	mov	r7, r0
 800899e:	0092      	lsls	r2, r2, #2
 80089a0:	300c      	adds	r0, #12
 80089a2:	f7f7 fc6f 	bl	8000284 <memcpy>
 80089a6:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 80089a8:	6869      	ldr	r1, [r5, #4]
 80089aa:	9b01      	ldr	r3, [sp, #4]
 80089ac:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 80089b0:	6028      	str	r0, [r5, #0]
 80089b2:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 80089b6:	463d      	mov	r5, r7
 80089b8:	e7de      	b.n	8008978 <__multadd+0x40>
 80089ba:	bf00      	nop

080089bc <__hi0bits>:
 80089bc:	0c03      	lsrs	r3, r0, #16
 80089be:	041b      	lsls	r3, r3, #16
 80089c0:	b9b3      	cbnz	r3, 80089f0 <__hi0bits+0x34>
 80089c2:	0400      	lsls	r0, r0, #16
 80089c4:	2310      	movs	r3, #16
 80089c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80089ca:	bf04      	itt	eq
 80089cc:	0200      	lsleq	r0, r0, #8
 80089ce:	3308      	addeq	r3, #8
 80089d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80089d4:	bf04      	itt	eq
 80089d6:	0100      	lsleq	r0, r0, #4
 80089d8:	3304      	addeq	r3, #4
 80089da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80089de:	bf04      	itt	eq
 80089e0:	0080      	lsleq	r0, r0, #2
 80089e2:	3302      	addeq	r3, #2
 80089e4:	2800      	cmp	r0, #0
 80089e6:	db07      	blt.n	80089f8 <__hi0bits+0x3c>
 80089e8:	0042      	lsls	r2, r0, #1
 80089ea:	d403      	bmi.n	80089f4 <__hi0bits+0x38>
 80089ec:	2020      	movs	r0, #32
 80089ee:	4770      	bx	lr
 80089f0:	2300      	movs	r3, #0
 80089f2:	e7e8      	b.n	80089c6 <__hi0bits+0xa>
 80089f4:	1c58      	adds	r0, r3, #1
 80089f6:	4770      	bx	lr
 80089f8:	4618      	mov	r0, r3
 80089fa:	4770      	bx	lr

080089fc <__lo0bits>:
 80089fc:	6803      	ldr	r3, [r0, #0]
 80089fe:	f013 0207 	ands.w	r2, r3, #7
 8008a02:	d007      	beq.n	8008a14 <__lo0bits+0x18>
 8008a04:	07d9      	lsls	r1, r3, #31
 8008a06:	d420      	bmi.n	8008a4a <__lo0bits+0x4e>
 8008a08:	079a      	lsls	r2, r3, #30
 8008a0a:	d420      	bmi.n	8008a4e <__lo0bits+0x52>
 8008a0c:	089b      	lsrs	r3, r3, #2
 8008a0e:	6003      	str	r3, [r0, #0]
 8008a10:	2002      	movs	r0, #2
 8008a12:	4770      	bx	lr
 8008a14:	b299      	uxth	r1, r3
 8008a16:	b909      	cbnz	r1, 8008a1c <__lo0bits+0x20>
 8008a18:	0c1b      	lsrs	r3, r3, #16
 8008a1a:	2210      	movs	r2, #16
 8008a1c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008a20:	bf04      	itt	eq
 8008a22:	0a1b      	lsreq	r3, r3, #8
 8008a24:	3208      	addeq	r2, #8
 8008a26:	0719      	lsls	r1, r3, #28
 8008a28:	bf04      	itt	eq
 8008a2a:	091b      	lsreq	r3, r3, #4
 8008a2c:	3204      	addeq	r2, #4
 8008a2e:	0799      	lsls	r1, r3, #30
 8008a30:	bf04      	itt	eq
 8008a32:	089b      	lsreq	r3, r3, #2
 8008a34:	3202      	addeq	r2, #2
 8008a36:	07d9      	lsls	r1, r3, #31
 8008a38:	d404      	bmi.n	8008a44 <__lo0bits+0x48>
 8008a3a:	085b      	lsrs	r3, r3, #1
 8008a3c:	d101      	bne.n	8008a42 <__lo0bits+0x46>
 8008a3e:	2020      	movs	r0, #32
 8008a40:	4770      	bx	lr
 8008a42:	3201      	adds	r2, #1
 8008a44:	6003      	str	r3, [r0, #0]
 8008a46:	4610      	mov	r0, r2
 8008a48:	4770      	bx	lr
 8008a4a:	2000      	movs	r0, #0
 8008a4c:	4770      	bx	lr
 8008a4e:	085b      	lsrs	r3, r3, #1
 8008a50:	6003      	str	r3, [r0, #0]
 8008a52:	2001      	movs	r0, #1
 8008a54:	4770      	bx	lr
 8008a56:	bf00      	nop

08008a58 <__i2b>:
 8008a58:	b510      	push	{r4, lr}
 8008a5a:	460c      	mov	r4, r1
 8008a5c:	2101      	movs	r1, #1
 8008a5e:	f7ff ff3b 	bl	80088d8 <_Balloc>
 8008a62:	2201      	movs	r2, #1
 8008a64:	6144      	str	r4, [r0, #20]
 8008a66:	6102      	str	r2, [r0, #16]
 8008a68:	bd10      	pop	{r4, pc}
 8008a6a:	bf00      	nop

08008a6c <__multiply>:
 8008a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a70:	690f      	ldr	r7, [r1, #16]
 8008a72:	6916      	ldr	r6, [r2, #16]
 8008a74:	42b7      	cmp	r7, r6
 8008a76:	b083      	sub	sp, #12
 8008a78:	460d      	mov	r5, r1
 8008a7a:	4614      	mov	r4, r2
 8008a7c:	f2c0 808d 	blt.w	8008b9a <__multiply+0x12e>
 8008a80:	4633      	mov	r3, r6
 8008a82:	463e      	mov	r6, r7
 8008a84:	461f      	mov	r7, r3
 8008a86:	68ab      	ldr	r3, [r5, #8]
 8008a88:	6869      	ldr	r1, [r5, #4]
 8008a8a:	eb06 0807 	add.w	r8, r6, r7
 8008a8e:	4598      	cmp	r8, r3
 8008a90:	bfc8      	it	gt
 8008a92:	3101      	addgt	r1, #1
 8008a94:	f7ff ff20 	bl	80088d8 <_Balloc>
 8008a98:	f100 0c14 	add.w	ip, r0, #20
 8008a9c:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 8008aa0:	45cc      	cmp	ip, r9
 8008aa2:	9000      	str	r0, [sp, #0]
 8008aa4:	d205      	bcs.n	8008ab2 <__multiply+0x46>
 8008aa6:	4663      	mov	r3, ip
 8008aa8:	2100      	movs	r1, #0
 8008aaa:	f843 1b04 	str.w	r1, [r3], #4
 8008aae:	4599      	cmp	r9, r3
 8008ab0:	d8fb      	bhi.n	8008aaa <__multiply+0x3e>
 8008ab2:	f104 0214 	add.w	r2, r4, #20
 8008ab6:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 8008aba:	f105 0314 	add.w	r3, r5, #20
 8008abe:	4552      	cmp	r2, sl
 8008ac0:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 8008ac4:	d254      	bcs.n	8008b70 <__multiply+0x104>
 8008ac6:	f8cd 9004 	str.w	r9, [sp, #4]
 8008aca:	4699      	mov	r9, r3
 8008acc:	f852 3b04 	ldr.w	r3, [r2], #4
 8008ad0:	fa1f fb83 	uxth.w	fp, r3
 8008ad4:	f1bb 0f00 	cmp.w	fp, #0
 8008ad8:	d020      	beq.n	8008b1c <__multiply+0xb0>
 8008ada:	2000      	movs	r0, #0
 8008adc:	464f      	mov	r7, r9
 8008ade:	4666      	mov	r6, ip
 8008ae0:	4605      	mov	r5, r0
 8008ae2:	e000      	b.n	8008ae6 <__multiply+0x7a>
 8008ae4:	461e      	mov	r6, r3
 8008ae6:	f857 4b04 	ldr.w	r4, [r7], #4
 8008aea:	6830      	ldr	r0, [r6, #0]
 8008aec:	b2a1      	uxth	r1, r4
 8008aee:	b283      	uxth	r3, r0
 8008af0:	fb0b 3101 	mla	r1, fp, r1, r3
 8008af4:	0c24      	lsrs	r4, r4, #16
 8008af6:	0c00      	lsrs	r0, r0, #16
 8008af8:	194b      	adds	r3, r1, r5
 8008afa:	fb0b 0004 	mla	r0, fp, r4, r0
 8008afe:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 8008b02:	b299      	uxth	r1, r3
 8008b04:	4633      	mov	r3, r6
 8008b06:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008b0a:	45be      	cmp	lr, r7
 8008b0c:	ea4f 4510 	mov.w	r5, r0, lsr #16
 8008b10:	f843 1b04 	str.w	r1, [r3], #4
 8008b14:	d8e6      	bhi.n	8008ae4 <__multiply+0x78>
 8008b16:	6075      	str	r5, [r6, #4]
 8008b18:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8008b1c:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 8008b20:	d020      	beq.n	8008b64 <__multiply+0xf8>
 8008b22:	f8dc 3000 	ldr.w	r3, [ip]
 8008b26:	4667      	mov	r7, ip
 8008b28:	4618      	mov	r0, r3
 8008b2a:	464d      	mov	r5, r9
 8008b2c:	2100      	movs	r1, #0
 8008b2e:	e000      	b.n	8008b32 <__multiply+0xc6>
 8008b30:	4637      	mov	r7, r6
 8008b32:	882c      	ldrh	r4, [r5, #0]
 8008b34:	0c00      	lsrs	r0, r0, #16
 8008b36:	fb0b 0004 	mla	r0, fp, r4, r0
 8008b3a:	4401      	add	r1, r0
 8008b3c:	b29c      	uxth	r4, r3
 8008b3e:	463e      	mov	r6, r7
 8008b40:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 8008b44:	f846 3b04 	str.w	r3, [r6], #4
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f855 4b04 	ldr.w	r4, [r5], #4
 8008b4e:	b283      	uxth	r3, r0
 8008b50:	0c24      	lsrs	r4, r4, #16
 8008b52:	fb0b 3404 	mla	r4, fp, r4, r3
 8008b56:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 8008b5a:	45ae      	cmp	lr, r5
 8008b5c:	ea4f 4113 	mov.w	r1, r3, lsr #16
 8008b60:	d8e6      	bhi.n	8008b30 <__multiply+0xc4>
 8008b62:	607b      	str	r3, [r7, #4]
 8008b64:	4592      	cmp	sl, r2
 8008b66:	f10c 0c04 	add.w	ip, ip, #4
 8008b6a:	d8af      	bhi.n	8008acc <__multiply+0x60>
 8008b6c:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008b70:	f1b8 0f00 	cmp.w	r8, #0
 8008b74:	dd0b      	ble.n	8008b8e <__multiply+0x122>
 8008b76:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8008b7a:	f1a9 0904 	sub.w	r9, r9, #4
 8008b7e:	b11b      	cbz	r3, 8008b88 <__multiply+0x11c>
 8008b80:	e005      	b.n	8008b8e <__multiply+0x122>
 8008b82:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 8008b86:	b913      	cbnz	r3, 8008b8e <__multiply+0x122>
 8008b88:	f1b8 0801 	subs.w	r8, r8, #1
 8008b8c:	d1f9      	bne.n	8008b82 <__multiply+0x116>
 8008b8e:	9800      	ldr	r0, [sp, #0]
 8008b90:	f8c0 8010 	str.w	r8, [r0, #16]
 8008b94:	b003      	add	sp, #12
 8008b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b9a:	4615      	mov	r5, r2
 8008b9c:	460c      	mov	r4, r1
 8008b9e:	e772      	b.n	8008a86 <__multiply+0x1a>

08008ba0 <__pow5mult>:
 8008ba0:	f012 0303 	ands.w	r3, r2, #3
 8008ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ba8:	4614      	mov	r4, r2
 8008baa:	4607      	mov	r7, r0
 8008bac:	460e      	mov	r6, r1
 8008bae:	d12d      	bne.n	8008c0c <__pow5mult+0x6c>
 8008bb0:	10a4      	asrs	r4, r4, #2
 8008bb2:	d01c      	beq.n	8008bee <__pow5mult+0x4e>
 8008bb4:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 8008bb6:	b395      	cbz	r5, 8008c1e <__pow5mult+0x7e>
 8008bb8:	07e3      	lsls	r3, r4, #31
 8008bba:	f04f 0800 	mov.w	r8, #0
 8008bbe:	d406      	bmi.n	8008bce <__pow5mult+0x2e>
 8008bc0:	1064      	asrs	r4, r4, #1
 8008bc2:	d014      	beq.n	8008bee <__pow5mult+0x4e>
 8008bc4:	6828      	ldr	r0, [r5, #0]
 8008bc6:	b1a8      	cbz	r0, 8008bf4 <__pow5mult+0x54>
 8008bc8:	4605      	mov	r5, r0
 8008bca:	07e3      	lsls	r3, r4, #31
 8008bcc:	d5f8      	bpl.n	8008bc0 <__pow5mult+0x20>
 8008bce:	4638      	mov	r0, r7
 8008bd0:	4631      	mov	r1, r6
 8008bd2:	462a      	mov	r2, r5
 8008bd4:	f7ff ff4a 	bl	8008a6c <__multiply>
 8008bd8:	b1b6      	cbz	r6, 8008c08 <__pow5mult+0x68>
 8008bda:	6872      	ldr	r2, [r6, #4]
 8008bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bde:	1064      	asrs	r4, r4, #1
 8008be0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008be4:	6031      	str	r1, [r6, #0]
 8008be6:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8008bea:	4606      	mov	r6, r0
 8008bec:	d1ea      	bne.n	8008bc4 <__pow5mult+0x24>
 8008bee:	4630      	mov	r0, r6
 8008bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bf4:	4629      	mov	r1, r5
 8008bf6:	462a      	mov	r2, r5
 8008bf8:	4638      	mov	r0, r7
 8008bfa:	f7ff ff37 	bl	8008a6c <__multiply>
 8008bfe:	6028      	str	r0, [r5, #0]
 8008c00:	f8c0 8000 	str.w	r8, [r0]
 8008c04:	4605      	mov	r5, r0
 8008c06:	e7e0      	b.n	8008bca <__pow5mult+0x2a>
 8008c08:	4606      	mov	r6, r0
 8008c0a:	e7d9      	b.n	8008bc0 <__pow5mult+0x20>
 8008c0c:	1e5a      	subs	r2, r3, #1
 8008c0e:	4d0b      	ldr	r5, [pc, #44]	; (8008c3c <__pow5mult+0x9c>)
 8008c10:	2300      	movs	r3, #0
 8008c12:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8008c16:	f7ff fe8f 	bl	8008938 <__multadd>
 8008c1a:	4606      	mov	r6, r0
 8008c1c:	e7c8      	b.n	8008bb0 <__pow5mult+0x10>
 8008c1e:	2101      	movs	r1, #1
 8008c20:	4638      	mov	r0, r7
 8008c22:	f7ff fe59 	bl	80088d8 <_Balloc>
 8008c26:	f240 2171 	movw	r1, #625	; 0x271
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	6141      	str	r1, [r0, #20]
 8008c30:	6102      	str	r2, [r0, #16]
 8008c32:	4605      	mov	r5, r0
 8008c34:	64b8      	str	r0, [r7, #72]	; 0x48
 8008c36:	6003      	str	r3, [r0, #0]
 8008c38:	e7be      	b.n	8008bb8 <__pow5mult+0x18>
 8008c3a:	bf00      	nop
 8008c3c:	0801907c 	.word	0x0801907c

08008c40 <__lshift>:
 8008c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c44:	690f      	ldr	r7, [r1, #16]
 8008c46:	688b      	ldr	r3, [r1, #8]
 8008c48:	ea4f 1962 	mov.w	r9, r2, asr #5
 8008c4c:	444f      	add	r7, r9
 8008c4e:	1c7d      	adds	r5, r7, #1
 8008c50:	429d      	cmp	r5, r3
 8008c52:	460e      	mov	r6, r1
 8008c54:	4614      	mov	r4, r2
 8008c56:	6849      	ldr	r1, [r1, #4]
 8008c58:	4680      	mov	r8, r0
 8008c5a:	dd04      	ble.n	8008c66 <__lshift+0x26>
 8008c5c:	005b      	lsls	r3, r3, #1
 8008c5e:	429d      	cmp	r5, r3
 8008c60:	f101 0101 	add.w	r1, r1, #1
 8008c64:	dcfa      	bgt.n	8008c5c <__lshift+0x1c>
 8008c66:	4640      	mov	r0, r8
 8008c68:	f7ff fe36 	bl	80088d8 <_Balloc>
 8008c6c:	f1b9 0f00 	cmp.w	r9, #0
 8008c70:	f100 0114 	add.w	r1, r0, #20
 8008c74:	dd09      	ble.n	8008c8a <__lshift+0x4a>
 8008c76:	2300      	movs	r3, #0
 8008c78:	469e      	mov	lr, r3
 8008c7a:	460a      	mov	r2, r1
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	454b      	cmp	r3, r9
 8008c80:	f842 eb04 	str.w	lr, [r2], #4
 8008c84:	d1fa      	bne.n	8008c7c <__lshift+0x3c>
 8008c86:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8008c8a:	6932      	ldr	r2, [r6, #16]
 8008c8c:	f106 0314 	add.w	r3, r6, #20
 8008c90:	f014 0c1f 	ands.w	ip, r4, #31
 8008c94:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 8008c98:	d01f      	beq.n	8008cda <__lshift+0x9a>
 8008c9a:	f1cc 0920 	rsb	r9, ip, #32
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	681c      	ldr	r4, [r3, #0]
 8008ca2:	fa04 f40c 	lsl.w	r4, r4, ip
 8008ca6:	4314      	orrs	r4, r2
 8008ca8:	468a      	mov	sl, r1
 8008caa:	f841 4b04 	str.w	r4, [r1], #4
 8008cae:	f853 4b04 	ldr.w	r4, [r3], #4
 8008cb2:	459e      	cmp	lr, r3
 8008cb4:	fa24 f209 	lsr.w	r2, r4, r9
 8008cb8:	d8f2      	bhi.n	8008ca0 <__lshift+0x60>
 8008cba:	f8ca 2004 	str.w	r2, [sl, #4]
 8008cbe:	b102      	cbz	r2, 8008cc2 <__lshift+0x82>
 8008cc0:	1cbd      	adds	r5, r7, #2
 8008cc2:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8008cc6:	6872      	ldr	r2, [r6, #4]
 8008cc8:	3d01      	subs	r5, #1
 8008cca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008cce:	6105      	str	r5, [r0, #16]
 8008cd0:	6031      	str	r1, [r6, #0]
 8008cd2:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8008cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cda:	3904      	subs	r1, #4
 8008cdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ce0:	f841 2f04 	str.w	r2, [r1, #4]!
 8008ce4:	459e      	cmp	lr, r3
 8008ce6:	d8f9      	bhi.n	8008cdc <__lshift+0x9c>
 8008ce8:	e7eb      	b.n	8008cc2 <__lshift+0x82>
 8008cea:	bf00      	nop

08008cec <__mcmp>:
 8008cec:	6902      	ldr	r2, [r0, #16]
 8008cee:	690b      	ldr	r3, [r1, #16]
 8008cf0:	1ad2      	subs	r2, r2, r3
 8008cf2:	d113      	bne.n	8008d1c <__mcmp+0x30>
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	3014      	adds	r0, #20
 8008cf8:	3114      	adds	r1, #20
 8008cfa:	4419      	add	r1, r3
 8008cfc:	b410      	push	{r4}
 8008cfe:	4403      	add	r3, r0
 8008d00:	e001      	b.n	8008d06 <__mcmp+0x1a>
 8008d02:	4298      	cmp	r0, r3
 8008d04:	d20c      	bcs.n	8008d20 <__mcmp+0x34>
 8008d06:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8008d0a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008d0e:	4294      	cmp	r4, r2
 8008d10:	d0f7      	beq.n	8008d02 <__mcmp+0x16>
 8008d12:	d309      	bcc.n	8008d28 <__mcmp+0x3c>
 8008d14:	2001      	movs	r0, #1
 8008d16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d1a:	4770      	bx	lr
 8008d1c:	4610      	mov	r0, r2
 8008d1e:	4770      	bx	lr
 8008d20:	2000      	movs	r0, #0
 8008d22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d26:	4770      	bx	lr
 8008d28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d30:	4770      	bx	lr
 8008d32:	bf00      	nop

08008d34 <__mdiff>:
 8008d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d38:	460e      	mov	r6, r1
 8008d3a:	4605      	mov	r5, r0
 8008d3c:	4611      	mov	r1, r2
 8008d3e:	4630      	mov	r0, r6
 8008d40:	4614      	mov	r4, r2
 8008d42:	f7ff ffd3 	bl	8008cec <__mcmp>
 8008d46:	1e07      	subs	r7, r0, #0
 8008d48:	d054      	beq.n	8008df4 <__mdiff+0xc0>
 8008d4a:	db4d      	blt.n	8008de8 <__mdiff+0xb4>
 8008d4c:	f04f 0800 	mov.w	r8, #0
 8008d50:	6871      	ldr	r1, [r6, #4]
 8008d52:	4628      	mov	r0, r5
 8008d54:	f7ff fdc0 	bl	80088d8 <_Balloc>
 8008d58:	6937      	ldr	r7, [r6, #16]
 8008d5a:	6923      	ldr	r3, [r4, #16]
 8008d5c:	f8c0 800c 	str.w	r8, [r0, #12]
 8008d60:	3614      	adds	r6, #20
 8008d62:	f104 0214 	add.w	r2, r4, #20
 8008d66:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8008d6a:	f100 0514 	add.w	r5, r0, #20
 8008d6e:	eb06 0e87 	add.w	lr, r6, r7, lsl #2
 8008d72:	2300      	movs	r3, #0
 8008d74:	f856 8b04 	ldr.w	r8, [r6], #4
 8008d78:	f852 4b04 	ldr.w	r4, [r2], #4
 8008d7c:	fa13 f388 	uxtah	r3, r3, r8
 8008d80:	b2a1      	uxth	r1, r4
 8008d82:	0c24      	lsrs	r4, r4, #16
 8008d84:	1a59      	subs	r1, r3, r1
 8008d86:	ebc4 4318 	rsb	r3, r4, r8, lsr #16
 8008d8a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008d8e:	b289      	uxth	r1, r1
 8008d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d94:	4594      	cmp	ip, r2
 8008d96:	f845 1b04 	str.w	r1, [r5], #4
 8008d9a:	ea4f 4323 	mov.w	r3, r3, asr #16
 8008d9e:	4634      	mov	r4, r6
 8008da0:	d8e8      	bhi.n	8008d74 <__mdiff+0x40>
 8008da2:	45b6      	cmp	lr, r6
 8008da4:	46ac      	mov	ip, r5
 8008da6:	d915      	bls.n	8008dd4 <__mdiff+0xa0>
 8008da8:	f854 2b04 	ldr.w	r2, [r4], #4
 8008dac:	fa13 f182 	uxtah	r1, r3, r2
 8008db0:	0c13      	lsrs	r3, r2, #16
 8008db2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008db6:	b289      	uxth	r1, r1
 8008db8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008dbc:	45a6      	cmp	lr, r4
 8008dbe:	f845 1b04 	str.w	r1, [r5], #4
 8008dc2:	ea4f 4323 	mov.w	r3, r3, asr #16
 8008dc6:	d8ef      	bhi.n	8008da8 <__mdiff+0x74>
 8008dc8:	43f6      	mvns	r6, r6
 8008dca:	4476      	add	r6, lr
 8008dcc:	f026 0503 	bic.w	r5, r6, #3
 8008dd0:	3504      	adds	r5, #4
 8008dd2:	4465      	add	r5, ip
 8008dd4:	3d04      	subs	r5, #4
 8008dd6:	b921      	cbnz	r1, 8008de2 <__mdiff+0xae>
 8008dd8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008ddc:	3f01      	subs	r7, #1
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d0fa      	beq.n	8008dd8 <__mdiff+0xa4>
 8008de2:	6107      	str	r7, [r0, #16]
 8008de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008de8:	4633      	mov	r3, r6
 8008dea:	f04f 0801 	mov.w	r8, #1
 8008dee:	4626      	mov	r6, r4
 8008df0:	461c      	mov	r4, r3
 8008df2:	e7ad      	b.n	8008d50 <__mdiff+0x1c>
 8008df4:	4628      	mov	r0, r5
 8008df6:	4639      	mov	r1, r7
 8008df8:	f7ff fd6e 	bl	80088d8 <_Balloc>
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	6147      	str	r7, [r0, #20]
 8008e00:	6103      	str	r3, [r0, #16]
 8008e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e06:	bf00      	nop

08008e08 <__d2b>:
 8008e08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e0c:	ec57 6b10 	vmov	r6, r7, d0
 8008e10:	b083      	sub	sp, #12
 8008e12:	4688      	mov	r8, r1
 8008e14:	2101      	movs	r1, #1
 8008e16:	463c      	mov	r4, r7
 8008e18:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008e1c:	4617      	mov	r7, r2
 8008e1e:	f7ff fd5b 	bl	80088d8 <_Balloc>
 8008e22:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008e26:	4681      	mov	r9, r0
 8008e28:	b10d      	cbz	r5, 8008e2e <__d2b+0x26>
 8008e2a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8008e2e:	9401      	str	r4, [sp, #4]
 8008e30:	b31e      	cbz	r6, 8008e7a <__d2b+0x72>
 8008e32:	a802      	add	r0, sp, #8
 8008e34:	f840 6d08 	str.w	r6, [r0, #-8]!
 8008e38:	f7ff fde0 	bl	80089fc <__lo0bits>
 8008e3c:	2800      	cmp	r0, #0
 8008e3e:	d134      	bne.n	8008eaa <__d2b+0xa2>
 8008e40:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8008e44:	f8c9 2014 	str.w	r2, [r9, #20]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	bf14      	ite	ne
 8008e4c:	2402      	movne	r4, #2
 8008e4e:	2401      	moveq	r4, #1
 8008e50:	f8c9 3018 	str.w	r3, [r9, #24]
 8008e54:	f8c9 4010 	str.w	r4, [r9, #16]
 8008e58:	b9dd      	cbnz	r5, 8008e92 <__d2b+0x8a>
 8008e5a:	eb09 0384 	add.w	r3, r9, r4, lsl #2
 8008e5e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008e62:	f8c8 0000 	str.w	r0, [r8]
 8008e66:	6918      	ldr	r0, [r3, #16]
 8008e68:	f7ff fda8 	bl	80089bc <__hi0bits>
 8008e6c:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8008e70:	6038      	str	r0, [r7, #0]
 8008e72:	4648      	mov	r0, r9
 8008e74:	b003      	add	sp, #12
 8008e76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e7a:	a801      	add	r0, sp, #4
 8008e7c:	f7ff fdbe 	bl	80089fc <__lo0bits>
 8008e80:	2401      	movs	r4, #1
 8008e82:	9b01      	ldr	r3, [sp, #4]
 8008e84:	f8c9 3014 	str.w	r3, [r9, #20]
 8008e88:	3020      	adds	r0, #32
 8008e8a:	f8c9 4010 	str.w	r4, [r9, #16]
 8008e8e:	2d00      	cmp	r5, #0
 8008e90:	d0e3      	beq.n	8008e5a <__d2b+0x52>
 8008e92:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008e96:	4405      	add	r5, r0
 8008e98:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008e9c:	f8c8 5000 	str.w	r5, [r8]
 8008ea0:	6038      	str	r0, [r7, #0]
 8008ea2:	4648      	mov	r0, r9
 8008ea4:	b003      	add	sp, #12
 8008ea6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008eaa:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8008eae:	f1c0 0120 	rsb	r1, r0, #32
 8008eb2:	fa03 f101 	lsl.w	r1, r3, r1
 8008eb6:	430a      	orrs	r2, r1
 8008eb8:	40c3      	lsrs	r3, r0
 8008eba:	9301      	str	r3, [sp, #4]
 8008ebc:	f8c9 2014 	str.w	r2, [r9, #20]
 8008ec0:	e7c2      	b.n	8008e48 <__d2b+0x40>
 8008ec2:	bf00      	nop

08008ec4 <_putc_r>:
 8008ec4:	b570      	push	{r4, r5, r6, lr}
 8008ec6:	460d      	mov	r5, r1
 8008ec8:	4614      	mov	r4, r2
 8008eca:	4606      	mov	r6, r0
 8008ecc:	b108      	cbz	r0, 8008ed2 <_putc_r+0xe>
 8008ece:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008ed0:	b1d3      	cbz	r3, 8008f08 <_putc_r+0x44>
 8008ed2:	68a3      	ldr	r3, [r4, #8]
 8008ed4:	3b01      	subs	r3, #1
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	60a3      	str	r3, [r4, #8]
 8008eda:	db06      	blt.n	8008eea <_putc_r+0x26>
 8008edc:	6823      	ldr	r3, [r4, #0]
 8008ede:	701d      	strb	r5, [r3, #0]
 8008ee0:	6823      	ldr	r3, [r4, #0]
 8008ee2:	1c5a      	adds	r2, r3, #1
 8008ee4:	6022      	str	r2, [r4, #0]
 8008ee6:	7818      	ldrb	r0, [r3, #0]
 8008ee8:	bd70      	pop	{r4, r5, r6, pc}
 8008eea:	69a2      	ldr	r2, [r4, #24]
 8008eec:	4293      	cmp	r3, r2
 8008eee:	db0e      	blt.n	8008f0e <_putc_r+0x4a>
 8008ef0:	6823      	ldr	r3, [r4, #0]
 8008ef2:	701d      	strb	r5, [r3, #0]
 8008ef4:	6823      	ldr	r3, [r4, #0]
 8008ef6:	7819      	ldrb	r1, [r3, #0]
 8008ef8:	290a      	cmp	r1, #10
 8008efa:	d1f2      	bne.n	8008ee2 <_putc_r+0x1e>
 8008efc:	4630      	mov	r0, r6
 8008efe:	4622      	mov	r2, r4
 8008f00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008f04:	f000 bab8 	b.w	8009478 <__swbuf_r>
 8008f08:	f7fe fe20 	bl	8007b4c <__sinit>
 8008f0c:	e7e1      	b.n	8008ed2 <_putc_r+0xe>
 8008f0e:	4630      	mov	r0, r6
 8008f10:	4629      	mov	r1, r5
 8008f12:	4622      	mov	r2, r4
 8008f14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008f18:	f000 baae 	b.w	8009478 <__swbuf_r>

08008f1c <_realloc_r>:
 8008f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f20:	4617      	mov	r7, r2
 8008f22:	b083      	sub	sp, #12
 8008f24:	460e      	mov	r6, r1
 8008f26:	2900      	cmp	r1, #0
 8008f28:	f000 80e7 	beq.w	80090fa <_realloc_r+0x1de>
 8008f2c:	4681      	mov	r9, r0
 8008f2e:	f107 050b 	add.w	r5, r7, #11
 8008f32:	f7ff fccd 	bl	80088d0 <__malloc_lock>
 8008f36:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008f3a:	2d16      	cmp	r5, #22
 8008f3c:	f023 0403 	bic.w	r4, r3, #3
 8008f40:	f1a6 0808 	sub.w	r8, r6, #8
 8008f44:	d84c      	bhi.n	8008fe0 <_realloc_r+0xc4>
 8008f46:	2210      	movs	r2, #16
 8008f48:	4615      	mov	r5, r2
 8008f4a:	42af      	cmp	r7, r5
 8008f4c:	d84d      	bhi.n	8008fea <_realloc_r+0xce>
 8008f4e:	4294      	cmp	r4, r2
 8008f50:	f280 8084 	bge.w	800905c <_realloc_r+0x140>
 8008f54:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 8009304 <_realloc_r+0x3e8>
 8008f58:	f8db 0008 	ldr.w	r0, [fp, #8]
 8008f5c:	eb08 0104 	add.w	r1, r8, r4
 8008f60:	4288      	cmp	r0, r1
 8008f62:	f000 80d6 	beq.w	8009112 <_realloc_r+0x1f6>
 8008f66:	6848      	ldr	r0, [r1, #4]
 8008f68:	f020 0e01 	bic.w	lr, r0, #1
 8008f6c:	448e      	add	lr, r1
 8008f6e:	f8de e004 	ldr.w	lr, [lr, #4]
 8008f72:	f01e 0f01 	tst.w	lr, #1
 8008f76:	d13f      	bne.n	8008ff8 <_realloc_r+0xdc>
 8008f78:	f020 0003 	bic.w	r0, r0, #3
 8008f7c:	4420      	add	r0, r4
 8008f7e:	4290      	cmp	r0, r2
 8008f80:	f280 80c1 	bge.w	8009106 <_realloc_r+0x1ea>
 8008f84:	07db      	lsls	r3, r3, #31
 8008f86:	f100 808f 	bmi.w	80090a8 <_realloc_r+0x18c>
 8008f8a:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8008f8e:	ebc3 0a08 	rsb	sl, r3, r8
 8008f92:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008f96:	f023 0303 	bic.w	r3, r3, #3
 8008f9a:	eb00 0e03 	add.w	lr, r0, r3
 8008f9e:	4596      	cmp	lr, r2
 8008fa0:	db34      	blt.n	800900c <_realloc_r+0xf0>
 8008fa2:	68cb      	ldr	r3, [r1, #12]
 8008fa4:	688a      	ldr	r2, [r1, #8]
 8008fa6:	4657      	mov	r7, sl
 8008fa8:	60d3      	str	r3, [r2, #12]
 8008faa:	609a      	str	r2, [r3, #8]
 8008fac:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8008fb0:	f8da 300c 	ldr.w	r3, [sl, #12]
 8008fb4:	60cb      	str	r3, [r1, #12]
 8008fb6:	1f22      	subs	r2, r4, #4
 8008fb8:	2a24      	cmp	r2, #36	; 0x24
 8008fba:	6099      	str	r1, [r3, #8]
 8008fbc:	f200 8136 	bhi.w	800922c <_realloc_r+0x310>
 8008fc0:	2a13      	cmp	r2, #19
 8008fc2:	f240 80fd 	bls.w	80091c0 <_realloc_r+0x2a4>
 8008fc6:	6833      	ldr	r3, [r6, #0]
 8008fc8:	f8ca 3008 	str.w	r3, [sl, #8]
 8008fcc:	6873      	ldr	r3, [r6, #4]
 8008fce:	f8ca 300c 	str.w	r3, [sl, #12]
 8008fd2:	2a1b      	cmp	r2, #27
 8008fd4:	f200 8140 	bhi.w	8009258 <_realloc_r+0x33c>
 8008fd8:	3608      	adds	r6, #8
 8008fda:	f10a 0310 	add.w	r3, sl, #16
 8008fde:	e0f0      	b.n	80091c2 <_realloc_r+0x2a6>
 8008fe0:	f025 0507 	bic.w	r5, r5, #7
 8008fe4:	2d00      	cmp	r5, #0
 8008fe6:	462a      	mov	r2, r5
 8008fe8:	daaf      	bge.n	8008f4a <_realloc_r+0x2e>
 8008fea:	230c      	movs	r3, #12
 8008fec:	2000      	movs	r0, #0
 8008fee:	f8c9 3000 	str.w	r3, [r9]
 8008ff2:	b003      	add	sp, #12
 8008ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ff8:	07d9      	lsls	r1, r3, #31
 8008ffa:	d455      	bmi.n	80090a8 <_realloc_r+0x18c>
 8008ffc:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8009000:	ebc3 0a08 	rsb	sl, r3, r8
 8009004:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009008:	f023 0303 	bic.w	r3, r3, #3
 800900c:	4423      	add	r3, r4
 800900e:	4293      	cmp	r3, r2
 8009010:	db4a      	blt.n	80090a8 <_realloc_r+0x18c>
 8009012:	4657      	mov	r7, sl
 8009014:	f8da 100c 	ldr.w	r1, [sl, #12]
 8009018:	f857 0f08 	ldr.w	r0, [r7, #8]!
 800901c:	1f22      	subs	r2, r4, #4
 800901e:	2a24      	cmp	r2, #36	; 0x24
 8009020:	60c1      	str	r1, [r0, #12]
 8009022:	6088      	str	r0, [r1, #8]
 8009024:	f200 810e 	bhi.w	8009244 <_realloc_r+0x328>
 8009028:	2a13      	cmp	r2, #19
 800902a:	f240 8109 	bls.w	8009240 <_realloc_r+0x324>
 800902e:	6831      	ldr	r1, [r6, #0]
 8009030:	f8ca 1008 	str.w	r1, [sl, #8]
 8009034:	6871      	ldr	r1, [r6, #4]
 8009036:	f8ca 100c 	str.w	r1, [sl, #12]
 800903a:	2a1b      	cmp	r2, #27
 800903c:	f200 8121 	bhi.w	8009282 <_realloc_r+0x366>
 8009040:	3608      	adds	r6, #8
 8009042:	f10a 0210 	add.w	r2, sl, #16
 8009046:	6831      	ldr	r1, [r6, #0]
 8009048:	6011      	str	r1, [r2, #0]
 800904a:	6871      	ldr	r1, [r6, #4]
 800904c:	6051      	str	r1, [r2, #4]
 800904e:	68b1      	ldr	r1, [r6, #8]
 8009050:	6091      	str	r1, [r2, #8]
 8009052:	461c      	mov	r4, r3
 8009054:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009058:	463e      	mov	r6, r7
 800905a:	46d0      	mov	r8, sl
 800905c:	1b62      	subs	r2, r4, r5
 800905e:	2a0f      	cmp	r2, #15
 8009060:	f003 0301 	and.w	r3, r3, #1
 8009064:	d80e      	bhi.n	8009084 <_realloc_r+0x168>
 8009066:	4323      	orrs	r3, r4
 8009068:	4444      	add	r4, r8
 800906a:	f8c8 3004 	str.w	r3, [r8, #4]
 800906e:	6863      	ldr	r3, [r4, #4]
 8009070:	f043 0301 	orr.w	r3, r3, #1
 8009074:	6063      	str	r3, [r4, #4]
 8009076:	4648      	mov	r0, r9
 8009078:	f7ff fc2c 	bl	80088d4 <__malloc_unlock>
 800907c:	4630      	mov	r0, r6
 800907e:	b003      	add	sp, #12
 8009080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009084:	eb08 0105 	add.w	r1, r8, r5
 8009088:	431d      	orrs	r5, r3
 800908a:	f042 0301 	orr.w	r3, r2, #1
 800908e:	440a      	add	r2, r1
 8009090:	f8c8 5004 	str.w	r5, [r8, #4]
 8009094:	604b      	str	r3, [r1, #4]
 8009096:	6853      	ldr	r3, [r2, #4]
 8009098:	f043 0301 	orr.w	r3, r3, #1
 800909c:	3108      	adds	r1, #8
 800909e:	6053      	str	r3, [r2, #4]
 80090a0:	4648      	mov	r0, r9
 80090a2:	f7fe fdc1 	bl	8007c28 <_free_r>
 80090a6:	e7e6      	b.n	8009076 <_realloc_r+0x15a>
 80090a8:	4639      	mov	r1, r7
 80090aa:	4648      	mov	r0, r9
 80090ac:	f7ff f8d0 	bl	8008250 <_malloc_r>
 80090b0:	4607      	mov	r7, r0
 80090b2:	b1d8      	cbz	r0, 80090ec <_realloc_r+0x1d0>
 80090b4:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80090b8:	f023 0201 	bic.w	r2, r3, #1
 80090bc:	4442      	add	r2, r8
 80090be:	f1a0 0108 	sub.w	r1, r0, #8
 80090c2:	4291      	cmp	r1, r2
 80090c4:	f000 80ac 	beq.w	8009220 <_realloc_r+0x304>
 80090c8:	1f22      	subs	r2, r4, #4
 80090ca:	2a24      	cmp	r2, #36	; 0x24
 80090cc:	f200 8099 	bhi.w	8009202 <_realloc_r+0x2e6>
 80090d0:	2a13      	cmp	r2, #19
 80090d2:	d86a      	bhi.n	80091aa <_realloc_r+0x28e>
 80090d4:	4603      	mov	r3, r0
 80090d6:	4632      	mov	r2, r6
 80090d8:	6811      	ldr	r1, [r2, #0]
 80090da:	6019      	str	r1, [r3, #0]
 80090dc:	6851      	ldr	r1, [r2, #4]
 80090de:	6059      	str	r1, [r3, #4]
 80090e0:	6892      	ldr	r2, [r2, #8]
 80090e2:	609a      	str	r2, [r3, #8]
 80090e4:	4631      	mov	r1, r6
 80090e6:	4648      	mov	r0, r9
 80090e8:	f7fe fd9e 	bl	8007c28 <_free_r>
 80090ec:	4648      	mov	r0, r9
 80090ee:	f7ff fbf1 	bl	80088d4 <__malloc_unlock>
 80090f2:	4638      	mov	r0, r7
 80090f4:	b003      	add	sp, #12
 80090f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090fa:	4611      	mov	r1, r2
 80090fc:	b003      	add	sp, #12
 80090fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009102:	f7ff b8a5 	b.w	8008250 <_malloc_r>
 8009106:	68ca      	ldr	r2, [r1, #12]
 8009108:	6889      	ldr	r1, [r1, #8]
 800910a:	4604      	mov	r4, r0
 800910c:	60ca      	str	r2, [r1, #12]
 800910e:	6091      	str	r1, [r2, #8]
 8009110:	e7a4      	b.n	800905c <_realloc_r+0x140>
 8009112:	6841      	ldr	r1, [r0, #4]
 8009114:	f021 0103 	bic.w	r1, r1, #3
 8009118:	4421      	add	r1, r4
 800911a:	f105 0010 	add.w	r0, r5, #16
 800911e:	4281      	cmp	r1, r0
 8009120:	da5b      	bge.n	80091da <_realloc_r+0x2be>
 8009122:	07db      	lsls	r3, r3, #31
 8009124:	d4c0      	bmi.n	80090a8 <_realloc_r+0x18c>
 8009126:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800912a:	ebc3 0a08 	rsb	sl, r3, r8
 800912e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009132:	f023 0303 	bic.w	r3, r3, #3
 8009136:	eb01 0c03 	add.w	ip, r1, r3
 800913a:	4560      	cmp	r0, ip
 800913c:	f73f af66 	bgt.w	800900c <_realloc_r+0xf0>
 8009140:	4657      	mov	r7, sl
 8009142:	f8da 300c 	ldr.w	r3, [sl, #12]
 8009146:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800914a:	1f22      	subs	r2, r4, #4
 800914c:	2a24      	cmp	r2, #36	; 0x24
 800914e:	60cb      	str	r3, [r1, #12]
 8009150:	6099      	str	r1, [r3, #8]
 8009152:	f200 80b8 	bhi.w	80092c6 <_realloc_r+0x3aa>
 8009156:	2a13      	cmp	r2, #19
 8009158:	f240 80a9 	bls.w	80092ae <_realloc_r+0x392>
 800915c:	6833      	ldr	r3, [r6, #0]
 800915e:	f8ca 3008 	str.w	r3, [sl, #8]
 8009162:	6873      	ldr	r3, [r6, #4]
 8009164:	f8ca 300c 	str.w	r3, [sl, #12]
 8009168:	2a1b      	cmp	r2, #27
 800916a:	f200 80b5 	bhi.w	80092d8 <_realloc_r+0x3bc>
 800916e:	3608      	adds	r6, #8
 8009170:	f10a 0310 	add.w	r3, sl, #16
 8009174:	6832      	ldr	r2, [r6, #0]
 8009176:	601a      	str	r2, [r3, #0]
 8009178:	6872      	ldr	r2, [r6, #4]
 800917a:	605a      	str	r2, [r3, #4]
 800917c:	68b2      	ldr	r2, [r6, #8]
 800917e:	609a      	str	r2, [r3, #8]
 8009180:	eb0a 0205 	add.w	r2, sl, r5
 8009184:	ebc5 030c 	rsb	r3, r5, ip
 8009188:	f043 0301 	orr.w	r3, r3, #1
 800918c:	f8cb 2008 	str.w	r2, [fp, #8]
 8009190:	6053      	str	r3, [r2, #4]
 8009192:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009196:	f003 0301 	and.w	r3, r3, #1
 800919a:	431d      	orrs	r5, r3
 800919c:	4648      	mov	r0, r9
 800919e:	f8ca 5004 	str.w	r5, [sl, #4]
 80091a2:	f7ff fb97 	bl	80088d4 <__malloc_unlock>
 80091a6:	4638      	mov	r0, r7
 80091a8:	e769      	b.n	800907e <_realloc_r+0x162>
 80091aa:	6833      	ldr	r3, [r6, #0]
 80091ac:	6003      	str	r3, [r0, #0]
 80091ae:	6873      	ldr	r3, [r6, #4]
 80091b0:	6043      	str	r3, [r0, #4]
 80091b2:	2a1b      	cmp	r2, #27
 80091b4:	d829      	bhi.n	800920a <_realloc_r+0x2ee>
 80091b6:	f100 0308 	add.w	r3, r0, #8
 80091ba:	f106 0208 	add.w	r2, r6, #8
 80091be:	e78b      	b.n	80090d8 <_realloc_r+0x1bc>
 80091c0:	463b      	mov	r3, r7
 80091c2:	6832      	ldr	r2, [r6, #0]
 80091c4:	601a      	str	r2, [r3, #0]
 80091c6:	6872      	ldr	r2, [r6, #4]
 80091c8:	605a      	str	r2, [r3, #4]
 80091ca:	68b2      	ldr	r2, [r6, #8]
 80091cc:	609a      	str	r2, [r3, #8]
 80091ce:	463e      	mov	r6, r7
 80091d0:	4674      	mov	r4, lr
 80091d2:	f8da 3004 	ldr.w	r3, [sl, #4]
 80091d6:	46d0      	mov	r8, sl
 80091d8:	e740      	b.n	800905c <_realloc_r+0x140>
 80091da:	eb08 0205 	add.w	r2, r8, r5
 80091de:	1b4b      	subs	r3, r1, r5
 80091e0:	f043 0301 	orr.w	r3, r3, #1
 80091e4:	f8cb 2008 	str.w	r2, [fp, #8]
 80091e8:	6053      	str	r3, [r2, #4]
 80091ea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80091ee:	f003 0301 	and.w	r3, r3, #1
 80091f2:	431d      	orrs	r5, r3
 80091f4:	4648      	mov	r0, r9
 80091f6:	f846 5c04 	str.w	r5, [r6, #-4]
 80091fa:	f7ff fb6b 	bl	80088d4 <__malloc_unlock>
 80091fe:	4630      	mov	r0, r6
 8009200:	e73d      	b.n	800907e <_realloc_r+0x162>
 8009202:	4631      	mov	r1, r6
 8009204:	f7ff fb00 	bl	8008808 <memmove>
 8009208:	e76c      	b.n	80090e4 <_realloc_r+0x1c8>
 800920a:	68b3      	ldr	r3, [r6, #8]
 800920c:	6083      	str	r3, [r0, #8]
 800920e:	68f3      	ldr	r3, [r6, #12]
 8009210:	60c3      	str	r3, [r0, #12]
 8009212:	2a24      	cmp	r2, #36	; 0x24
 8009214:	d02c      	beq.n	8009270 <_realloc_r+0x354>
 8009216:	f100 0310 	add.w	r3, r0, #16
 800921a:	f106 0210 	add.w	r2, r6, #16
 800921e:	e75b      	b.n	80090d8 <_realloc_r+0x1bc>
 8009220:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8009224:	f022 0203 	bic.w	r2, r2, #3
 8009228:	4414      	add	r4, r2
 800922a:	e717      	b.n	800905c <_realloc_r+0x140>
 800922c:	4631      	mov	r1, r6
 800922e:	4638      	mov	r0, r7
 8009230:	4674      	mov	r4, lr
 8009232:	463e      	mov	r6, r7
 8009234:	f7ff fae8 	bl	8008808 <memmove>
 8009238:	46d0      	mov	r8, sl
 800923a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800923e:	e70d      	b.n	800905c <_realloc_r+0x140>
 8009240:	463a      	mov	r2, r7
 8009242:	e700      	b.n	8009046 <_realloc_r+0x12a>
 8009244:	4631      	mov	r1, r6
 8009246:	4638      	mov	r0, r7
 8009248:	461c      	mov	r4, r3
 800924a:	463e      	mov	r6, r7
 800924c:	f7ff fadc 	bl	8008808 <memmove>
 8009250:	46d0      	mov	r8, sl
 8009252:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009256:	e701      	b.n	800905c <_realloc_r+0x140>
 8009258:	68b3      	ldr	r3, [r6, #8]
 800925a:	f8ca 3010 	str.w	r3, [sl, #16]
 800925e:	68f3      	ldr	r3, [r6, #12]
 8009260:	f8ca 3014 	str.w	r3, [sl, #20]
 8009264:	2a24      	cmp	r2, #36	; 0x24
 8009266:	d018      	beq.n	800929a <_realloc_r+0x37e>
 8009268:	3610      	adds	r6, #16
 800926a:	f10a 0318 	add.w	r3, sl, #24
 800926e:	e7a8      	b.n	80091c2 <_realloc_r+0x2a6>
 8009270:	6933      	ldr	r3, [r6, #16]
 8009272:	6103      	str	r3, [r0, #16]
 8009274:	6973      	ldr	r3, [r6, #20]
 8009276:	6143      	str	r3, [r0, #20]
 8009278:	f106 0218 	add.w	r2, r6, #24
 800927c:	f100 0318 	add.w	r3, r0, #24
 8009280:	e72a      	b.n	80090d8 <_realloc_r+0x1bc>
 8009282:	68b1      	ldr	r1, [r6, #8]
 8009284:	f8ca 1010 	str.w	r1, [sl, #16]
 8009288:	68f1      	ldr	r1, [r6, #12]
 800928a:	f8ca 1014 	str.w	r1, [sl, #20]
 800928e:	2a24      	cmp	r2, #36	; 0x24
 8009290:	d00f      	beq.n	80092b2 <_realloc_r+0x396>
 8009292:	3610      	adds	r6, #16
 8009294:	f10a 0218 	add.w	r2, sl, #24
 8009298:	e6d5      	b.n	8009046 <_realloc_r+0x12a>
 800929a:	6933      	ldr	r3, [r6, #16]
 800929c:	f8ca 3018 	str.w	r3, [sl, #24]
 80092a0:	6973      	ldr	r3, [r6, #20]
 80092a2:	f8ca 301c 	str.w	r3, [sl, #28]
 80092a6:	3618      	adds	r6, #24
 80092a8:	f10a 0320 	add.w	r3, sl, #32
 80092ac:	e789      	b.n	80091c2 <_realloc_r+0x2a6>
 80092ae:	463b      	mov	r3, r7
 80092b0:	e760      	b.n	8009174 <_realloc_r+0x258>
 80092b2:	6932      	ldr	r2, [r6, #16]
 80092b4:	f8ca 2018 	str.w	r2, [sl, #24]
 80092b8:	6972      	ldr	r2, [r6, #20]
 80092ba:	f8ca 201c 	str.w	r2, [sl, #28]
 80092be:	3618      	adds	r6, #24
 80092c0:	f10a 0220 	add.w	r2, sl, #32
 80092c4:	e6bf      	b.n	8009046 <_realloc_r+0x12a>
 80092c6:	4631      	mov	r1, r6
 80092c8:	4638      	mov	r0, r7
 80092ca:	f8cd c004 	str.w	ip, [sp, #4]
 80092ce:	f7ff fa9b 	bl	8008808 <memmove>
 80092d2:	f8dd c004 	ldr.w	ip, [sp, #4]
 80092d6:	e753      	b.n	8009180 <_realloc_r+0x264>
 80092d8:	68b3      	ldr	r3, [r6, #8]
 80092da:	f8ca 3010 	str.w	r3, [sl, #16]
 80092de:	68f3      	ldr	r3, [r6, #12]
 80092e0:	f8ca 3014 	str.w	r3, [sl, #20]
 80092e4:	2a24      	cmp	r2, #36	; 0x24
 80092e6:	d003      	beq.n	80092f0 <_realloc_r+0x3d4>
 80092e8:	3610      	adds	r6, #16
 80092ea:	f10a 0318 	add.w	r3, sl, #24
 80092ee:	e741      	b.n	8009174 <_realloc_r+0x258>
 80092f0:	6933      	ldr	r3, [r6, #16]
 80092f2:	f8ca 3018 	str.w	r3, [sl, #24]
 80092f6:	6973      	ldr	r3, [r6, #20]
 80092f8:	f8ca 301c 	str.w	r3, [sl, #28]
 80092fc:	3618      	adds	r6, #24
 80092fe:	f10a 0320 	add.w	r3, sl, #32
 8009302:	e737      	b.n	8009174 <_realloc_r+0x258>
 8009304:	20000628 	.word	0x20000628

08009308 <__fpclassifyd>:
 8009308:	ec53 2b10 	vmov	r2, r3, d0
 800930c:	b410      	push	{r4}
 800930e:	f033 4400 	bics.w	r4, r3, #2147483648	; 0x80000000
 8009312:	d008      	beq.n	8009326 <__fpclassifyd+0x1e>
 8009314:	4911      	ldr	r1, [pc, #68]	; (800935c <__fpclassifyd+0x54>)
 8009316:	f5a3 1080 	sub.w	r0, r3, #1048576	; 0x100000
 800931a:	4288      	cmp	r0, r1
 800931c:	d808      	bhi.n	8009330 <__fpclassifyd+0x28>
 800931e:	2004      	movs	r0, #4
 8009320:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009324:	4770      	bx	lr
 8009326:	b91a      	cbnz	r2, 8009330 <__fpclassifyd+0x28>
 8009328:	2002      	movs	r0, #2
 800932a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800932e:	4770      	bx	lr
 8009330:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 8009334:	4909      	ldr	r1, [pc, #36]	; (800935c <__fpclassifyd+0x54>)
 8009336:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800933a:	428b      	cmp	r3, r1
 800933c:	d9ef      	bls.n	800931e <__fpclassifyd+0x16>
 800933e:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009342:	d201      	bcs.n	8009348 <__fpclassifyd+0x40>
 8009344:	2003      	movs	r0, #3
 8009346:	e7eb      	b.n	8009320 <__fpclassifyd+0x18>
 8009348:	4b05      	ldr	r3, [pc, #20]	; (8009360 <__fpclassifyd+0x58>)
 800934a:	429c      	cmp	r4, r3
 800934c:	d001      	beq.n	8009352 <__fpclassifyd+0x4a>
 800934e:	2000      	movs	r0, #0
 8009350:	e7e6      	b.n	8009320 <__fpclassifyd+0x18>
 8009352:	fab2 f082 	clz	r0, r2
 8009356:	0940      	lsrs	r0, r0, #5
 8009358:	e7e2      	b.n	8009320 <__fpclassifyd+0x18>
 800935a:	bf00      	nop
 800935c:	7fdfffff 	.word	0x7fdfffff
 8009360:	7ff00000 	.word	0x7ff00000

08009364 <__sread>:
 8009364:	b510      	push	{r4, lr}
 8009366:	460c      	mov	r4, r1
 8009368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800936c:	f7f8 fd2a 	bl	8001dc4 <_read_r>
 8009370:	2800      	cmp	r0, #0
 8009372:	db03      	blt.n	800937c <__sread+0x18>
 8009374:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009376:	4403      	add	r3, r0
 8009378:	6523      	str	r3, [r4, #80]	; 0x50
 800937a:	bd10      	pop	{r4, pc}
 800937c:	89a3      	ldrh	r3, [r4, #12]
 800937e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009382:	81a3      	strh	r3, [r4, #12]
 8009384:	bd10      	pop	{r4, pc}
 8009386:	bf00      	nop

08009388 <__swrite>:
 8009388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800938c:	4616      	mov	r6, r2
 800938e:	898a      	ldrh	r2, [r1, #12]
 8009390:	461d      	mov	r5, r3
 8009392:	05d3      	lsls	r3, r2, #23
 8009394:	460c      	mov	r4, r1
 8009396:	4607      	mov	r7, r0
 8009398:	d506      	bpl.n	80093a8 <__swrite+0x20>
 800939a:	2200      	movs	r2, #0
 800939c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093a0:	2302      	movs	r3, #2
 80093a2:	f7f8 fc3f 	bl	8001c24 <_lseek_r>
 80093a6:	89a2      	ldrh	r2, [r4, #12]
 80093a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80093b0:	81a2      	strh	r2, [r4, #12]
 80093b2:	4638      	mov	r0, r7
 80093b4:	4632      	mov	r2, r6
 80093b6:	462b      	mov	r3, r5
 80093b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093bc:	f7f8 bd8c 	b.w	8001ed8 <_write_r>

080093c0 <__sseek>:
 80093c0:	b510      	push	{r4, lr}
 80093c2:	460c      	mov	r4, r1
 80093c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093c8:	f7f8 fc2c 	bl	8001c24 <_lseek_r>
 80093cc:	89a3      	ldrh	r3, [r4, #12]
 80093ce:	1c42      	adds	r2, r0, #1
 80093d0:	bf0e      	itee	eq
 80093d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80093d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80093da:	6520      	strne	r0, [r4, #80]	; 0x50
 80093dc:	81a3      	strh	r3, [r4, #12]
 80093de:	bd10      	pop	{r4, pc}

080093e0 <__sclose>:
 80093e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093e4:	f7f8 bc14 	b.w	8001c10 <_close_r>

080093e8 <__sprint_r.part.0>:
 80093e8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80093ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093ee:	049c      	lsls	r4, r3, #18
 80093f0:	460f      	mov	r7, r1
 80093f2:	4692      	mov	sl, r2
 80093f4:	d52b      	bpl.n	800944e <__sprint_r.part.0+0x66>
 80093f6:	6893      	ldr	r3, [r2, #8]
 80093f8:	6812      	ldr	r2, [r2, #0]
 80093fa:	b333      	cbz	r3, 800944a <__sprint_r.part.0+0x62>
 80093fc:	4680      	mov	r8, r0
 80093fe:	f102 0908 	add.w	r9, r2, #8
 8009402:	e919 0060 	ldmdb	r9, {r5, r6}
 8009406:	08b6      	lsrs	r6, r6, #2
 8009408:	d017      	beq.n	800943a <__sprint_r.part.0+0x52>
 800940a:	3d04      	subs	r5, #4
 800940c:	2400      	movs	r4, #0
 800940e:	e001      	b.n	8009414 <__sprint_r.part.0+0x2c>
 8009410:	42a6      	cmp	r6, r4
 8009412:	d010      	beq.n	8009436 <__sprint_r.part.0+0x4e>
 8009414:	4640      	mov	r0, r8
 8009416:	f855 1f04 	ldr.w	r1, [r5, #4]!
 800941a:	463a      	mov	r2, r7
 800941c:	f000 f99c 	bl	8009758 <_fputwc_r>
 8009420:	1c43      	adds	r3, r0, #1
 8009422:	f104 0401 	add.w	r4, r4, #1
 8009426:	d1f3      	bne.n	8009410 <__sprint_r.part.0+0x28>
 8009428:	2300      	movs	r3, #0
 800942a:	f8ca 3008 	str.w	r3, [sl, #8]
 800942e:	f8ca 3004 	str.w	r3, [sl, #4]
 8009432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009436:	f8da 3008 	ldr.w	r3, [sl, #8]
 800943a:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
 800943e:	f8ca 3008 	str.w	r3, [sl, #8]
 8009442:	f109 0908 	add.w	r9, r9, #8
 8009446:	2b00      	cmp	r3, #0
 8009448:	d1db      	bne.n	8009402 <__sprint_r.part.0+0x1a>
 800944a:	2000      	movs	r0, #0
 800944c:	e7ec      	b.n	8009428 <__sprint_r.part.0+0x40>
 800944e:	f7fe fcc3 	bl	8007dd8 <__sfvwrite_r>
 8009452:	2300      	movs	r3, #0
 8009454:	f8ca 3008 	str.w	r3, [sl, #8]
 8009458:	f8ca 3004 	str.w	r3, [sl, #4]
 800945c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009460 <__sprint_r>:
 8009460:	6893      	ldr	r3, [r2, #8]
 8009462:	b410      	push	{r4}
 8009464:	b11b      	cbz	r3, 800946e <__sprint_r+0xe>
 8009466:	f85d 4b04 	ldr.w	r4, [sp], #4
 800946a:	f7ff bfbd 	b.w	80093e8 <__sprint_r.part.0>
 800946e:	4618      	mov	r0, r3
 8009470:	6053      	str	r3, [r2, #4]
 8009472:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009476:	4770      	bx	lr

08009478 <__swbuf_r>:
 8009478:	b570      	push	{r4, r5, r6, lr}
 800947a:	460d      	mov	r5, r1
 800947c:	4614      	mov	r4, r2
 800947e:	4606      	mov	r6, r0
 8009480:	b110      	cbz	r0, 8009488 <__swbuf_r+0x10>
 8009482:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009484:	2b00      	cmp	r3, #0
 8009486:	d048      	beq.n	800951a <__swbuf_r+0xa2>
 8009488:	89a2      	ldrh	r2, [r4, #12]
 800948a:	69a3      	ldr	r3, [r4, #24]
 800948c:	60a3      	str	r3, [r4, #8]
 800948e:	b291      	uxth	r1, r2
 8009490:	0708      	lsls	r0, r1, #28
 8009492:	d538      	bpl.n	8009506 <__swbuf_r+0x8e>
 8009494:	6923      	ldr	r3, [r4, #16]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d035      	beq.n	8009506 <__swbuf_r+0x8e>
 800949a:	0489      	lsls	r1, r1, #18
 800949c:	b2ed      	uxtb	r5, r5
 800949e:	d515      	bpl.n	80094cc <__swbuf_r+0x54>
 80094a0:	6822      	ldr	r2, [r4, #0]
 80094a2:	6961      	ldr	r1, [r4, #20]
 80094a4:	1ad3      	subs	r3, r2, r3
 80094a6:	428b      	cmp	r3, r1
 80094a8:	da1c      	bge.n	80094e4 <__swbuf_r+0x6c>
 80094aa:	3301      	adds	r3, #1
 80094ac:	68a1      	ldr	r1, [r4, #8]
 80094ae:	1c50      	adds	r0, r2, #1
 80094b0:	3901      	subs	r1, #1
 80094b2:	60a1      	str	r1, [r4, #8]
 80094b4:	6020      	str	r0, [r4, #0]
 80094b6:	7015      	strb	r5, [r2, #0]
 80094b8:	6962      	ldr	r2, [r4, #20]
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d01a      	beq.n	80094f4 <__swbuf_r+0x7c>
 80094be:	89a3      	ldrh	r3, [r4, #12]
 80094c0:	07db      	lsls	r3, r3, #31
 80094c2:	d501      	bpl.n	80094c8 <__swbuf_r+0x50>
 80094c4:	2d0a      	cmp	r5, #10
 80094c6:	d015      	beq.n	80094f4 <__swbuf_r+0x7c>
 80094c8:	4628      	mov	r0, r5
 80094ca:	bd70      	pop	{r4, r5, r6, pc}
 80094cc:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80094ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80094d2:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 80094d6:	81a2      	strh	r2, [r4, #12]
 80094d8:	6822      	ldr	r2, [r4, #0]
 80094da:	6661      	str	r1, [r4, #100]	; 0x64
 80094dc:	6961      	ldr	r1, [r4, #20]
 80094de:	1ad3      	subs	r3, r2, r3
 80094e0:	428b      	cmp	r3, r1
 80094e2:	dbe2      	blt.n	80094aa <__swbuf_r+0x32>
 80094e4:	4630      	mov	r0, r6
 80094e6:	4621      	mov	r1, r4
 80094e8:	f7fe fa9c 	bl	8007a24 <_fflush_r>
 80094ec:	b940      	cbnz	r0, 8009500 <__swbuf_r+0x88>
 80094ee:	6822      	ldr	r2, [r4, #0]
 80094f0:	2301      	movs	r3, #1
 80094f2:	e7db      	b.n	80094ac <__swbuf_r+0x34>
 80094f4:	4630      	mov	r0, r6
 80094f6:	4621      	mov	r1, r4
 80094f8:	f7fe fa94 	bl	8007a24 <_fflush_r>
 80094fc:	2800      	cmp	r0, #0
 80094fe:	d0e3      	beq.n	80094c8 <__swbuf_r+0x50>
 8009500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009504:	bd70      	pop	{r4, r5, r6, pc}
 8009506:	4630      	mov	r0, r6
 8009508:	4621      	mov	r1, r4
 800950a:	f7fd f985 	bl	8006818 <__swsetup_r>
 800950e:	2800      	cmp	r0, #0
 8009510:	d1f6      	bne.n	8009500 <__swbuf_r+0x88>
 8009512:	89a2      	ldrh	r2, [r4, #12]
 8009514:	6923      	ldr	r3, [r4, #16]
 8009516:	b291      	uxth	r1, r2
 8009518:	e7bf      	b.n	800949a <__swbuf_r+0x22>
 800951a:	f7fe fb17 	bl	8007b4c <__sinit>
 800951e:	e7b3      	b.n	8009488 <__swbuf_r+0x10>

08009520 <__register_exitproc>:
 8009520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009524:	4c25      	ldr	r4, [pc, #148]	; (80095bc <__register_exitproc+0x9c>)
 8009526:	6825      	ldr	r5, [r4, #0]
 8009528:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 800952c:	4606      	mov	r6, r0
 800952e:	4688      	mov	r8, r1
 8009530:	4692      	mov	sl, r2
 8009532:	4699      	mov	r9, r3
 8009534:	b3cc      	cbz	r4, 80095aa <__register_exitproc+0x8a>
 8009536:	6860      	ldr	r0, [r4, #4]
 8009538:	281f      	cmp	r0, #31
 800953a:	dc18      	bgt.n	800956e <__register_exitproc+0x4e>
 800953c:	1c43      	adds	r3, r0, #1
 800953e:	b17e      	cbz	r6, 8009560 <__register_exitproc+0x40>
 8009540:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8009544:	2101      	movs	r1, #1
 8009546:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 800954a:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
 800954e:	fa01 f200 	lsl.w	r2, r1, r0
 8009552:	4317      	orrs	r7, r2
 8009554:	2e02      	cmp	r6, #2
 8009556:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 800955a:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 800955e:	d01e      	beq.n	800959e <__register_exitproc+0x7e>
 8009560:	3002      	adds	r0, #2
 8009562:	6063      	str	r3, [r4, #4]
 8009564:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 8009568:	2000      	movs	r0, #0
 800956a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800956e:	4b14      	ldr	r3, [pc, #80]	; (80095c0 <__register_exitproc+0xa0>)
 8009570:	b303      	cbz	r3, 80095b4 <__register_exitproc+0x94>
 8009572:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8009576:	f7fe fe63 	bl	8008240 <malloc>
 800957a:	4604      	mov	r4, r0
 800957c:	b1d0      	cbz	r0, 80095b4 <__register_exitproc+0x94>
 800957e:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8009582:	2700      	movs	r7, #0
 8009584:	e880 0088 	stmia.w	r0, {r3, r7}
 8009588:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 800958c:	4638      	mov	r0, r7
 800958e:	2301      	movs	r3, #1
 8009590:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 8009594:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 8009598:	2e00      	cmp	r6, #0
 800959a:	d0e1      	beq.n	8009560 <__register_exitproc+0x40>
 800959c:	e7d0      	b.n	8009540 <__register_exitproc+0x20>
 800959e:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 80095a2:	430a      	orrs	r2, r1
 80095a4:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 80095a8:	e7da      	b.n	8009560 <__register_exitproc+0x40>
 80095aa:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 80095ae:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 80095b2:	e7c0      	b.n	8009536 <__register_exitproc+0x16>
 80095b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095bc:	08018ff4 	.word	0x08018ff4
 80095c0:	08008241 	.word	0x08008241

080095c4 <_calloc_r>:
 80095c4:	b510      	push	{r4, lr}
 80095c6:	fb02 f101 	mul.w	r1, r2, r1
 80095ca:	f7fe fe41 	bl	8008250 <_malloc_r>
 80095ce:	4604      	mov	r4, r0
 80095d0:	b168      	cbz	r0, 80095ee <_calloc_r+0x2a>
 80095d2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80095d6:	f022 0203 	bic.w	r2, r2, #3
 80095da:	3a04      	subs	r2, #4
 80095dc:	2a24      	cmp	r2, #36	; 0x24
 80095de:	d818      	bhi.n	8009612 <_calloc_r+0x4e>
 80095e0:	2a13      	cmp	r2, #19
 80095e2:	d806      	bhi.n	80095f2 <_calloc_r+0x2e>
 80095e4:	4603      	mov	r3, r0
 80095e6:	2200      	movs	r2, #0
 80095e8:	601a      	str	r2, [r3, #0]
 80095ea:	605a      	str	r2, [r3, #4]
 80095ec:	609a      	str	r2, [r3, #8]
 80095ee:	4620      	mov	r0, r4
 80095f0:	bd10      	pop	{r4, pc}
 80095f2:	2300      	movs	r3, #0
 80095f4:	2a1b      	cmp	r2, #27
 80095f6:	6003      	str	r3, [r0, #0]
 80095f8:	6043      	str	r3, [r0, #4]
 80095fa:	d90f      	bls.n	800961c <_calloc_r+0x58>
 80095fc:	2a24      	cmp	r2, #36	; 0x24
 80095fe:	6083      	str	r3, [r0, #8]
 8009600:	60c3      	str	r3, [r0, #12]
 8009602:	bf05      	ittet	eq
 8009604:	6103      	streq	r3, [r0, #16]
 8009606:	6143      	streq	r3, [r0, #20]
 8009608:	f100 0310 	addne.w	r3, r0, #16
 800960c:	f100 0318 	addeq.w	r3, r0, #24
 8009610:	e7e9      	b.n	80095e6 <_calloc_r+0x22>
 8009612:	2100      	movs	r1, #0
 8009614:	f7fb fc08 	bl	8004e28 <memset>
 8009618:	4620      	mov	r0, r4
 800961a:	bd10      	pop	{r4, pc}
 800961c:	f100 0308 	add.w	r3, r0, #8
 8009620:	e7e1      	b.n	80095e6 <_calloc_r+0x22>
 8009622:	bf00      	nop

08009624 <_fclose_r>:
 8009624:	2900      	cmp	r1, #0
 8009626:	d03d      	beq.n	80096a4 <_fclose_r+0x80>
 8009628:	b570      	push	{r4, r5, r6, lr}
 800962a:	4605      	mov	r5, r0
 800962c:	460c      	mov	r4, r1
 800962e:	b108      	cbz	r0, 8009634 <_fclose_r+0x10>
 8009630:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009632:	b37b      	cbz	r3, 8009694 <_fclose_r+0x70>
 8009634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009638:	b90b      	cbnz	r3, 800963e <_fclose_r+0x1a>
 800963a:	2000      	movs	r0, #0
 800963c:	bd70      	pop	{r4, r5, r6, pc}
 800963e:	4628      	mov	r0, r5
 8009640:	4621      	mov	r1, r4
 8009642:	f7fe f945 	bl	80078d0 <__sflush_r>
 8009646:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009648:	4606      	mov	r6, r0
 800964a:	b133      	cbz	r3, 800965a <_fclose_r+0x36>
 800964c:	4628      	mov	r0, r5
 800964e:	69e1      	ldr	r1, [r4, #28]
 8009650:	4798      	blx	r3
 8009652:	2800      	cmp	r0, #0
 8009654:	bfb8      	it	lt
 8009656:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 800965a:	89a3      	ldrh	r3, [r4, #12]
 800965c:	061b      	lsls	r3, r3, #24
 800965e:	d41c      	bmi.n	800969a <_fclose_r+0x76>
 8009660:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009662:	b141      	cbz	r1, 8009676 <_fclose_r+0x52>
 8009664:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8009668:	4299      	cmp	r1, r3
 800966a:	d002      	beq.n	8009672 <_fclose_r+0x4e>
 800966c:	4628      	mov	r0, r5
 800966e:	f7fe fadb 	bl	8007c28 <_free_r>
 8009672:	2300      	movs	r3, #0
 8009674:	6323      	str	r3, [r4, #48]	; 0x30
 8009676:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009678:	b121      	cbz	r1, 8009684 <_fclose_r+0x60>
 800967a:	4628      	mov	r0, r5
 800967c:	f7fe fad4 	bl	8007c28 <_free_r>
 8009680:	2300      	movs	r3, #0
 8009682:	6463      	str	r3, [r4, #68]	; 0x44
 8009684:	f7fe fa68 	bl	8007b58 <__sfp_lock_acquire>
 8009688:	2300      	movs	r3, #0
 800968a:	81a3      	strh	r3, [r4, #12]
 800968c:	f7fe fa66 	bl	8007b5c <__sfp_lock_release>
 8009690:	4630      	mov	r0, r6
 8009692:	bd70      	pop	{r4, r5, r6, pc}
 8009694:	f7fe fa5a 	bl	8007b4c <__sinit>
 8009698:	e7cc      	b.n	8009634 <_fclose_r+0x10>
 800969a:	4628      	mov	r0, r5
 800969c:	6921      	ldr	r1, [r4, #16]
 800969e:	f7fe fac3 	bl	8007c28 <_free_r>
 80096a2:	e7dd      	b.n	8009660 <_fclose_r+0x3c>
 80096a4:	2000      	movs	r0, #0
 80096a6:	4770      	bx	lr

080096a8 <__fputwc>:
 80096a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096ac:	b082      	sub	sp, #8
 80096ae:	4607      	mov	r7, r0
 80096b0:	460e      	mov	r6, r1
 80096b2:	4614      	mov	r4, r2
 80096b4:	f7fe fd4a 	bl	800814c <__locale_mb_cur_max>
 80096b8:	2801      	cmp	r0, #1
 80096ba:	d041      	beq.n	8009740 <__fputwc+0x98>
 80096bc:	4638      	mov	r0, r7
 80096be:	a901      	add	r1, sp, #4
 80096c0:	4632      	mov	r2, r6
 80096c2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 80096c6:	f000 f859 	bl	800977c <_wcrtomb_r>
 80096ca:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80096ce:	4680      	mov	r8, r0
 80096d0:	d02f      	beq.n	8009732 <__fputwc+0x8a>
 80096d2:	2800      	cmp	r0, #0
 80096d4:	d03c      	beq.n	8009750 <__fputwc+0xa8>
 80096d6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80096da:	2500      	movs	r5, #0
 80096dc:	e009      	b.n	80096f2 <__fputwc+0x4a>
 80096de:	6823      	ldr	r3, [r4, #0]
 80096e0:	7019      	strb	r1, [r3, #0]
 80096e2:	6823      	ldr	r3, [r4, #0]
 80096e4:	3301      	adds	r3, #1
 80096e6:	6023      	str	r3, [r4, #0]
 80096e8:	3501      	adds	r5, #1
 80096ea:	45a8      	cmp	r8, r5
 80096ec:	d930      	bls.n	8009750 <__fputwc+0xa8>
 80096ee:	ab01      	add	r3, sp, #4
 80096f0:	5d59      	ldrb	r1, [r3, r5]
 80096f2:	68a3      	ldr	r3, [r4, #8]
 80096f4:	3b01      	subs	r3, #1
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	60a3      	str	r3, [r4, #8]
 80096fa:	daf0      	bge.n	80096de <__fputwc+0x36>
 80096fc:	69a2      	ldr	r2, [r4, #24]
 80096fe:	4293      	cmp	r3, r2
 8009700:	db07      	blt.n	8009712 <__fputwc+0x6a>
 8009702:	6823      	ldr	r3, [r4, #0]
 8009704:	7019      	strb	r1, [r3, #0]
 8009706:	6823      	ldr	r3, [r4, #0]
 8009708:	7819      	ldrb	r1, [r3, #0]
 800970a:	290a      	cmp	r1, #10
 800970c:	f103 0301 	add.w	r3, r3, #1
 8009710:	d1e9      	bne.n	80096e6 <__fputwc+0x3e>
 8009712:	4638      	mov	r0, r7
 8009714:	4622      	mov	r2, r4
 8009716:	f7ff feaf 	bl	8009478 <__swbuf_r>
 800971a:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 800971e:	fab0 f080 	clz	r0, r0
 8009722:	0940      	lsrs	r0, r0, #5
 8009724:	2800      	cmp	r0, #0
 8009726:	d0df      	beq.n	80096e8 <__fputwc+0x40>
 8009728:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800972c:	b002      	add	sp, #8
 800972e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009732:	89a3      	ldrh	r3, [r4, #12]
 8009734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009738:	81a3      	strh	r3, [r4, #12]
 800973a:	b002      	add	sp, #8
 800973c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009740:	1e73      	subs	r3, r6, #1
 8009742:	2bfe      	cmp	r3, #254	; 0xfe
 8009744:	d8ba      	bhi.n	80096bc <__fputwc+0x14>
 8009746:	b2f1      	uxtb	r1, r6
 8009748:	4680      	mov	r8, r0
 800974a:	f88d 1004 	strb.w	r1, [sp, #4]
 800974e:	e7c4      	b.n	80096da <__fputwc+0x32>
 8009750:	4630      	mov	r0, r6
 8009752:	b002      	add	sp, #8
 8009754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009758 <_fputwc_r>:
 8009758:	8993      	ldrh	r3, [r2, #12]
 800975a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800975e:	d10b      	bne.n	8009778 <_fputwc_r+0x20>
 8009760:	b410      	push	{r4}
 8009762:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8009764:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009768:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 800976c:	6654      	str	r4, [r2, #100]	; 0x64
 800976e:	8193      	strh	r3, [r2, #12]
 8009770:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009774:	f7ff bf98 	b.w	80096a8 <__fputwc>
 8009778:	f7ff bf96 	b.w	80096a8 <__fputwc>

0800977c <_wcrtomb_r>:
 800977c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009780:	4605      	mov	r5, r0
 8009782:	b086      	sub	sp, #24
 8009784:	461e      	mov	r6, r3
 8009786:	460c      	mov	r4, r1
 8009788:	b1a1      	cbz	r1, 80097b4 <_wcrtomb_r+0x38>
 800978a:	4b10      	ldr	r3, [pc, #64]	; (80097cc <_wcrtomb_r+0x50>)
 800978c:	4617      	mov	r7, r2
 800978e:	f8d3 8000 	ldr.w	r8, [r3]
 8009792:	f7fe fcd7 	bl	8008144 <__locale_charset>
 8009796:	9600      	str	r6, [sp, #0]
 8009798:	4603      	mov	r3, r0
 800979a:	4621      	mov	r1, r4
 800979c:	463a      	mov	r2, r7
 800979e:	4628      	mov	r0, r5
 80097a0:	47c0      	blx	r8
 80097a2:	1c43      	adds	r3, r0, #1
 80097a4:	d103      	bne.n	80097ae <_wcrtomb_r+0x32>
 80097a6:	2200      	movs	r2, #0
 80097a8:	238a      	movs	r3, #138	; 0x8a
 80097aa:	6032      	str	r2, [r6, #0]
 80097ac:	602b      	str	r3, [r5, #0]
 80097ae:	b006      	add	sp, #24
 80097b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097b4:	4b05      	ldr	r3, [pc, #20]	; (80097cc <_wcrtomb_r+0x50>)
 80097b6:	681f      	ldr	r7, [r3, #0]
 80097b8:	f7fe fcc4 	bl	8008144 <__locale_charset>
 80097bc:	9600      	str	r6, [sp, #0]
 80097be:	4603      	mov	r3, r0
 80097c0:	4622      	mov	r2, r4
 80097c2:	4628      	mov	r0, r5
 80097c4:	a903      	add	r1, sp, #12
 80097c6:	47b8      	blx	r7
 80097c8:	e7eb      	b.n	80097a2 <_wcrtomb_r+0x26>
 80097ca:	bf00      	nop
 80097cc:	20000a38 	.word	0x20000a38

080097d0 <__ascii_wctomb>:
 80097d0:	b121      	cbz	r1, 80097dc <__ascii_wctomb+0xc>
 80097d2:	2aff      	cmp	r2, #255	; 0xff
 80097d4:	d804      	bhi.n	80097e0 <__ascii_wctomb+0x10>
 80097d6:	700a      	strb	r2, [r1, #0]
 80097d8:	2001      	movs	r0, #1
 80097da:	4770      	bx	lr
 80097dc:	4608      	mov	r0, r1
 80097de:	4770      	bx	lr
 80097e0:	238a      	movs	r3, #138	; 0x8a
 80097e2:	6003      	str	r3, [r0, #0]
 80097e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097e8:	4770      	bx	lr
 80097ea:	bf00      	nop

080097ec <_init>:
 80097ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ee:	bf00      	nop
 80097f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097f2:	bc08      	pop	{r3}
 80097f4:	469e      	mov	lr, r3
 80097f6:	4770      	bx	lr

080097f8 <_fini>:
 80097f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097fa:	bf00      	nop
 80097fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097fe:	bc08      	pop	{r3}
 8009800:	469e      	mov	lr, r3
 8009802:	4770      	bx	lr
